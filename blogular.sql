-- MySQL dump 10.13  Distrib 5.6.25, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: blogular
-- ------------------------------------------------------
-- Server version	5.6.25-0ubuntu0.15.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `account_emailaddress`
--

CREATE TABLE `account_emailaddress` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(254) NOT NULL,
  `verified` tinyint(1) NOT NULL,
  `primary` tinyint(1) NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `email` (`email`),
  KEY `account_emailaddress_user_id_5c85949e40d9a61d_fk_auth_user_id` (`user_id`),
  CONSTRAINT `account_emailaddress_user_id_5c85949e40d9a61d_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



DROP TABLE IF EXISTS `account_emailconfirmation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `account_emailconfirmation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created` datetime NOT NULL,
  `sent` datetime DEFAULT NULL,
  `key` varchar(64) NOT NULL,
  `email_address_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `key` (`key`),
  KEY `acc_email_address_id_5bcf9f503c32d4d8_fk_account_emailaddress_id` (`email_address_id`),
  CONSTRAINT `acc_email_address_id_5bcf9f503c32d4d8_fk_account_emailaddress_id` FOREIGN KEY (`email_address_id`) REFERENCES `account_emailaddress` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


--
-- Dumping data for table `account_emailconfirmation`
--


DROP TABLE IF EXISTS `auth_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(80) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


--
-- Dumping data for table `auth_group`
--



DROP TABLE IF EXISTS `auth_group_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_group_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `group_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `group_id` (`group_id`,`permission_id`),
  KEY `auth_group__permission_id_1f49ccbbdc69d2fc_fk_auth_permission_id` (`permission_id`),
  CONSTRAINT `auth_group__permission_id_1f49ccbbdc69d2fc_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_group_permission_group_id_689710a9a73b7457_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `auth_group_permissions`
--


--
-- Table structure for table `auth_permission`
--

DROP TABLE IF EXISTS `auth_permission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_permission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `codename` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `content_type_id` (`content_type_id`,`codename`),
  CONSTRAINT `auth__content_type_id_508cf46651277a81_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=49 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `auth_permission`
--

/*!40000 ALTER TABLE `auth_permission` DISABLE KEYS */;
INSERT INTO `auth_permission` VALUES (1,'Can add log entry',1,'add_logentry'),(2,'Can change log entry',1,'change_logentry'),(3,'Can delete log entry',1,'delete_logentry'),(4,'Can add permission',2,'add_permission'),(5,'Can change permission',2,'change_permission'),(6,'Can delete permission',2,'delete_permission'),(7,'Can add group',3,'add_group'),(8,'Can change group',3,'change_group'),(9,'Can delete group',3,'delete_group'),(10,'Can add user',4,'add_user'),(11,'Can change user',4,'change_user'),(12,'Can delete user',4,'delete_user'),(13,'Can add content type',5,'add_contenttype'),(14,'Can change content type',5,'change_contenttype'),(15,'Can delete content type',5,'delete_contenttype'),(16,'Can add session',6,'add_session'),(17,'Can change session',6,'change_session'),(18,'Can delete session',6,'delete_session'),(19,'Can add site',7,'add_site'),(20,'Can change site',7,'change_site'),(21,'Can delete site',7,'delete_site'),(22,'Can add entry',8,'add_entry'),(23,'Can change entry',8,'change_entry'),(24,'Can delete entry',8,'delete_entry'),(25,'Can add comment',9,'add_comment'),(26,'Can change comment',9,'change_comment'),(27,'Can delete comment',9,'delete_comment'),(28,'Can add Tag',10,'add_tag'),(29,'Can change Tag',10,'change_tag'),(30,'Can delete Tag',10,'delete_tag'),(31,'Can add Tagged Item',11,'add_taggeditem'),(32,'Can change Tagged Item',11,'change_taggeditem'),(33,'Can delete Tagged Item',11,'delete_taggeditem'),(34,'Can add Friend',12,'add_friendship'),(35,'Can change Friend',12,'change_friendship'),(36,'Can delete Friend',12,'delete_friendship'),(37,'Can add FollowingTag',13,'add_followingtag'),(38,'Can change FollowingTag',13,'change_followingtag'),(39,'Can delete FollowingTag',13,'delete_followingtag'),(40,'Can add token',14,'add_token'),(41,'Can change token',14,'change_token'),(42,'Can delete token',14,'delete_token'),(43,'Can add email address',15,'add_emailaddress'),(44,'Can change email address',15,'change_emailaddress'),(45,'Can delete email address',15,'delete_emailaddress'),(46,'Can add email confirmation',16,'add_emailconfirmation'),(47,'Can change email confirmation',16,'change_emailconfirmation'),(48,'Can delete email confirmation',16,'delete_emailconfirmation');
/*!40000 ALTER TABLE `auth_permission` ENABLE KEYS */;

--
-- Table structure for table `auth_user`
--

DROP TABLE IF EXISTS `auth_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `password` varchar(128) NOT NULL,
  `last_login` datetime DEFAULT NULL,
  `is_superuser` tinyint(1) NOT NULL,
  `username` varchar(30) NOT NULL,
  `first_name` varchar(30) NOT NULL,
  `last_name` varchar(30) NOT NULL,
  `email` varchar(254) NOT NULL,
  `is_staff` tinyint(1) NOT NULL,
  `is_active` tinyint(1) NOT NULL,
  `date_joined` datetime NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `username` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `auth_user`
--

/*!40000 ALTER TABLE `auth_user` DISABLE KEYS */;
INSERT INTO `auth_user` VALUES (1,'pbkdf2_sha256$20000$Vgrhhjkq5XKz$BLl+fLhpm3z1EiVwto78eQ7vELegPanaDssBBhEBijU=','2015-09-23 08:35:42.036549',1,'amaozhao','','','amaozhao@gmail.com',1,1,'2015-09-23 08:26:45.890741');
/*!40000 ALTER TABLE `auth_user` ENABLE KEYS */;

--
-- Table structure for table `auth_user_groups`
--

DROP TABLE IF EXISTS `auth_user_groups`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_groups` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `group_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`group_id`),
  KEY `auth_user_groups_group_id_33ac548dcf5f8e37_fk_auth_group_id` (`group_id`),
  CONSTRAINT `auth_user_groups_group_id_33ac548dcf5f8e37_fk_auth_group_id` FOREIGN KEY (`group_id`) REFERENCES `auth_group` (`id`),
  CONSTRAINT `auth_user_groups_user_id_4b5ed4ffdb8fd9b0_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `auth_user_groups`
--


--
-- Table structure for table `auth_user_user_permissions`
--

DROP TABLE IF EXISTS `auth_user_user_permissions`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `auth_user_user_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL,
  `permission_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_id` (`user_id`,`permission_id`),
  KEY `auth_user_u_permission_id_384b62483d7071f0_fk_auth_permission_id` (`permission_id`),
  CONSTRAINT `auth_user_u_permission_id_384b62483d7071f0_fk_auth_permission_id` FOREIGN KEY (`permission_id`) REFERENCES `auth_permission` (`id`),
  CONSTRAINT `auth_user_user_permissi_user_id_7f0938558328534a_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `auth_user_user_permissions`
--


--
-- Table structure for table `authtoken_token`
--

DROP TABLE IF EXISTS `authtoken_token`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `authtoken_token` (
  `key` varchar(40) NOT NULL,
  `created` datetime NOT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`key`),
  UNIQUE KEY `user_id` (`user_id`),
  CONSTRAINT `authtoken_token_user_id_1d10c57f535fb363_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `authtoken_token`
--

--
-- Table structure for table `blog_comment`
--

DROP TABLE IF EXISTS `blog_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `content` longtext NOT NULL,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  `author_id` int(11) NOT NULL,
  `entry_id` int(11) NOT NULL,
  `excerpt` longtext NOT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_comment_created_2689308d3c065d50_idx` (`created`),
  KEY `blog_comment_author_id_11c10a4fb11317cf_fk_auth_user_id` (`author_id`),
  KEY `blog_comment_entry_id_7282adeef7d73863_fk_blog_entry_id` (`entry_id`),
  KEY `blog_comment_e2fa5388` (`created`),
  KEY `blog_comment_0f81d52e` (`updated`),
  CONSTRAINT `blog_comment_author_id_11c10a4fb11317cf_fk_auth_user_id` FOREIGN KEY (`author_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `blog_comment_entry_id_7282adeef7d73863_fk_blog_entry_id` FOREIGN KEY (`entry_id`) REFERENCES `blog_entry` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `blog_comment`
--


--
-- Table structure for table `blog_entry`
--

DROP TABLE IF EXISTS `blog_entry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `blog_entry` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `content` longtext NOT NULL,
  `excerpt` longtext NOT NULL,
  `featured` tinyint(1) NOT NULL,
  `status` int(11) NOT NULL,
  `created` datetime NOT NULL,
  `updated` datetime NOT NULL,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `blog_entry_created_eccbe8c174a63a3_idx` (`created`),
  KEY `blog_entry_status_7711f449b335800_idx` (`status`,`created`),
  KEY `blog_entry_author_id_6548b6ad62a06256_fk_auth_user_id` (`author_id`),
  KEY `blog_entry_9acb4454` (`status`),
  KEY `blog_entry_e2fa5388` (`created`),
  KEY `blog_entry_0f81d52e` (`updated`),
  CONSTRAINT `blog_entry_author_id_6548b6ad62a06256_fk_auth_user_id` FOREIGN KEY (`author_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `blog_entry`
--

/*!40000 ALTER TABLE `blog_entry` DISABLE KEYS */;
INSERT INTO `blog_entry` VALUES (1,'Django class-based view 基础','\r\n\r\n自从Django在1.3中新增了class-based view以来，还没有仔细研究它，开始感觉这个东西是否有点多余？因为Django已经有了Generic veiws了啊, 可是仔细看过class-based veiw之后, 这种想法打消了, 因为你完全可以用类方法实现你所有的视图, 而代码阅读起来却更容易!\r\n\r\n如果要深入理解class-based view, 那首先就要了解什么是Mixin! Django把基本的http请求和响应抽象出来, 封装成各自的类, 在使用过程中只需把各个基类聚合到一起使用, 并按照自己的要求重写自己需要的方法就可以了, 那么就把这些基类叫Mixin吧. 在Django中比较基础的Mixin主要有几类:\r\n\r\n1.     View(视图基础类)\r\n2.     SingleObjectMixin(单对象类)\r\n3.     MultipleObjectMixin(多对象类)\r\n4.     TemplateResponseMixin(模板响应类)\r\n5.     FormMixin(表单类)\r\n6.     YearMixin, MonthMixin, DayMixin, WeekMixin, DateMixin(几个基于时间关系的类)\r\n\r\n其他的所有内置class-based view都是把以上几个基础类组合, 重写方法以达到预期的结果. 比如DetailView这个类就组合了SingleObjectTemplateResponseMixin和BaseDetailView. 而在Django官方文档中有比较详细的ListView和DetailView的详细例子和说明, 本文这里就不在重复了, 本文的目的主要集中在官方文档中没有仔细说明的FormMixin上,下面来看例子, 我们就用官网上提供的models:\r\n```python\r\nfrom django.db import models\r\n\r\nclass Publisher(models.Model):\r\n    name = models.CharField(max_length=30)\r\n    address = models.CharField(max_length=50)\r\n    city = models.CharField(max_length=60)\r\n    state_province = models.CharField(max_length=30)\r\n    country = models.CharField(max_length=50)\r\n    website = models.URLField()\r\n\r\n	class Meta:\r\n    	ordering = [\"-name\"]\r\n\r\n	def __unicode__(self):\r\n    	return self.name\r\n\r\nclass Book(models.Model):\r\n    title = models.CharField(max_length=100)\r\n    authors = models.ManyToManyField(\'Author\')\r\n    publisher = models.ForeignKey(Publisher)\r\n    publication_date = models.DateField()\r\n```\r\n这个model中提供了2个类, 一个是Publisher, 一个是Book. 下面来看如何用FormMixin更新Book:\r\n\r\n首先, 我们需要创建一个form, 代码如下:\r\n```python\r\nfrom django import forms\r\nfrom models import Book\r\n\r\nclass BookForm(forms.ModelForm):\r\n	class Meta:\r\n		model = Book\r\n```\r\n那么在我们的视图类就可以简单地这样来操作:\r\n```python\r\nfrom django.views.generic.edit import CreateView\r\nfrom models import Book\r\nfrom forms import BookForm\r\n\r\nclass AddBook(CreateView):\r\n    form_class = BookForm\r\n    model = Book\r\n    template_name = \'addbook.html\'  #这里是你的模板文件名\r\n```\r\n接着我们创建这个模板文件, 比如:\r\n```html\r\n<form action=\"/contact/\" method=\"post\">{% csrf_token %}\r\n	{{ form.as_p }}\r\n	<input type=\"submit\" value=\"Submit\" />\r\n</form>\r\n```\r\n最后一步就是在urls文件中指向我们创建的AddBook类了, 例如:\r\n```python\r\nurl(r\'^createbook/$\', AddBook.as_view(), name = \'createbook\'),\r\n```\r\n完成以上的步骤就可以创建Book了! 简单吧? 好像还有点问题, 怎么非登陆用户也能创建Book? 这个问题我们可以参照Django官方文档中的例子, 我们可以给AddBook类添加一个方法,如下:\r\n```python\r\nfrom django.views.generic.edit import CreateView\r\nfrom django.contrib.auth.decorators import login_required\r\nfrom django.utils.decorators import method_decorator\r\nfrom models import Book\r\nfrom forms import BookForm\r\n\r\nclass AddBook(CreateView):\r\n    form_class = BookForm\r\n    model = Book\r\n    template_name = \'addbook.html\'  #这里是你的模板文件名\r\n\r\n    @method_decorator(login_required)\r\n    def dispatch(self, *args, **kwargs):\r\n    	return super(ProtectedView, self).dispatch(*args, **kwargs)\r\n```\r\n这样, 当用户想要创建Book而又没有登陆的话, 浏览器会跳转到登陆界面.\r\n写了这么点就感觉有点乱了, 整理一下, 明天继续写FormMixin应用的深入应用.\r\n','<p>自从Django在1.3中新增了class-based view以来，还没有仔细研究它，开始感觉这个东西是否有点多余？因为Django已经有了Generic veiws了啊, 可是仔细看过class-based veiw之后, 这种想法打消了, 因为你完全可以用类方法实现你所有的视图, 而代码阅读起来却更容易!</p>\n<p>如果要深入理解class-based view, 那首先就要了解什么是Mixin! Django把基本的http请求和响应抽象出来, 封装成各自的类, 在使用过程中只需把各个基类聚合到一起使用, 并按照自己的要求重写自己需要的方法就可以了, 那么就把这些基类叫Mixin吧. 在Django中比较基础的Mixin主要有几类:</p>\n<ol>\n<li>View(视图基础类)</li>\n<li>SingleObjectMixin(单对象类)</li>\n<li>MultipleObjectMixin(多对象类)</li>\n<li>TemplateResponseMixin(模板响应类)</li>\n<li>FormMixin(表单类)</li>\n<li>YearMixin, MonthMixin, DayMixin, WeekMixin, DateMixin(几个基于时间关系的类)</li>\n</ol>\n<p>其他的所有内置class-based view都是把以上几个基础类组合, 重写方法以达到预期的结果. 比如DetailView这个类就组合了SingleObjectTemplateResponseMixin和BaseDetailView. 而在Django官方文档中有比较详细的ListView和DetailView的详细例子和说明, 本文这里就不在重复了, 本文的目的主要集中在官方文档中没有仔细说明的FormMixin上,下面来看例子, 我们就用官网上提供的models:</p>\n<div class=\"codehilite\"><pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import...</span></pre></div>',0,2,'2014-12-21 01:27:07.000000','2015-01-29 18:06:01.000000',1),(2,'Django class-based view 深入','\r\n\r\n上一篇我们粗略介绍了Django中的class-based view基础知识, 本篇我们继续来看关于class-based view的高级应用.\r\n\r\n我们继续沿用上篇中的model:\r\n```python\r\nfrom django.db import models\r\n\r\nclass Publisher(models.Model):\r\n    name = models.CharField(max_length=30)\r\n    address = models.CharField(max_length=50)\r\n    city = models.CharField(max_length=60)\r\n    state_province = models.CharField(max_length=30)\r\n    country = models.CharField(max_length=50)\r\n    website = models.URLField()\r\n\r\n	class Meta:\r\n    	ordering = [\"-name\"]\r\n\r\n	def __unicode__(self):\r\n    	return self.name\r\n\r\nclass Book(models.Model):\r\n    title = models.CharField(max_length=100)\r\n    authors = models.ManyToManyField(\'Author\')\r\n    publisher = models.ForeignKey(Publisher)\r\n    publication_date = models.DateField()\r\n```\r\n我们来看看如何对一个Book实例进行更新, 我们要做的只是在视图类中更新 :\r\n```python\r\nfrom django.views.generic.edit import UpdateView\r\nfrom models import Book\r\nfrom forms import BookForm\r\n\r\nclass UpdateBook(UpdateView):\r\n    form_class = BookForm\r\n    model = Book\r\n    template_name = \'updatebook.html\'  #这里是你的模板文件名\r\n```\r\n但是, 我们很多时候并不是简单地对一个实例进行如上的更新, 可能有更复杂的要求, 比如想隐藏一些属性让用户更新时不可见, 甚至有些属性(比如用户)都是在针对当前登录用户进行操作的, 而不用手动选择哪个用户, 类似这样的操作应该如何实现呢? 我们不妨把Book Model修改一下:\r\n```python\r\nfrom django.contrib.auth.models import User\r\n\r\nclass Book(models.Model):\r\n    title = models.CharField(max_length=100)\r\n    author = models.ForeignKey(User, related_name=\'Author\')\r\n    publisher = models.ForeignKey(Publisher)\r\n    publication_date = models.DateField()\r\n```\r\n我们把author改成User, 并使用ForeignKey关联. 下面将要实现针对当前登录用户增加一个Book实例, 重写AddBookForm如下:\r\n```python\r\nfrom django import forms\r\nfrom django.contrib.auth.models import User\r\n\r\nfrom models import Book\r\n\r\nclass AddBookForm(forms.ModelForm):\r\n	class Meta:\r\n    	model = Book\r\n        exclude = (\'author\',)\r\n\r\n	def __init__(self, user, *args, **kwargs):\r\n        super(AddBookForm, self).__init__(*args, **kwargs)\r\n        self.fields[\'author\'].queryset = User.objects.get(username = user.username)\r\n```\r\n下面来看视图类:\r\n```python\r\nfrom django.views.generic.edit import UpdateView\r\nfrom models import Book\r\nfrom forms import AddBookForm\r\n\r\nclass UpdateBook(UpdateView):\r\n    form_class = AddBookForm\r\n    model = Book\r\n    template_name = \'updatebook.html\'  #这里是你的模板文件名\r\n\r\n    def get_object(self):\r\n    	return Snippet(author = self.request.user)\r\n\r\n	def get_form(self, form_class):\r\n    	return self.form_class(self.request.user, **self.get_form_kwargs())\r\n```\r\n经过简单地变化, 我们就可以在不用选择author而使用当前登录用户替代来实现创建Book.\r\n\r\n值得注意的是get_object这个方法, 它继承自SingleObjectMixin, 如果你需要更复杂的对单实例的操作, 只需在你的视图中按照你的逻辑重写这个方法就可以了! 是不是简化了不少呢? 其他的class-based view实现都和这个类似, 可以说Form类操作是Django类视图中的典型.\r\n**总结**\r\n\r\n根据以上的讨论, 我们可以得出一个结论: 任何视图操作都可以用类视图之间的聚合, 方法重写完成你想要的操作!(包括AJAX, 在Django官方文档中给出了一个简单的示例, 如果你有兴趣, 可以用它来做实验.) 但是有一点比较遗憾: 由于Django1.3刚刚发布不久, 还没有成熟的网站用到class-based view来实现全部的视图操作, 性能方面还有待考验. 后续的Django关于AJAX的应用下篇细说!\r\n','<p>上一篇我们粗略介绍了Django中的class-based view基础知识, 本篇我们继续来看关于class-based view的高级应用.</p>\n<p>我们继续沿用上篇中的model:</p>\n<div class=\"codehilite\"><pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Publisher</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">state_province</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">website</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">URLField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">&quot;-name&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self...</span></pre></div>',0,2,'2014-12-21 01:31:05.000000','2015-01-29 18:05:53.000000',1),(3,'zinnia博客移植到sina app','经过2天的折腾，终于把[zinnia](https://github.com/Fantomas42/django-blog-zinnia)移植到了SEA上。源码可以在[这里](https://coding.net/u/amaozhao/p/blog/git)查看。\r\n\r\n主要改动如下：\r\n1.  后台日志编辑器采用了[UIKit](http://getuikit.com)的markdown编辑器。\r\n2.  前端主题采用[bootstrap](http://getbootstrap.com)。\r\n3.  前端日志显示采用marked和highlight渲染日志。\r\n4.  [Django](https://www.djangoproject.com) Admin采用[bootstrap](http://getbootstrap.com)重新设计。\r\n\r\n\r\n#### 已发现的问题:\r\n\r\n- 后台提交日志时会出现mysql 2006 链接超时的错误, 目前还没找到原因. ','<p>经过2天的折腾，终于把<a href=\"https://github.com/Fantomas42/django-blog-zinnia\">zinnia</a>移植到了SEA上。源码可以在<a href=\"https://coding.net/u/amaozhao/p/blog/git\">这里</a>查看。</p>\n<p>主要改动如下：\n1.  后台日志编辑器采用了<a href=\"http://getuikit.com\">UIKit</a>的markdown编辑器。\n2.  前端主题采用<a href=\"http://getbootstrap.com\">bootstrap</a>。\n3.  前端日志显示采用marked和highlight渲染日志。\n4.  <a href=\"https://www.djangoproject.com\">Django</a> Admin采用<a href=\"http://getbootstrap.com\">bootstrap</a>重新设计。</p>\n<h4>已发现的问题:</h4>\n<ul>\n<li>后台提交日志时会出现mysql 2006 链接超时的错误, 目前还没找到原因. </li>\n</ul>',0,2,'2014-12-21 01:37:42.000000','2015-01-29 18:05:45.000000',1),(4,'16 个 Sublime Text 快捷键','**选择**\r\n\r\n*     选择一个选中项的下一个匹配项\r\n*     选择一个选中项的所有匹配项\r\n*     选择与光标关联的开始和结束标签\r\n*     选择容器内内容（新）\r\n*     选择括号内的内容\r\n\r\n**移动行和文本**\r\n\r\n*     上移或下移行\r\n*     复制行或选中项\r\n*     增加和减少缩进\r\n\r\n**剪切和删除，复制和粘贴**\r\n\r\n*     剪切行或选中项\r\n*     粘贴并保持缩进\r\n*     用标签包裹行或选中项\r\n*     移除未闭合的容器元素\r\n\r\n**文本和数字操作**\r\n\r\n*     计算数学表达式\r\n*     递增和递减\r\n*     大写和小写\r\n\r\n**注释和对齐变量**\r\n\r\n*     注释选中项/行\r\n*     AlignTab自定义快捷键\r\n\r\n选择一个选中项的下一个匹配项: ⌘ + D\r\n（非mac：ctrl+d）\r\n\r\n把光标放在一个单词上，按下ctrl+d,将选择这个单词。一直按住ctrl且按d多次，将选择当前选中项的下一个匹配项。通过按住ctrl,再按d三次,将选择三个相同的文本。\r\n\r\n![](http://ww1.sinaimg.cn/mw690/6941baebgw1eniih3wmwjg20fk089wge.gif)\r\n\r\n选择一个选中项的所有匹配项: CTRL + ⌘ + G\r\n\r\n（非mac：alt+f3）\r\n\r\n和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. \r\n\r\n![](http://ww3.sinaimg.cn/mw690/6941baebgw1eniih3i5g7g20fk089mzj.gif)\r\n\r\n选择与光标关联的开始和结束标签:⌘+⇧+ K\r\n\r\n（非mac：ctrl+shift+’）\r\n\r\n这是一个法宝。也许你希望所有属性保持不变,但只是想选择标签。这个快捷键为你这样做,会注意到你可以在一次操作多个标签。**需要Emmet插件**\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniih35ta2g20fk0890v0.gif)\r\n\r\n选择容器内内容:CTRL + D \r\n\r\n（非mac：ctrl+shift+a）\r\n\r\n如果你把光标放在文本间再按下上面的键将选择文本,就像⌘+ D。但是再次按下它，将选择父容器,再按,将选择父容器的父容器。**需要Emmet插件**\r\n\r\n![](http://ww3.sinaimg.cn/mw690/6941baebgw1eniih2mxsxg20fk089dgr.gif)\r\n\r\n选择括号内的内容: ⌘ + ⇧ + Space\r\n\r\n（非mac：ctrl+shift+m）\r\n\r\n这有助于选择括号之间的一切。同样适用于CSS。\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniih2e60vg20fk089gml.gif)\r\n\r\n上移或下移行: CTRL + ⌘ + ↑ 或 ↓\r\n\r\n（非mac：ctrl+shift+↑ 或 ↓）\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniih1tk8rg20fk089dgv.gif)\r\n\r\n复制行或选中项: ⌘ + ⇧ + D\r\n\r\n（非mac：ctrl+shift+d）如果你已经选中了文本,它会复制你的选中项。否则,把光标放在行上,会复制整行。\r\n\r\n![](http://ww2.sinaimg.cn/mw690/6941baebgw1eniih1hs73g20fk089dj4.gif)\r\n\r\n增加和减少缩进: ⌘ + [ 或 ]\r\n\r\n（非mac：ctrl+[ 或 ]）\r\n\r\n![](http://ww1.sinaimg.cn/mw690/6941baebgw1eniih10ll0g20fk0893yx.gif)\r\n\r\n剪切行或选中项: ⌘ + X\r\n\r\n（非mac：ctrl+x）\r\n\r\n剪切一行到你的剪切板，你可以粘贴到其他地方。\r\n\r\n![](http://ww2.sinaimg.cn/mw690/6941baebgw1eniih0mwing20fk089q3m.gif)\r\n\r\n粘贴并保持缩进: ⇧ + ⌘ + V\r\n\r\n（非mac：ctrl+shift+v）这是又一个我每次都用的快捷键。在gif中我显示了普通粘贴(⌘+ V)和缩进粘贴两种效果的对比。注意缩进如何排列。\r\n\r\n![](http://ww1.sinaimg.cn/mw690/6941baebgw1eniih08w7hg20fk08977h.gif)\r\n\r\n用标签包裹行或选中项: CTRL + ⇧ + W\r\n\r\n（非mac：alt+shift+w）\r\n\r\n使用标签包裹一行; 开始输入你想使用的标签,你成功了.\r\n\r\n![](http://ww2.sinaimg.cn/mw690/6941baebgw1eniigzytgkg20fk089q76.gif)\r\n\r\n移除未闭合的容器元素: ⌘ + ’\r\n\r\n（非mac：ctrl+shift+;）这会移除与你的光标相关的父标签。对清除标记很有帮助。\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniigzdkybg20fk089mxw.gif)\r\n\r\n计算数学表达式: ⌘ + ⇧ + Y\r\n\r\n（非mac：ctrl+shift+y）我从未想过我会经常使用这个，但是确实很好用。\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniigyz60zg20fk089js1.gif)\r\n\r\n递增和递减: ⇧ + OPTION + ↑ or ↓, OPTION + ↑ or ↓\r\n\r\n（非mac：alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓）\r\n\r\n按住 ⇧ 将以10的步长改变数字, 不按住以1为步长. 同时注意到你不需要选择数字, Sublime Text 足够聪明到更新本行最近的数字。\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniigwnj1wg20fk089dha.gif)\r\n\r\n大写和小写: ⌘ + K then U, ⌘ + K then L\r\n\r\n（非mac：ctrl+k+u,ctrl+k+l）\r\n\r\n![](http://ww4.sinaimg.cn/mw690/6941baebgw1eniigw7rcqg20fk089t9z.gif)\r\n\r\n注释选中项/行: ⌘ + /\r\n\r\n（非mac：ctrl+/）\r\n\r\n![](http://ww1.sinaimg.cn/mw690/6941baebgw1eniigvpaw1g20fk0890ut.gif)\r\n\r\n这个在所有语言下都可用, 对行和选中项都可用.\r\n\r\n额外令人高兴的事情!使用AlignTab自定义快捷键\r\n\r\n上面的快捷键都是Sublime Text默认的快捷键,但是你也可以添加你自己的自定义快捷键。以下示例应用 AlignTab插件使用 三个自定义键绑定 来基于=> ,=,和:进行内容垂直对齐。\r\n\r\n在你自己的编辑器实现下面gif的效果,只需安装 AlignTab, ,添加自定义绑定到您的自定义键绑定文件中,选择一些代码,并点击CTRL + ⇧ + . 或 ; 或 =.\r\n\r\n**结论**\r\n\r\n一旦你看到多行代码发生了一个改变,通常有一个使用几个按键来实现改变的方法，而不是一个个地编辑它们。通过连续使用上面快捷键的组合去执行重复的或可预见的改变,你可以大大提高你编码的速度。\r\n\r\n这里是一个简短的Gif,包括选择所有匹配项,复制链接的文本,利用多行光标粘贴复制的文本,并将该文本转换为小写。','<p><strong>选择</strong></p>\n<ul>\n<li>选择一个选中项的下一个匹配项</li>\n<li>选择一个选中项的所有匹配项</li>\n<li>选择与光标关联的开始和结束标签</li>\n<li>选择容器内内容（新）</li>\n<li>选择括号内的内容</li>\n</ul>\n<p><strong>移动行和文本</strong></p>\n<ul>\n<li>上移或下移行</li>\n<li>复制行或选中项</li>\n<li>增加和减少缩进</li>\n</ul>\n<p><strong>剪切和删除，复制和粘贴</strong></p>\n<ul>\n<li>剪切行或选中项</li>\n<li>粘贴并保持缩进</li>\n<li>用标签包裹行或选中项</li>\n<li>移除未闭合的容器元素</li>\n</ul>\n<p><strong>文本和数字操作</strong></p>\n<ul>\n<li>计算数学表达式</li>\n<li>递增和递减</li>\n<li>大写和小写</li>\n</ul>\n<p><strong>注释和对齐变量</strong></p>\n<ul>\n<li>注释选中项/行</li>\n<li>AlignTab自定义快捷键</li>\n</ul>\n<p>选择一个选中项的下一个匹配项: ⌘ + D\n（非mac：ctrl+d）</p>\n<p>把光标放在一个单词上，按下ctrl+d,将选择这个单词。一直按住ctrl且按d多次，将选择当前选中项的下一个匹配项。通过按住ctrl,再按d三次,将选择三个相同的文本。</p>\n<p><img alt=\"\" src=\"http://ww1.sinaimg.cn/mw690/6941baebgw1eniih3wmwjg20fk089wge.gif\" /></p>\n<p>选择一个选中项的所有匹配项: CTRL + ⌘ + G</p>\n<p>（非mac：alt+f3）</p>\n<p>和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. </p>\n<p><img alt=\"\" src=\"http://ww3.sinaimg.cn/mw690/6941baebgw1eniih3i5g7g20fk089mzj.gif\" /></p>\n<p>选择与光标关联的开始和结束标签...</p>',0,2,'2014-12-23 10:04:14.000000','2015-01-29 18:05:22.000000',1),(5,'前端工作面试问题集锦','###前端工作面试问题\r\n\r\n**备注:** 这篇文章是从[Github](https://github.com)上转载的, 原文请参考 [这里](https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md).\r\n\r\n[Rebecca Murphey](http://rmurphey.com/) 的 [Baseline For Front-End Developers](http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/) 是你在准备面试前应该阅读的绝佳资源。\r\n\r\n**记住：** 很多问题都是开放的，可以引发有趣的讨论。这比直接的答案更能体现此人的能力。\r\n\r\n#### 目录\r\n\r\n  1. [最初的贡献者](#contributors)\r\n  1. [常见问题](#general)\r\n  1. [HTML 相关问题](#html)\r\n  1. [CSS 相关问题](#css)\r\n  1. [JS 相关问题](#js)\r\n  1. [jQuery 相关问题](#jquery)\r\n  1. [代码相关的问题](#jscode)\r\n  1. [有趣的问题](#fun)\r\n  1. [其他参考资料](#references)\r\n  1. [协议](#license)\r\n\r\n#### 最初贡献者\r\n\r\n这里大部分的面试题都摘抄自 [Paul Irish](http://paulirish.com) ([@paul_irish](http://twitter.com/paul_irish)) 在 [oksoclap](http://oksoclap.com/) 创建的帖子，这份原帖的贡献者还有：\r\n\r\n* [@bentruyman](http://twitter.com/bentruyman) - http://bentruyman.com\r\n* [@cowboy](http://twitter.com/cowboy) - http://benalman.com\r\n* [@ajpiano](http://ajpiano) - http://ajpiano.com\r\n* [@SlexAxton](http://twitter.com/slexaxton) - http://alexsexton.com\r\n* [@boazsender](http://twitter.com/boazsender) - http://boazsender.com\r\n* [@miketaylr](http://twitter.com/miketaylr) - http://miketaylr.com\r\n* [@vladikoff](http://twitter.com/vladikoff) - http://vladfilippov.com\r\n* [@gf3](http://twitter.com/gf3) - http://gf3.ca\r\n* [@jon_neal](http://twitter.com/jon_neal) - http://twitter.com/jon_neal\r\n* [@wookiehangover](http://twitter.com/wookiehangover) - http://wookiehangover.com\r\n* [@darcy_clarke](http://twitter.com/darcy) - http://darcyclarke.me\r\n* [@iansym](http://twitter.com/iansym)\r\n\r\n\r\n####常见问题：\r\n\r\n* 你在昨天/本周学到了什么？\r\n\r\n* 编写代码的哪些方面能够使你兴奋或感兴趣？\r\n\r\n* 在制作一个Web应用或Web站点的过程中，你是如何考虑它的UI、安全性、高性能、SEO、可维护性以及技术因素的？\r\n\r\n* 谈谈你喜欢的开发环境。(例如操作系统，编辑器，浏览器，工具等等。)\r\n\r\n* 你最熟悉哪一套版本控制系统？\r\n\r\n* 你能描述一下当你制作一个网页的工作流程吗？\r\n\r\n* 你能描述一下渐进增强和优雅降级之间的不同吗?\r\n	* 如果提到了特性检测，可以加分。\r\n\r\n* 假若你有5个不同的 CSS 文件, 加载进页面的最好方式是?\r\n  * 文件拼合\r\n\r\n\r\n* 你如何对网站的文件和资源进行优化？\r\n	* 期待的解决方案包括：\r\n		* 文件合并\r\n		* 文件最小化/文件压缩\r\n		* 使用 CDN 托管\r\n		* 缓存的使用\r\n		* 其他\r\n\r\n* 为什么利用多个域名来提供网站资源会更有效？\r\n	* 浏览器同一时间可以从一个域名下载多少资源？\r\n    * 有什么例外吗？\r\n        * 加分项： 指出在手机端可能有负面影响 (http://www.mobify.com/blog/domain-sharding-bad-news-mobile-performance/)\r\n        * 加分项： HTTP2 / SPDY\r\n\r\n* 请说出三种减少页面加载时间的方法。（加载时间指感知的时间或者实际加载时间）\r\n\r\n* 如果你参与到一个项目中，发现他们使用 Tab 来缩进代码，但是你喜欢空格，你会怎么做？\r\n	* 建议这个项目使用像 EditorConfig (http://editorconfig.org/) 之类的规范\r\n	* 为了保持一致性，接受项目原有的风格\r\n	* 直接使用 VIM 的 retab 命令\r\n\r\n* 请写一个简单的幻灯效果页面\r\n	* 如果不使用JS来完成，可以加分。\r\n\r\n* 你都使用哪些工具来测试代码的性能？\r\n	* Profiler, JSPerf, Dromaeo\r\n\r\n* 如果今年你打算熟练掌握一项新技术，那会是什么？\r\n\r\n* Long-Polling, Websockets, SSE(Server-Sent Event) 之间有什么区别？\r\n\r\n* 请谈一下你对网页标准和标准制定机构重要性的理解。\r\n\r\n* 什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？\r\n\r\n* 请尽可能完整得描述下从输入URL到整个网页加载完毕及显示在屏幕上的整个流程\r\n\r\n#### HTML相关问题：\r\n\r\n* `doctype`（文档类型）的作用是什么？\r\n\r\n* 浏览器标准模式和怪异模式之间的区别是什么？\r\n\r\n* 使用 XHTML 的局限有哪些？\r\n	* 如果页面使用 \'application/xhtml+xml\' 会有什么问题吗？\r\n\r\n* 如果网页内容需要支持多语言，你会怎么做？\r\n	* 在设计和开发多语言网站时，有哪些问题你必须要考虑？\r\n\r\n* `data-`属性的作用是什么？\r\n\r\n* 如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？\r\n\r\n* 请描述一下 cookies，sessionStorage 和 localStorage 的区别？\r\n\r\n* 请描述一下 `GET` 和 `POST` 的区别?\r\n\r\n#### CSS 相关问题：\r\n\r\n* CSS 中类(classes)和 ID 的区别。\r\n\r\n* 描述下 “reset” CSS 文件的作用和使用它的好处。\r\n    * 期待能够指出它的负面影响，或者提到它的一个更好的替换者\"normalize\"\r\n\r\n* 解释下浮动和它的工作原理。\r\n\r\n* 描述`z-index`和叠加上下文是如何形成的。\r\n\r\n* 列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。\r\n\r\n* 解释下 CSS sprites，以及你要如何在页面或网站中实现它。\r\n\r\n* 你最喜欢的图片替换方法是什么，你如何选择使用。\r\n\r\n* 讨论CSS hacks，条件引用或者其他。\r\n\r\n* 如何为有功能限制的浏览器提供网页？\r\n  * 你会使用哪些技术和处理方法？\r\n\r\n* 有哪些的隐藏内容的方法（如果同时还要保证屏幕阅读器可用呢？）\r\n\r\n* 你用过栅格系统吗？如果使用过，你最喜欢哪种？\r\n\r\n* 你用过媒体查询，或针对移动端的布局/CSS 吗？\r\n\r\n* 你熟悉 SVG 样式的书写吗？\r\n\r\n* 如何优化网页的打印样式？\r\n\r\n* 在书写高效 CSS 时会有哪些问题需要考虑？\r\n\r\n* 使用 CSS 预处理器的优缺点有哪些？(SASS，Compass，Stylus，LESS)\r\n  * 描述下你曾经使用过的 CSS 预处理的优缺点。\r\n\r\n* 如果设计中使用了非标准的字体，你该如何去实现？\r\n  * Webfonts (字体服务例如：Google Webfonts，Typekit 等等。)\r\n\r\n* 解释下浏览器是如何判断元素是否匹配某个 CSS 选择器？\r\n\r\n* 解释一下你对盒模型的理解，以及如何在 CSS 中告诉浏览器使用不同的盒模型来渲染你的布局。\r\n\r\n* 请解释一下 ```* { box-sizing: border-box; }``` 的作用, 并且说明使用它有什么好处？\r\n\r\n* 请罗列出你所知道的 display 属性的全部值\r\n\r\n* 请解释一下 inline 和 inline-block 的区别？\r\n\r\n* 请解释一下 relative、fixed、absolute 和 static 元素的区别\r\n\r\n* 你目前在使用哪一套CSS框架，或者在产品线上使用过哪一套？(Bootstrap, PureCSS, Foundation 等等)\r\n  * 如果有，请问是哪一套？如果可以，你如何改善CSS框架？\r\n\r\n* 请问你有使用过 CSS Flexbox 或者 Grid specs 吗？\r\n  * 如果有，请问在性能和效率的方面你是怎么看的？\r\n\r\n* 为什么响应式设计（responsive design）和自适应设计（adaptive design）不同？\r\n\r\n* 你有兼容 retina 屏幕的经历吗？如果有，在什么地方使用了何种技术？\r\n\r\n#### JS相关问题：\r\n\r\n* 解释下事件代理。\r\n\r\n* 解释下 JavaScript 中 `this` 是如何工作的。\r\n\r\n* 解释下原型继承的原理。\r\n\r\n* 你是如何测试 JavaScript 代码的？\r\n\r\n* AMD vs. CommonJS？\r\n\r\n* 什么是哈希表？\r\n\r\n* 解释下为什么接下来这段代码不是 IIFE(立即调用的函数表达式)：`function foo(){ }();`.\r\n  * 要做哪些改动使它变成 IIFE?\r\n\r\n* 描述以下变量的区别：`null`，`undefined` 或 `undeclared`？\r\n  * 该如何检测它们？\r\n\r\n* 什么是闭包，如何使用它，为什么要使用它？\r\n\r\n* 请举出一个匿名函数的典型用例？\r\n\r\n* 解释 “JavaScript 模块模式” 以及你在何时使用它。\r\n  * 如果有提到无污染的命名空间，可以考虑加分。\r\n  * 如果你的模块没有自己的命名空间会怎么样？\r\n\r\n* 你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？\r\n\r\n* 请指出 JavaScript 宿主对象和原生对象的区别？\r\n\r\n* 指出下列代码的区别：\r\n```javascript\r\nfunction Person(){}\r\nvar person = Person();\r\nvar person = new Person();\r\n```\r\n\r\n* `.call` 和 `.apply` 的区别是什么？\r\n\r\n* 请解释 `Function.prototype.bind`？\r\n\r\n* 你何时优化自己的代码？\r\n\r\n* 在什么时候你会使用 `document.write()`？\r\n    * 大多数生成的广告代码依旧使用 `document.write()`，虽然这种用法会让人很不爽。\r\n\r\n* 请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？\r\n\r\n* 请尽可能详尽的解释 AJAX 的工作原理。\r\n\r\n* 请解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX。\r\n\r\n* 你使用过 JavaScript 模板系统吗？\r\n    * 如有使用过，请谈谈你都使用过哪些库，比如 Mustache.js，Handlebars 等等。\r\n\r\n* 请解释变量声明提升。\r\n\r\n* 请描述下事件冒泡机制。\r\n\r\n* \"attribute\" 和 \"property\" 的区别是什么？\r\n\r\n* 为什么扩展 JavaScript 内置对象不是好的做法？\r\n\r\n* 请指出 document load 和 document ready 两个事件的区别。\r\n\r\n* `==` 和 `===` 有什么不同？\r\n\r\n* 请解释一下 JavaScript 的同源策略。\r\n\r\n* 如何实现下列代码：\r\n```javascript\r\n[1,2,3,4,5].duplicator(); // [1,2,3,4,5,1,2,3,4,5]\r\n```\r\n\r\n* 什么是三元表达式？“三元” 表示什么意思？\r\n\r\n* 什么是 `\"use strict\";` ? 使用它的好处和坏处分别是什么？\r\n\r\n#### jQuery 相关问题：\r\n\r\n* 解释\"chaining\"。\r\n\r\n* 解释\"deferreds\"。\r\n\r\n* 你知道哪些针对 jQuery 的优化方法。\r\n\r\n* 请解释 `.end()` 的用途。\r\n\r\n* 你如何给一个事件处理函数命名空间，为什么要这样做？\r\n\r\n* 请说出你可以传递给 jQuery 方法的四种不同值。\r\n	* 选择器（字符串），HTML（字符串），回调函数，HTML元素，对象，数组，元素数组，jQuery对象等。\r\n\r\n* 什么是效果队列？\r\n\r\n* 请指出 `.get()`，`[]`，`eq()` 的区别。\r\n\r\n* 请指出 `.bind()`，`.live()` 和 `.delegate()` 的区别。\r\n\r\n* 请指出 `$` 和 `$.fn` 的区别，或者说出 `$.fn` 的用途。\r\n\r\n* 请优化下列选择器：\r\n```javascript\r\n$(\".foo div#bar:eq(0)\")\r\n```\r\n\r\n#### 代码相关的问题：\r\n\r\n```javascript\r\nmodulo(12, 5) // 2\r\n```\r\n\r\n问题：实现满足上述结果的modulo函数\r\n\r\n```javascript\r\n\"i\'m a lasagna hog\".split(\"\").reverse().join(\"\");\r\n```\r\n\r\n问题：上面的语句的返回值是什么？\r\n**答案：\"goh angasal a m\'i\"**\r\n\r\n```javascript\r\n( window.foo || ( window.foo = \"bar\" ) );\r\n```\r\n\r\n问题：window.foo 的值是什么？\r\n**答案：\"bar\"**\r\n只有 window.foo 为假时的才是上面答案，否则就是它本身的值。\r\n\r\n```javascript\r\nvar foo = \"Hello\"; (function() { var bar = \" World\"; alert(foo + bar); })(); alert(foo + bar);\r\n```\r\n\r\n问题：上面两个 alert 的结果是什么\r\n**答案: \"Hello World\" 和 ReferenceError: bar is not defined**\r\n\r\n```javascript\r\nvar foo = [];\r\nfoo.push(1);\r\nfoo.push(2);\r\n```\r\n\r\n问题：foo.length 的值是什么？\r\n**答案：`2`**\r\n\r\n####有趣的问题：\r\n\r\n* 你编写过的最酷的代码是什么？其中你最自豪的是什么？\r\n\r\n* 在你使用的开发工具中，最喜欢哪些方面？\r\n\r\n* 你有什么业余项目吗？是哪种类型的？\r\n\r\n* 你最爱的 IE 特性是什么？\r\n\r\n#### 其他参考资料：\r\n\r\n* http://programmers.stackexchange.com/questions/46716/what-technical-details-should-a-programmer-of-a-web-application-consider-before\r\n* http://www.nczonline.net/blog/2010/01/05/interviewing-the-front-end-engineer/\r\n* http://css-tricks.com/interview-questions-css/\r\n* http://davidshariff.com/quiz/\r\n* http://blog.sourcing.io/interview-questions\r\n* http://www.toptal.com/javascript/interview-questions\r\n\r\n#### 协议 :\r\n\r\nCopyright 2012 by Darcy Clarke, 基于[MIT License](http://opensource.org/licenses/MIT) 协议。点击协议文件查看详细。\r\n','<h3>前端工作面试问题</h3>\n<p><strong>备注:</strong> 这篇文章是从<a href=\"https://github.com\">Github</a>上转载的, 原文请参考 <a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions/blob/master/Translations/Chinese/README.md\">这里</a>.</p>\n<p><a href=\"http://rmurphey.com/\">Rebecca Murphey</a> 的 <a href=\"http://rmurphey.com/blog/2012/04/12/a-baseline-for-front-end-developers/\">Baseline For Front-End Developers</a> 是你在准备面试前应该阅读的绝佳资源。</p>\n<p><strong>记住：</strong> 很多问题都是开放的，可以引发有趣的讨论。这比直接的答案更能体现此人的能力。</p>\n<h4>目录</h4>\n<ol>\n<li><a href=\"#contributors\">最初的贡献者</a></li>\n<li><a href=\"#general\">常见问题</a></li>\n<li><a href=\"#html\">HTML 相关问题</a></li>\n<li><a href=\"#css\">CSS 相关问题</a></li>\n<li><a href=\"#js\">JS 相关问题</a></li>\n<li><a href=\"#jquery\">jQuery 相关问题</a></li>\n<li><a href=\"#jscode\">代码相关的问题</a></li>\n<li><a href=\"#fun\">有趣的问题</a></li>\n<li><a href=\"#references\">其他参考资料</a></li>\n<li><a href=\"#license\">协议</a></li>\n</ol>\n<h4>最初贡献者</h4>\n<p>这里大部分的面试题都摘抄自 <a href=\"http://paulirish.com\">Paul Irish</a> (<a href=\"http://twitter.com/paul_irish\">@paul_irish</a>) 在 <a href=\"http://oksoclap.com/\">oksoclap</a> 创建的帖子，这份原帖的贡献者还有：</p>\n<ul>\n<li><a href=\"http://twitter.com/bentruyman\">@bentruyman</a> - http://bentruyman.com</li>\n<li><a href=\"http://twitter.com/cowboy\">@cowboy</a> - http://benalman...</li></ul>',0,2,'2014-12-23 13:49:20.000000','2015-01-29 18:04:57.000000',1),(6,'个人简历','# 联系方式\r\n\r\n- 手机：18680679530\r\n- Email：amaozhao@gmail.com\r\n- QQ/微信号：81981250/amaozhao\r\n\r\n---\r\n\r\n# 个人信息\r\n\r\n - 赵少君/男/1984\r\n - 本科/西安邮电学院/信息与计算科学\r\n - 工作年限：6年\r\n - 微博：[@amaozhao](http://weibo.com/amaozhao) \r\n - 技术博客：http://amaozhao.sinaapp.com\r\n - Github: http://github.com/amaozhao\r\n\r\n - 期望职位：Python高级程序员\r\n - 期望薪资：税后月薪12k~15k(特别喜欢的公司可例外)\r\n - 期望城市：深圳\r\n\r\n---\r\n\r\n# 工作经历\r\n\r\n## 深圳百米生活网络有限公司 （ 2013年3月 ~ 至今 ）\r\n\r\n### 如影随行广告项目 \r\n如影随行广告顾名思义就是终端(包括手机和PC)在浏览网页时,会在网页固定位置显示特定广告.\r\n\r\n该项目为公司核心项目, 鄙人主要负责核心部分的功能开发, 具体包括: 广告管理, 用户管理, 和路由器交互部分以及数据分析工作. (该项目每天的PV达到1Y-1.5Y)\r\n\r\n该项目使用tornado作为后端框架, 并使用异步调用. 在开发过程中逐渐熟悉了python中异步的调用和逻辑.\r\n\r\n\r\n### 路由器升级管理项目 \r\n该项目主要用于路由器固件, 脚本升级以及收集路由器密码, ssid 服务. 后端依旧采用tornado作为框架, 前端使用bootstrap及angular. (百米在全国铺设了8W+的路由器, 每台路由器1小时会有3个请求到该服务)\r\n\r\n开发该项目时, 主要学习了前端angular框架, 其中关于angular中文件上传部分不甚了解, 经过学习几个在Github上的文件上传指令终于熟悉了angular中的相关知识.\r\n \r\n## 中国电信山西分公司 (2010年11月 ~ 2012年12月)\r\n\r\n### 电信机房改造工程\r\n此项目中, 我主要负责机房安全监控, 施工沟通以及安全验收工作. 领导对施工过程中安全把控给予高度肯定.(有奖励)\r\n\r\n\r\n### 其他项目\r\n\r\n业余时间做些小企业网站, 例如: [超前集团官网](http://chaoqianpipes.com)等.\r\n\r\n---\r\n\r\n# 开源项目和作品\r\n\r\n## 开源项目\r\n\r\n - [Admin2](http://github.com/amaozhao/admin2) : django admin管理后台美化模板\r\n - [ lightforum ](https://github.com/amaozhao/lightforum) : 简单的开放式论坛, 采用django + DRF + backbonejs\r\n - [Markdown Editor ](https://github.com/amaozhao/simple-markdown-editor) : 简单的markdown editor\r\n## 技术文章\r\n（挑选你写作或翻译的技术文章，好的文章可以从侧面证实你的表达和沟通能力，也帮助招聘方更了解你）\r\n\r\n- [Django class-based view 基础 ](http://amaozhao.sinaapp.com/2014/12/21/django-class-based-view/)\r\n- [Django class-based view 深入 ](http://amaozhao.sinaapp.com/2014/12/21/django-class-based-view-II/)\r\n\r\n# 技能清单\r\n\r\n以下均为我熟练使用的技能\r\n\r\n- Web开发：python/Node\r\n- Web框架：Django/Tornado/Flask/\r\n- 前端框架：Bootstrap/AngularJS/backbone/HTML5/ionic/Uikit\r\n- 前端工具：Bower/Grunt\r\n- 数据库相关：MySQL/PgSQL/SQLite\r\n- 版本管理、文档和自动化部署工具：Svn/Git\r\n- 单元测试：PHPUnit/SimpleTest/Qunit\r\n- 云和开放平台：SAE/BAE/AWS/微博开放平台/微信应用开发\r\n\r\n---\r\n\r\n# 致谢\r\n感谢您花时间阅读我的简历，期待能有机会和您共事。','<h1>联系方式</h1>\n<ul>\n<li>手机：18680679530</li>\n<li>Email：amaozhao@gmail.com</li>\n<li>QQ/微信号：81981250/amaozhao</li>\n</ul>\n<hr />\n<h1>个人信息</h1>\n<ul>\n<li>赵少君/男/1984</li>\n<li>本科/西安邮电学院/信息与计算科学</li>\n<li>工作年限：6年</li>\n<li>微博：<a href=\"http://weibo.com/amaozhao\">@amaozhao</a> </li>\n<li>技术博客：http://amaozhao.sinaapp.com</li>\n<li>\n<p>Github: http://github.com/amaozhao</p>\n</li>\n<li>\n<p>期望职位：Python高级程序员</p>\n</li>\n<li>期望薪资：税后月薪12k~15k(特别喜欢的公司可例外)</li>\n<li>期望城市：深圳</li>\n</ul>\n<hr />\n<h1>工作经历</h1>\n<h2>深圳百米生活网络有限公司 （ 2013年3月 ~ 至今 ）</h2>\n<h3>如影随行广告项目</h3>\n<p>如影随行广告顾名思义就是终端(包括手机和PC)在浏览网页时,会在网页固定位置显示特定广告.</p>\n<p>该项目为公司核心项目...</p>',0,0,'2014-12-23 15:46:28.000000','2015-03-11 16:41:52.000000',1),(7,'Awesome Django App','# Awesome Django\r\n这篇文章收集的关于django app大多是很有参考意义的, 所以在此备份下, 以供以后参考.(原文在[Github](https://github.com/rosarior/awesome-django/blob/master/README.md))\r\n\r\n- [Awesome Django](#awesome-django)\r\n    - [Admin Interface](#admin-interface)\r\n    - [Asset Management](#asset-management)\r\n    - [Authentication](#authentication)\r\n    - [Authorization](#authorization)\r\n    - [Caching](#caching)\r\n    - [Compatibility](#compatibility)\r\n    - [Debugging](#debugging)\r\n    - [Email](#email)\r\n    - [Fields](#fields)\r\n    - [File Transfers](#file-transfers)\r\n    - [Forms](#forms)\r\n    - [Migrations](#migrations)\r\n    - [Mobile Support](#mobile-support)\r\n    - [Model Extensions](#model-extensions)\r\n    - [Project Management](#project-management)\r\n    - [RESTful API](#restful-api)\r\n    - [Search](#search)\r\n    - [Security](#security)\r\n    - [Settings](#settings)\r\n    - [Storage](#storage)\r\n    - [Tagging](#tagging)\r\n    - [Task Queue](#task-queue)\r\n    - [Testing](#testing)\r\n    - [Thumbnail](#thumbnail)\r\n    - [Cropping Images](#cropping-image)\r\n    - [Translations](#translations)\r\n    - [Web frontend integration](#web-frontend-integration)\r\n    - [Wiki apps](#wiki-apps)\r\n    - [Workflows](#workflows)\r\n    - [Other](#other)\r\n- [Projects](#projects)\r\n    - [CMS](#cms)\r\n    - [Document Management](#document-management)\r\n    - [e-Commerce](#e-commerce)\r\n    - [Project Management](#project-management)\r\n    - [Other](#other)\r\n- [Resources](#resources)\r\n    - [Books](#books)\r\n    - [Websites](#websites)\r\n    - [Conferences](#conferences)\r\n    - [Videos](#videos)\r\n- [Contributing](#contributing)\r\n\r\n\r\n\r\n\r\n## Admin interface\r\n\r\n*Packages that extend the Admin interface, adding or improving features.*\r\n\r\n* [djamin](https://github.com/hersonls/djamin/) - A new style for Django admin.\r\n* [django-admin-bootstrap](https://github.com/douglasmiranda/django-admin-bootstrap/) - Responsible Skin for Django Admin\r\n* [django-admin-bootstrapped](https://github.com/django-admin-bootstrapped/django-admin-bootstrapped/) - A Django admin theme using Twitter Bootstrap.\r\n* [django-admin-tools](https://bitbucket.org/izi/django-admin-tools/) - A collection of extensions/tools for the default django administration interface\r\n* [django-admin2](https://github.com/pydanny/django-admin2/) - Extendable, adaptable rewrite of django.contrib.admin\r\n* [django-grappelli](https://github.com/sehmaschine/django-grappelli/) - A jazzy skin for the Django Admin-Interface.\r\n* [django-fluent-dashboard](https://github.com/edoburu/django-fluent-dashboard/) - An improved django-admin-tools dashboard for Django projects\r\n* [django-hijack](https://github.com/arteria/django-hijack/) - Allows superusers to hijack (=login as) and work on behalf of another user.\r\n* [django-suit](https://github.com/darklow/django-suit/) - Modern theme for Django admin interface.\r\n* [django-xadmin](https://github.com/sshwsfc/django-xadmin/) - Drop-in replacement of Django admin comes with lots of goodies, fully extensible with plugin support, pretty UI based on Twitter Bootstrap\r\n* [yawd-admin](https://github.com/yawd/yawd-admin/) - An administration website for Django\r\n* [django-wpadmin](https://github.com/barszczmm/django-wpadmin/) - WordPress look and feel for Django administration panel.\r\n\r\n## Asset Management\r\n\r\n*Packages that help manage the static assets of a project.*\r\n\r\n* [django-compressor](https://github.com/django-compressor/django-compressor/) - Compresses linked and inline javascript or CSS into a single cached file.\r\n* [django-htmlmin](https://github.com/cobrateam/django-htmlmin/) - HTML minifier for Python with full support for HTML 5 and Django.\r\n* [django-gears](https://github.com/gears/django-gears/) - Compiles and concatenates JavaScript and CSS assets.\r\n* [django-pipeline](https://github.com/cyberdelia/django-pipeline/) - Asset packaging for Django.\r\n\r\n## Authentication\r\n\r\n*Packages that improve or extend the authentication methods of Django.*\r\n\r\n* [django-allauth](https://github.com/pennersr/django-allauth/) - Integrated set of Django applications addressing authentication, registration, account management as well as 3rd party (social) account authentication.\r\n* [django-organizations](https://github.com/bennylope/django-organizations) - Multi-user accounts for Django projects.\r\n* [django-two-factor-auth](https://github.com/Bouke/django-two-factor-auth/) - User-friendly Two-Factor authentication.\r\n* [django-userena](https://github.com/bread-and-pepper/django-userena/) - Accounts for Django made beautifully simple\r\n* [python-social-auth](https://github.com/omab/python-social-auth/) - Python Social Auth is an easy-to-setup social authentication/registration mechanism with support for several frameworks and auth providers.\r\n\r\n## Authorization\r\n\r\n*Packages related to authorization infrastructure and permissions.*\r\n\r\n* [django-oauth-toolkit](https://github.com/evonove/django-oauth-toolkit) - OAuth2 goodies for the Djangonauts!\r\n* [django-oauth2-provider](https://github.com/caffeinehit/django-oauth2-provider) - Provide OAuth2 access to your app\r\n* [django-guardian](https://github.com/lukaszb/django-guardian/) - Implementation of per object permissions as authorization backend.\r\n* [django-oml](https://github.com/RouteAtlas/django-oml/) - Object Moderation Layer, mixin for models that allows you moderate several content types.\r\n* [django-permission](https://github.com/lambdalisue/django-permission/) An enhanced permission library which enables a *logic-based permission system* to handle complex permissions in Django\r\n\r\n## Caching\r\n\r\n*Packages that help with caching.*\r\n\r\n* [django-ormcache](https://github.com/educreations/django-ormcache/) - A cache manager mixin that provides some caching of objects for the ORM.\r\n* [johnny-cache](https://github.com/jmoiron/johnny-cache/) - Johnny Cache is a caching framework for django applications.\r\n* [django-cacheops](https://github.com/Suor/django-cacheops) - A slick ORM cache with automatic granular event-driven invalidation.\r\n\r\n\r\n## Compatibility\r\n\r\n*Packages that help to keep compatibility of reusable apps between different Django versions.*\r\n\r\n\r\n* [django-compat](https://github.com/arteria/django-compat) - For- and backwards compatibility layer for Django 1.4 to 1.7.x.\r\n* [django-compat-lint](https://github.com/ubernostrum/django-compat-lint) - Check Django compatibility of your code.\r\n\r\n\r\n## Debugging\r\n\r\n*Packages that help hunt down bugs.*\r\n\r\n* [django-debug-toolbar](https://github.com/django-debug-toolbar/django-debug-toolbar/) - A configurable set of panels that display various debug information about the current request/response.\r\n* [django-devserver](https://github.com/dcramer/django-devserver/) - A drop in replacement for Django\'s built-in runserver command.\r\n* [django-querycount](https://github.com/bradmontgomery/django-querycount/) - Middleware that Prints the number of DB queries to the runserver console.\r\n* [django-silk](https://github.com/mtford90/silk/) - Silky smooth profiling for Django\r\n\r\n## Email\r\n\r\n*Packages that help manage email sending.*\r\n\r\n* [django-drip](https://github.com/zapier/django-drip) - Django Admin based management for drip email campaigns\r\n* [django-post_office](https://github.com/ui/django-post_office/) - A simple app to send and manage your emails in Django, supports templates and can be easily integrated with task queues.\r\n* [django-ses](https://github.com/hmarr/django-ses/) - A Django email backend for Amazon\'s Simple Email Service.\r\n* [djrill](https://github.com/brack3t/Djrill/) - Email backend and new message class for Mandrill transactional email service from MailChimp.\r\n* [django-templated-email](https://github.com/BradWhittington/django-templated-email) - Django module to easily send templated emails using django templates, or using a transactional mail provider (mailchimp, silverpop, etc.)\r\n\r\n## Fields\r\n\r\n*Packages that extend the functionality of existing field type or add new field types.*\r\n\r\n* [django-bitfield](https://github.com/disqus/django-bitfield/) - A BitField extension for Django models.\r\n* [django-enumfield](https://github.com/5monkeys/django-enumfield/) - Custom Django field for using enumerations of named constants.\r\n* [django-image-tools](https://github.com/bonsaistudio/django-image-tools/) - A package to handle images in Django.\r\n* [django-imagekit](https://github.com/matthewwithanm/django-imagekit/) - Automated image processing for Django.\r\n* [django-jsonfield](https://pypi.python.org/pypi/django-jsonfield) - JSONField for Django models.\r\n* [django-location-field](https://github.com/caioariede/django-location-field/) - Location field and widget integrated with google maps.\r\n* [django-picklefield](https://github.com/gintas/django-picklefield/) - A pickled object field for Django\r\n* [django-uuidfield](https://github.com/dcramer/django-uuidfield/) - A UUIDField for Django.\r\n\r\n## File Transfers\r\n\r\n*Packages that help transfer files between projects and users*\r\n\r\n* [django-downloadview](https://github.com/benoitbryon/django-downloadview/) - Serve files with Django.\r\n* [django-sendfile](https://github.com/johnsensible/django-sendfile/) - This is a wrapper around web-server specific methods for sending files to web clients.\r\n\r\n## Forms\r\n\r\n*Packages that extend the functionality of forms or add new types of forms.*\r\n\r\n* [django-crispy-forms](https://github.com/maraujop/django-crispy-forms/) - The best way to have DRY Django forms. The app provides a tag and filter that lets you quickly render forms in a div format while providing an enormous amount of capability to configure and control the rendered HTML.\r\n* [django-floppyforms](https://github.com/gregmuellegger/django-floppyforms/) - django-floppyforms is an application that gives you full control of the output of forms rendering. The forms API and features are exactly the same as Django’s, the key difference is that fields and widgets are rendered in templates instead of using string interpolation, giving you full control of the output using Django templates.\r\n* [django-bootstrap-form](https://github.com/tzangms/django-bootstrap-form/) - Twitter Bootstrap for Django Form\r\n\r\n## RESTful API\r\n \r\n*Packages for developing RESTful APIs.*\r\n\r\n* [django-nap](http://github.com/funkybob/django-nap/) - A minimalist approach to object serialization, RESTful views, and RPC views.\r\n* [django-rest-framework](http://www.django-rest-framework.org/) - A powerful and flexible toolkit that makes it easy to build Web APIs.\r\n* [django-rest-swagger](https://github.com/marcgibbons/django-rest-swagger/) - Swagger Documentation Generator for Django REST Framework\r\n* [django-tastypie](http://tastypieapi.org/) - Creating delicious APIs for Django apps since 2010.\r\n* [restless](https://github.com/toastdriven/restless/) - A lightweight REST miniframework for Python\r\n\r\n## Migrations\r\n\r\n*Packages that help migrate the database when there are schema updates.*\r\n\r\n* [South](https://bitbucket.org/andrewgodwin/south/src/) - Django application to provide schema and data migrations. ([Integrated into Django 1.7 and up](https://docs.djangoproject.com/en/dev/topics/migrations/))\r\n\r\n## Mobile Support\r\n\r\n*Packages that help you support for mobile iOS, Android and Others*\r\n\r\n* [django-push-notifications](https://github.com/jleclanche/django-push-notifications) - A minimal Django app that implements Device models that can send messages through APNS and GCM.\r\n\r\n## Model Extensions\r\n\r\n*Packages that extend the functionality of models or add new classes of models.*\r\n\r\n* [django-aggregate-if](https://github.com/henriquebastos/django-aggregate-if/) - Conditional aggregates for Django queries, just like the famous SumIf and CountIf in Excel.\r\n* [django-localflavor](https://github.com/django/django-localflavor/) - Country-specific Django helpers, formerly of contrib fame.\r\n* [django-model-utils](https://github.com/carljm/django-model-utils/) - Django model mixins and utilities.\r\n* [django-mptt](https://github.com/django-mptt/django-mptt/) - Utilities for implementing a modified pre-order traversal tree in django.\r\n\r\n## Project Management\r\n\r\n* [django-timepiece](https://github.com/caktus/django-timepiece/) - A multi-user Django application for tracking people\'s time on projects.\r\n\r\n## Search\r\n\r\n*Packages that provide search capabilities to projects.*\r\n\r\n* [django-haystack](https://github.com/toastdriven/django-haystack/) - Modular search for Django.\r\n* [django-watson](https://github.com/etianen/django-watson/) - Fast multi-model full-text search plugin.\r\n\r\n## Security\r\n\r\n*Packages that improve the security of a project.*\r\n\r\n* [django-admin-honeypot](https://github.com/dmpayton/django-admin-honeypot/) - A fake Django admin login screen to notify admins of attempted unauthorized access.\r\n* [django-debreach](https://github.com/lpomfrey/django-debreach/) - BREACH mitigation for Django apps.\r\n* [django-password-session](https://github.com/atugushev/django-password-session/) - Invalidate all active sessions after change password ([not needed for Django 1.7+](https://docs.djangoproject.com/en/dev/topics/auth/default/#session-invalidation-on-password-change)).\r\n* [django-secure](https://github.com/carljm/django-secure/) - Helping you remember to do the stupid little things to improve your Django site\'s security.\r\n* [django-stronghold](https://github.com/mgrouchy/django-stronghold/) - Stronghold is middleware to default all your views to login required.\r\n* [django-sslify](https://github.com/rdegges/django-sslify/) - Force SSL on your Django site.\r\n\r\n## Settings\r\n\r\n*Packages that help manage the configurability of projects.*\r\n\r\n* [django-configurations](https://github.com/jezdez/django-configurations/) - A helper for organizing Django project settings by relying on well established programming patterns.\r\n* [python-decouple](https://github.com/henriquebastos/python-decouple/) - Strict separation of config from code.\r\n\r\n## Storage\r\n\r\n*Packages that extend the functionality of the existing storage backend or provide new storage backends.*\r\n\r\n* [django-storages](https://bitbucket.org/david/django-storages/src/) - django-storages is a collection of custom storage backends for Django.\r\n* [django-queued-storage](https://github.com/jezdez/django-queued-storage/) - Provides a proxy for Django storage backends that allows you to upload files locally and eventually serve them remotely.\r\n\r\n## Tagging\r\n\r\n* [django-taggit](https://github.com/alex/django-taggit/) - Simple tagging for Django.\r\n\r\n## Task Queue\r\n\r\n*Packages that make working with task/background queues easier.*\r\n\r\n* [django-celery](http://celery.github.io/django-celery/) - Celery Integration for Django. (no longer required for Celery 3.1 and up)\r\n* [django-rq](https://github.com/ui/django-rq) - The easiest way to monitor and use [RQ](http://python-rq.org) in your Django projects.\r\n* [huey](https://github.com/coleifer/huey/) - A little multi-threaded task queue for python.\r\n\r\n## Testing\r\n\r\n*Packages that help test code or generate test data.*\r\n\r\n* [django-behave](https://github.com/django-behave/django-behave/) - TestRunner for the Behave BDD module.\r\n* [django-faker](https://github.com/joke2k/django-faker/) - Fake-factory to generate test data.\r\n* [django-dynamic-fixture](https://github.com/paulocheque/django-dynamic-fixture) - A complete library to create dynamic model instances for testing purposes.\r\n* [django-jenkins](https://github.com/kmmbvnr/django-jenkins) - Plug and play continuous integration with django and jenkins.\r\n* [django-nose](https://github.com/django-nose/django-nose/) - Test runner using nose.\r\n* [django-selenium](https://github.com/dragoon/django-selenium/) - Selenium testing support.\r\n* [django-slowtests](https://github.com/realpython/django-discover-slowest-tests-runner/) - Locate your slowest tests.\r\n* [factory_boy](https://github.com/rbarrois/factory_boy/) - A test fixtures replacement for Python\r\n* [lettuce-django-terrain](https://github.com/stringfellow/lettuce-django-terrain/) - Terrain file for lettuce in django projects\r\n* [model-mommy](https://github.com/vandersonmota/model_mommy/) - Smart fixtures for better tests.\r\n* [pytest-django](https://pypi.python.org/pypi/pytest-django/) - Test runner using py.test\r\n* [splinter](https://github.com/cobrateam/splinter/) - Test framework for web applications.\r\n\r\n## Thumbnail\r\n\r\n*Packages that help generate thumbnails.*\r\n\r\n* [sorl-thumbnail](https://github.com/mariocesar/sorl-thumbnail/) - Thumbnails for Django.\r\n* [easy-thumbnails](https://github.com/SmileyChris/easy-thumbnails) - Easy thumbnails for Django.\r\n\r\n## Cropping Image\r\n\r\n*Packages that help to crop Images.*\r\n\r\n* [django-image-cropping](https://github.com/jonasundderwolf/django-image-cropping) - Cropping Image for Django.\r\n\r\n## Translations\r\n\r\n*Packages help with the task of translating projects.*\r\n\r\n* [django-klingon](https://github.com/RouteAtlas/django-klingon/) - An attempt to make django model translations suckless and with no integrations pain in your app.\r\n* [django-modeltranslation](https://github.com/deschler/django-modeltranslation/) - Translate dynamic content of existing Django models to an arbitrary number of languages without having to change the original model classes.\r\n* [django-rosetta](https://github.com/mbi/django-rosetta/) - Rosetta is a Django application that eases the translation process of your Django projects.\r\n\r\n## Web frontend integration\r\n\r\n* [django-angular](https://github.com/jrief/django-angular/) - Let AngularJS play well with Django.\r\n* [djangular](https://github.com/appliedsec/djangular/) - A reusable Django app that provides better integration and tools for Angular.js.\r\n* [django-js-reverse](https://github.com/ierror/django-js-reverse) - Javascript url handling for Django that doesn\'t hurt.\r\n\r\n## Wiki apps\r\n\r\n* [django-wiki](https://github.com/django-wiki/django-wiki) A wiki system with complex functionality for simple integration and a superb interface. Store your knowledge with style: Use django models.\r\n* [waliki](https://github.com/mgaitan/waliki) An extensible wiki app for Django with a Git backend.\r\n\r\n## Workflows\r\n\r\n*Packages that do process, procedure and/or business tasks management.*\r\n\r\n* [django-flows](https://github.com/carlio/django-flows/) - django-flows keeps state and position in complicated flows of logic, allowing optional branches and complicated paths through a series of individual user actions.\r\n* [django-fsm](https://github.com/kmmbvnr/django-fsm/) - Django friendly finite state machine support.\r\n* [django-states](https://github.com/vikingco/django-states2/) - State machine for django models.\r\n* [django-viewflow](https://github.com/kmmbvnr/django-viewflow/) - Reusable workflow library for Django.\r\n* [django-xworkflows](https://github.com/rbarrois/django_xworkflows/) - Library to plug xworkflows into django models.\r\n\r\n## Other\r\n\r\n* [cookiecutter](https://github.com/audreyr/cookiecutter/) - A command-line utility that creates projects from cookiecutters (project templates).\r\n* [dj-database-url](https://github.com/kennethreitz/dj-database-url/) - Utilize the 12factor inspired DATABASE_URL environment variable to configure your Django application.\r\n* [django-activity-stream](https://github.com/justquick/django-activity-stream/) - Generate generic activity streams from the actions on your site. Users can follow any actors\' activities for personalized streams.\r\n* [django-braces](https://github.com/brack3t/django-braces/) - Reusable, generic mixins for Django.\r\n* [django-changuito](https://github.com/angvp/django-changuito/) - A cart app for your django site, an updated fork of django-cart\r\n* [django-extensions](https://github.com/django-extensions/django-extensions/) - This is a repository for collecting global custom management extensions for the Django Framework.\r\n* [django-filter](https://github.com/alex/django-filter/) - A generic system for filtering Django QuerySets based on user selections.\r\n* [django-friendship](https://github.com/revsys/django-friendship/) - Django app to manage following and bi-directional friendships.\r\n* [django-gravatar2](https://github.com/twaddington/django-gravatar/) - Essential Gravatar support for Django. Features helper methods, templatetags and a full test suite!\r\n* [django-markitup](https://bitbucket.org/carljm/django-markitup/src/) - A Django reusable application for end-to-end markup handling.\r\n* [django-pagination](https://github.com/ericflo/django-pagination) - https://github.com/ericflo/django-pagination.\r\n* [django-quiz-app](https://github.com/tomwalker/django_quiz/) - This is a configurable quiz app for Django.\r\n* [django-recaptcha](https://github.com/praekelt/django-recaptcha/) - Django reCAPTCHA form field/widget integration app.\r\n* [django-smuggler](https://github.com/semente/django-smuggler/) - Django Smuggler is a pluggable application for Django Web Framework that helps you to import/export fixtures via the automatically-generated administration interface.\r\n* [django-solo](https://github.com/lazybird/django-solo/) - Helps working with singletons - things like global settings that you want to edit from the admin site.\r\n* [micawber](https://github.com/coleifer/micawber/) - A small library for extracting rich content from urls.\r\n* [django-magic-embed](https://github.com/fitoria/django-magicembed/tree/master/magicembed) - an easy and simple Django template tag and tool to embed video and get thumbnails from video providers.\r\n* [django-activeurl](https://github.com/hellysmile/django-activeurl) - Easy to use active URL highlighting for django\r\n\r\n# Projects\r\n\r\n*Outstanding Django projects.*\r\n\r\n## CMS\r\n\r\n* [Opps](http://oppsproject.org/) - A content management platform built for large portals.\r\n* [django-cms](https://github.com/divio/django-cms/) - The easy-to-use and developer-friendly CMS.\r\n* [mezzanine](https://github.com/stephenmcd/mezzanine/) - A content management platform built using the Django framework.\r\n* [wagtail](https://github.com/torchbox/wagtail/) - A new Django content management system.\r\n* [django-fiber](https://github.com/ridethepony/django-fiber) - Django Fiber, a simple, user-friendly CMS for all your Django projects\r\n\r\n## Document Management\r\n\r\n* [mayan-edms](https://github.com/mayan-edms/mayan-edms/) - Open source, Django based DMS (document management system) with custom metadata indexing, file serving integration, OCR capabilities, document versioning and electronic signature verification.\r\n\r\n## e-Commerce\r\n\r\n* [Satchmo](https://bitbucket.org/chris1610/satchmo/src/) - Satchmo is an eCommerce framework created in Django which allows you to develop unique and robust online stores.\r\n* [django-oscar](https://github.com/tangentlabs/django-oscar/) - Domain-driven e-commerce for Django.\r\n\r\n## Other\r\n\r\n* [Django packages](https://github.com/pydanny/djangopackages/) - Django Packages is a directory of reusable apps, sites, tools, and more for your Django projects.\r\n\r\n## Project Management\r\n\r\n* [ITSY](https://github.com/orges/itsy/) - Issue Tracking System\r\n\r\n# Resources\r\n\r\nWhere to discover new Django apps and projects.\r\n\r\n## Books\r\n\r\n* [Django by Example](http://www.lightbird.net/dbe/) (1.2)\r\n* [Django by Example for Django 1.5](http://lightbird.net/dbe2/) (1.5)\r\n* [Djen of Django](http://agiliq.com/books/djenofdjango/)\r\n* [Effective Django](http://effectivedjango.com/) (1.5)\r\n* [Getting started with Django](http://gettingstartedwithdjango.com/) (video)\r\n* [Tango With Django](http://www.tangowithdjango.com/) (1.5)\r\n* [Test-Driven Web Development with Python](http://chimera.labs.oreilly.com/books/1234000000754/index.html) (1.7)\r\n* [The Django book](http://www.djangobook.com/en/2.0/)\r\n* [Two Scoops of Django: Best Practices for Django 1.6](http://twoscoopspress.org/products/two-scoops-of-django-1-6/) - Making Python and Django as fun as ice cream.\r\n\r\n## Websites\r\n\r\n* [Django Packages](https://www.djangopackages.com/) - Django Packages is a directory of reusable apps, sites, tools, and more for your Django projects.\r\n* [Django Sites](https://www.djangosites.org) - Django Sites is a showcase of websites powered by Django.\r\n* [Full Stack Python\'s Django page](http://www.fullstackpython.com/django.html) contains explanations for Django\'s philosophy and its components along with links to other resources and tutorials.\r\n\r\n## Conferences\r\n\r\n* [DjangoCon Europe](http://2014.djangocon.eu/) is the annual largest European-based Django conference that is usually held in late spring.\r\n* [DjangoCon US](http://www.djangocon.us/) is the largest North American Django conference generally held the first week in September each year.\r\n\r\n## Videos\r\n\r\n* [Must Watch Django Videos](https://github.com/rosarior/django-must-watch/) - Must-watch videos about Django (or about Python as applied to Django)','<h1>Awesome Django</h1>\n<p>这篇文章收集的关于django app大多是很有参考意义的, 所以在此备份下, 以供以后参考.(原文在<a href=\"https://github.com/rosarior/awesome-django/blob/master/README.md\">Github</a>)</p>\n<ul>\n<li><a href=\"#awesome-django\">Awesome Django</a><ul>\n<li><a href=\"#admin-interface\">Admin Interface</a></li>\n<li><a href=\"#asset-management\">Asset Management</a></li>\n<li><a href=\"#authentication\">Authentication</a></li>\n<li><a href=\"#authorization\">Authorization</a></li>\n<li><a href=\"#caching\">Caching</a></li>\n<li><a href=\"#compatibility\">Compatibility</a></li>\n<li><a href=\"#debugging\">Debugging</a></li>\n<li><a href=\"#email\">Email</a></li>\n<li><a href=\"#fields\">Fields</a></li>\n<li><a href=\"#file-transfers\">File Transfers</a></li>\n<li><a href=\"#forms\">Forms</a></li>\n<li><a href=\"#migrations\">Migrations</a></li>\n<li><a href=\"#mobile-support\">Mobile Support</a></li>\n<li><a href=\"#model-extensions\">Model Extensions</a></li>\n<li><a href=\"#project-management\">Project Management</a></li>\n<li><a href=\"#restful-api\">RESTful API</a></li>\n<li><a href=\"#search\">Search</a></li>\n<li><a href=\"#security\">Security</a></li>\n<li><a href=\"#settings\">Settings</a></li>\n<li><a href=\"#storage\">Storage</a></li>\n<li><a href=\"#tagging\">Tagging</a></li>\n<li><a href=\"#task-queue\">Task Queue</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#thumbnail\">Thumbnail</a></li>\n<li><a href=\"#cropping-image\">Cropping Images</a></li>\n<li><a href=\"#translations\">Translations</a></li>\n<li><a href=\"#web-frontend-integration\">Web frontend integration</a></li>\n<li><a href=\"#wiki-apps\">Wiki apps...</a></li></ul></li></ul>',0,2,'2014-12-24 10:50:01.000000','2015-01-29 18:04:07.000000',1),(8,'Python 中的进程、线程、协程、同步、异步和回调','进程和线程究竟是什么东西？传统网络服务模型是如何工作的？协程和线程的关系和区别有哪些？IO过程在什么时间发生？\r\n\r\n在刚刚结束的 PyCon2014 上海站，来自七牛云存储的 Python 高级工程师许智翔带来了关于 Python 的分享《Python中的进程、线程、协程、同步、异步、回调》。\r\n###一、上下文切换技术\r\n**简述**\r\n\r\n在进一步之前，让我们先回顾一下各种上下文切换技术。\r\n\r\n不过首先说明一点术语。当我们说“上下文”的时候，指的是程序在执行中的一个状态。通常我们会用调用栈来表示这个状态——栈记载了每个调用层级执行到哪里，还有执行时的环境情况等所有有关的信息。\r\n\r\n当我们说“上下文切换”的时候，表达的是一种从一个上下文切换到另一个上下文执行的技术。而“调度”指的是决定哪个上下文可以获得接下去的CPU时间的方法。\r\n\r\n**进程**\r\n\r\n进程是一种古老而典型的上下文系统，每个进程有独立的地址空间，资源句柄，他们互相之间不发生干扰。\r\n\r\n每个进程在内核中会有一个数据结构进行描述，我们称其为进程描述符。这些描述符包含了系统管理进程所需的信息，并且放在一个叫做任务队列的队列里面。\r\n\r\n很显然，当新建进程时，我们需要分配新的进程描述符，并且分配新的地址空间(和父地址空间的映射保持一致，但是两者同时进入COW状态)。这些过程需要一定的开销。\r\n\r\n**进程状态**\r\n\r\n忽略去linux内核复杂的状态转移表，我们实际上可以把进程状态归结为三个最主要的状态：就绪态，运行态，睡眠态。这就是任何一本系统书上都有的三态转换图。\r\n\r\n就绪和执行可以互相转换，基本这就是调度的过程。而当执行态程序需要等待某些条件(最典型就是IO)时，就会陷入睡眠态。而条件达成后，一般会自动进入就绪。\r\n\r\n**阻塞**\r\n\r\n当进程需要在某个文件句柄上做IO，这个fd又没有数据给他的时候，就会发生阻塞。具体来说，就是记录XX进程阻塞在了XX fd上，然后将进程标记为睡眠态，并调度出去。当fd上有数据时(例如对端发送的数据到达)，就会唤醒阻塞在fd上的进程。进程会随后进入就绪队列，等待合适的时间被调度。\r\n\r\n阻塞后的唤醒也是一个很有意思的话题。当多个上下文阻塞在一个fd上(虽然不多见，但是后面可以看到一个例子)，而且fd就绪时，应该唤醒多少个上下文呢？传统上应当唤醒所有上下文，因为如果仅唤醒一个，而这个上下文又不能消费所有数据时，就会使得其他上下文处于无谓的死锁中。\r\n\r\n但是有个著名的例子——accept，也是使用读就绪来表示收到的。如果试图用多个线程来accept会发生什么？当有新连接时，所有上下文都会就绪，但是只有第一个可以实际获得fd，其他的被调度后又立刻阻塞。这就是惊群问题thundering herd problem。\r\n\r\n现代linux内核已经解决了这个问题，方法惊人的简单——accept方法加锁。\r\n\r\n(inet_connection_sock.c:inet_csk_wait_for_connect)\r\n\r\n**线程**\r\n\r\n线程是一种轻量进程，实际上在linux内核中，两者几乎没有差别，除了一点——线程并不产生新的地址空间和资源描述符表，而是复用父进程的。\r\n但是无论如何，线程的调度和进程一样，必须陷入内核态。\r\n###二、传统网络服务模型\r\n**进程模型**\r\n\r\n为每个客户分配一个进程。优点是业务隔离，在一个进程中出现的错误不至于影响整个系统，甚至其他进程。Oracle传统上就是进程模型。缺点是进程的分配和释放有非常高的成本。因此Oracle需要连接池来保持连接减少新建和释放，同时尽量复用连接而不是随意的新建连接。\r\n线程模型\r\n\r\n为每客户分配一个线程。优点是更轻量，建立和释放速度更快，而且多个上下文间的通讯速度非常快。缺点是一个线程出现问题容易将整个系统搞崩溃。\r\n一个例子\r\n\r\npy_http_fork_thread.py\r\n\r\n在这个例子中，线程模式和进程模式可以轻易的互换。\r\n\r\n如何工作的：\r\n\r\n1.      父进程监听服务端口\r\n2.     在有新连接建立的时候，父进程执行fork，产生一个子进程副本\r\n3.     如果子进程需要的话，可以exec(例如CGI)\r\n4.     父进程执行(理论上应当先执行子进程，因为exec执行的快可以避免COW)到accept后，发生阻塞\r\n5.     上下文调度，内核调度器选择下一个上下文，如无意外，应当就是刚刚派生的子进程\r\n6.     子进程进程进入读取处理状态，阻塞在read调用上，所有上下文均进入睡眠态\r\n7.     随着SYN或者数据报文到来，CPU会唤醒对应fd上阻塞的上下文(wait_queue)，切换到就绪态，并加入调度队列\r\n8.     上下文继续执行到下一个阻塞调用，或者因为时间片耗尽被挂起\r\n\r\n**评价**\r\n\r\n*      同步模型，编写自然，每个上下文可以当作其他上下文不存在一样的操作，每次读取数据可以当作必然能读取到。\r\n*      进程模型自然的隔离了连接。即使程序复杂且易崩溃，也只影响一个连接而不是在整个系统。\r\n*      生成和释放开销很大(效率测试的进程fork和线程模式开销测试)，需要考虑复用。\r\n*      进程模式的多客户通讯比较麻烦，尤其在共享大量数据的时候。\r\n\r\n**性能**\r\n\r\nthread模式，虚拟机：\r\n\r\n1: 909.27 2: 3778.38 3: 4815.37 4: 5000.04 10: 4998.16 50: 4881.93 100: 4603.24 200: 3445.12 500: 1778.26 (出现错误)\r\n\r\nfork模式，虚拟机：\r\n\r\n1: 384.14 2: 435.67 3: 435.17 4: 437.54 10: 383.11 50: 364.03 100: 320.51 (出现错误)\r\n\r\nthread模式，物理机：\r\n\r\n1: 6942.78 2: 6891.23 3: 6584.38 4: 6517.23 10: 6178.50 50: 4926.91 100: 2377.77\r\n\r\n注意在python中，虽然有GIL，但是一个线程陷入到网络IO的时候，GIL是解锁的。因此从调用开始到调用结束，减去CPU切换到其他上下文的时间，是可以多线程的。现象是，在此种状况下可以观测到短暂的python CPU用量超过100%。\r\n\r\n如果执行多个上下文，可以充分利用这段时间。所观测到的结果就是，只能单核的python，在小范围内，其随着并发数上升，性能居然会跟着上升。如果将这个过程转移到一台物理机上执行，那么基本不能得出这样的结论。这主要是因为虚拟机上内核陷入的开销更高。\r\n###三、C10K 问题\r\n**描述**\r\n\r\n当同时连接数在10K左右时，传统模型就不再适用。实际上在效率测试报告的线程切换开销一节可以看到，超过1K后性能就差的一塌糊涂了。\r\n\r\n**进程模型的问题：**\r\n\r\n在C10K的时候，启动和关闭这么多进程是不可接受的开销。事实上单纯的进程fork模型在C1K时就应当抛弃了。\r\n\r\nApache的prefork模型，是使用预先分配(pre)的进程池。这些进程是被复用的。但即便是复用，本文所描述的很多问题仍不可避免。\r\n线程模式的问题\r\n\r\n从任何测试都可以表明，线程模式比进程模式更耐久一些，性能更好。但是在面对C10K还是力不从心的。问题是，线程模式的问题出在哪里呢？\r\n\r\n**内存？**\r\n\r\n有些人可能认为线程模型的失败首先在于内存。如果你这么认为，一定是因为你查阅了非常老的资料，并且没仔细思考过。\r\n\r\n你可能看到资料说，一个线程栈会消耗8M内存(linux默认值，ulimit可以看到)，512个线程栈就会消耗4G内存，而10K个线程就是80G。所以首先要考虑调整栈深度，并考虑爆栈问题。\r\n\r\n听起来很有道理，问题是——linux的栈是通过缺页来分配内存的(How does stack allocation work in Linux?)，不是所有栈地址空间都分配了内存。因此，8M是最大消耗，实际的内存消耗只会略大于实际需要的内存(内部损耗，每个在4k以内)。但是内存一旦被分配，就很难回收(除非线程结束)，这是线程模式的缺陷。\r\n\r\n这个问题提出的前提是，32位下地址空间有限。虽然10K个线程不一定会耗尽内存，但是512个线程一定会耗尽地址空间。然而这个问题对于目前已经成为主流的64位系统来说根本不存在。\r\n\r\n**内核陷入开销？**\r\n\r\n所谓内核陷入开销，就是指CPU从非特权转向特权，并且做输入检查的一些开销。这些开销在不同的系统上差异很大。\r\n\r\n线程模型主要通过陷入切换上下文，因此陷入开销大听起来有点道理。实际上，这也是不成立的。线程在什么时候发生陷入切换？正常情况下，应当是IO阻塞的时候。同样的IO量，难道其他模型就不需要陷入了么？只是非阻塞模型有很大可能直接返回，并不发生上下文切换而已。\r\n\r\n效率测试报告的基础调用开销一节，证实了当代操作系统上内核陷入开销是非常惊人的小的(10个时钟周期这个量级)。\r\n\r\n**线程模型的问题在于切换成本高**\r\n\r\n熟悉linux内核的应该知道，近代linux调度器经过几个阶段的发展。\r\n\r\n1.     linux2.4的调度器\r\n2.     O(1)调度器\r\n3.     CFS\r\n\r\n实际上直到O(1)，调度器的调度复杂度才和队列长度无关。在此之前，过多的线程会使得开销随着线程数增长(不保证线性)。\r\n\r\nO(1)调度器看起来似乎是完全不随着线程的影响。但是这个调度器有显著的缺点——难于理解和维护，并且在一些情况下会导致交互式程序响应缓慢。\r\nCFS使用红黑树管理就绪队列。每次调度，上下文状态转换，都会查询或者变更红黑树。红黑树的开销大约是O(logm)，其中m大约为活跃上下文数(准确的说是同优先级上下文数)，大约和活跃的客户数相当。\r\n\r\n因此，每当线程试图读写网络，并遇到阻塞时，都会发生O(logm)级别的开销。而且每次收到报文，唤醒阻塞在fd上的上下文时，同样要付出O(logm)级别的开销。\r\n\r\n**分析**\r\n\r\nO(logm)的开销看似并不大，但是却是一个无法接受的开销。因为IO阻塞是一个经常发生的事情。每次IO阻塞，都会发生开销。而且决定活跃线程数的是用户，这不是我们可控制的。更糟糕的是，当性能下降，响应速度下降时。同样的用户数下，活跃上下文会上升(因为响应变慢了)。这会进一步拉低性能。\r\n\r\n问题的关键在于，http服务并不需要对每个用户完全公平，偶尔某个用户的响应时间大大的延长了是可以接受的。在这种情况下，使用红黑树去组织待处理fd列表（其实是上下文列表），并且反复计算和调度，是无谓的开销。\r\n###四、多路复用\r\n**简述**\r\n\r\n要突破C10K问题，必须减少系统内活跃上下文数(其实未必，例如换一个调度器，例如使用RT的SCHED_RR)，因此就要求一个上下文同时处理多个链接。而要做到这点，就必须在每次系统调用读取或写入数据时立刻返回。否则上下文持续阻塞在调用上，如何能够复用？这要求fd处于非阻塞状态，或者数据就绪。\r\n\r\n上文所说的所有IO操作，其实都特指了他的阻塞版本。所谓阻塞，就是上下文在IO调用上等待直到有合适的数据为止。这种模式给人一种“只要读取数据就必定能读到”的感觉。而非阻塞调用，就是上下文立刻返回。如果有数据，带回数据。如果没有数据，带回错误(EAGAIN)。因此，“虽然发生错误，但是不代表出错”。\r\n\r\n但是即使有了非阻塞模式，依然绕不过就绪通知问题。如果没有合适的就绪通知技术，我们只能在多个fd中盲目的重试，直到碰巧读到一个就绪的fd为止。这个效率之差可想而知。\r\n\r\n在就绪通知技术上，有两种大的模式——就绪事件通知和异步IO。其差别简要来说有两点。就绪通知维护一个状态，由用户读取。而异步IO由系统调用用户的回调函数。就绪通知在数据就绪时就生效，而异步IO直到数据IO完成才发生回调。\r\n\r\nlinux下的主流方案一直是就绪通知，其内核态异步IO方案甚至没有被封装到glibc里去。围绕就绪通知，linux总共提出过三种解决方案。我们绕过select和poll方案，看看epoll方案的特性。\r\n\r\n另外提一点。有趣的是，当使用了epoll后(更准确说只有在LT模式下)，fd是否为非阻塞其实已经不重要了。因为epoll保证每次去读取的时候都能读到数据，因此不会阻塞在调用上。\r\n\r\n**epoll**\r\n\r\n用户可以新建一个epoll文件句柄，并且将其他fd和这个\"epoll fd\"关联。此后可以通过epoll fd读取到所有就绪的文件句柄。\r\n\r\nepoll有两大模式，ET和LT。LT模式下，每次读取就绪句柄都会读取出完整的就绪句柄。而ET模式下，只给出上次到这次调用间新就绪的句柄。换个说法，如果ET模式下某次读取出了一个句柄，这个句柄从未被读取完过——也就是从没有从就绪变为未就绪。那么这个句柄就永远不会被新的调用返回，哪怕上面其实充满了数据——因为句柄无法经历从非就绪变为就绪的过程。\r\n\r\n类似CFS，epoll也使用了红黑树——不过是用于组织加入epoll的所有fd。epoll的就绪列表使用的是双向队列。这方便系统将某个fd加入队列中，或者从队列中解除。\r\n\r\n要进一步了解epoll的具体实现，可以参考这篇linux下poll和epoll内核源码剖析。\r\n\r\n**性能**\r\n\r\n如果使用非阻塞函数，就不存在阻塞IO导致上下文切换了，而是变为时间片耗尽被抢占（大部分情况下如此），因此读写的额外开销被消除。而epoll的常规操作，都是O(1)量级的。而epoll wait的复制动作，则和当前需要返回的fd数有关(在LT模式下几乎就等同于上面的m，而ET模式下则会大大减少)。\r\n\r\n但是epoll存在一点细节问题。epoll fd的管理使用红黑树，因此在加入和删除时需要O(logn)复杂度(n为总连接数)，而且关联操作还必须每个fd调用一次。因此在大连接量下频繁建立和关闭连接仍然有一定性能问题(超短连接)。不过关联操作调用毕竟比较少。如果确实是超短连接，tcp连接和释放开销就很难接受了，所以对总体性能影响不大。\r\n\r\n**固有缺陷**\r\n\r\n原理上说，epoll实现了一个wait_queue的回调函数，因此原理上可以监听任何能够激活wait_queue的对象。但是epoll的最大问题是无法用于普通文件，因为普通文件始终是就绪的——虽然在读取的时候不是这样。\r\n\r\n这导致基于epoll的各种方案，一旦读到普通文件上下文仍然会阻塞。golang为了解决这个问题，在每次调用syscall的时候，会独立的启动一个线程，在独立的线程中进行调用。因此golang在IO普通文件的时候网络不会阻塞。\r\n###五、事件通知机制下的几种程序设计模型\r\n**简述**\r\n\r\n使用通知机制的一大缺憾就是，用户进行IO操作后会陷入茫然——IO没有完成，所以当前上下文不能继续执行。但是由于复用线程的要求，当前线程还需要接着执行。所以，在如何进行异步编程上，又分化出数种方案。\r\n\r\n**用户态调度**\r\n\r\n首先需要知道的一点就是，异步编程大多数情况下都伴随着用户态调度问题——即使不使用上下文技术。\r\n\r\n因为系统不会自动根据fd的阻塞状况来唤醒合适的上下文了，所以这个工作必须由其他人——一般就是某种框架——来完成。\r\n\r\n你可以想像一个fd映射到对象的大map表，当我们从epoll中得知某个fd就绪后，需要唤醒某种对象，让他处理fd对应的数据。\r\n\r\n当然，实际情况会更加复杂一些。原则上所有不占用CPU时间的等待都需要中断执行，陷入睡眠，并且交由某种机构管理，等待合适的机会被唤醒。例如sleep，或是文件IO，还有lock。更精确的说，所有在内核里面涉及到wait_queue的，在框架里面都需要做这种机制——也就是把内核的调度和等待搬到用户态来。\r\n\r\n当然，其实也有反过来的方案——就是把程序扔到内核里面去。其中最著名的实例大概是微软的http服务器了。\r\n\r\n这个所谓的“可唤醒可中断对象”，用的最多的就是协程。\r\n\r\n**协程**\r\n\r\n协程是一种编程组件，可以在不陷入内核的情况进行上下文切换。如此一来，我们就可以把协程上下文对象关联到fd，让fd就绪后协程恢复执行。\r\n当然，由于当前地址空间和资源描述符的切换无论如何需要内核完成，因此协程所能调度的，只有在同一进程中的不同上下文而已。\r\n\r\n**如何做到**\r\n\r\n这是如何做到的呢？\r\n\r\n我们在内核里实行上下文切换的时候，其实是将当前所有寄存器保存到内存中，然后从另一块内存中载入另一组已经被保存的寄存器。对于图灵机来说，当前状态寄存器意味着机器状态——也就是整个上下文。其余内容，包括栈上内存，堆上对象，都是直接或者间接的通过寄存器来访问的。\r\n\r\n但是请仔细想想，寄存器更换这种事情，似乎不需要进入内核态么。事实上我们在用户态切换的时候，就是用了类似方案。\r\n\r\nC coroutine的实现，基本大多是保存现场和恢复之类的过程。python则是保存当前thread的top frame(greenlet)。\r\n\r\n但是非常悲剧的，纯用户态方案(setjmp/longjmp)在多数系统上执行的效率很高，但是并不是为了协程而设计的。setjmp并没有拷贝整个栈(大多数的coroutine方案也不应该这么做)，而是只保存了寄存器状态。这导致新的寄存器状态和老寄存器状态共享了同一个栈，从而在执行时互相破坏。而完整的coroutine方案应当在特定时刻新建一个栈。\r\n\r\n而比较好的方案(makecontext/swapcontext)则需要进入内核(sigprocmask)，这导致整个调用的性能非常低。\r\n\r\n**协程与线程的关系**\r\n\r\n首先我们可以明确，协程不能调度其他进程中的上下文。而后，每个协程要获得CPU，都必须在线程中执行。因此，协程所能利用的CPU数量，和用于处理协程的线程数量直接相关。\r\n\r\n作为推论，在单个线程中执行的协程，可以视为单线程应用。这些协程，在未执行到特定位置(基本就是阻塞操作)前，是不会被抢占，也不会和其他CPU上的上下文发生同步问题的。因此，一段协程代码，中间没有可能导致阻塞的调用，执行在单个线程中。那么这段内容可以被视为同步的。\r\n\r\n我们经常可以看到某些协程应用，一启动就是数个进程。这并不是跨进程调度协程。一般来说，这是将一大群fd分给多个进程，每个进程自己再做fd-协程对应调度。\r\n\r\n基于就绪通知的协程框架\r\n\r\n1.      首先需要包装read/write，在发生read的时候检查返回。如果是EAGAIN，那么将当前协程标记为阻塞在对应fd上，然后执行调度函数。\r\n2.      调度函数需要执行epoll(或者从上次的返回结果缓存中取数据，减少内核陷入次数)，从中读取一个就绪的fd。如果没有，上下文应当被阻塞到至少有一个fd就绪。\r\n3.      查找这个fd对应的协程上下文对象，并调度过去。\r\n4.      当某个协程被调度到时，他多半应当在调度器返回的路上——也就是read/write读不到数据的时候。因此应当再重试读取，失败的话返回1。\r\n5.      如果读取到数据了，直接返回。\r\n\r\n这样，异步的数据读写动作，在我们的想像中就可以变为同步的。而我们知道同步模型会极大降低我们的编程负担。\r\n\r\n**CPS模型**\r\n\r\n其实这个模型有个更流行的名字——回调模型。之所以扯上CPS这么高大上的玩意，主要是里面涉及不少有趣的话题。\r\n\r\n首先是回调模型的大致过程。在IO调用的时候，同时传入一个函数，作为返回函数。当IO结束时，调用传入的函数来处理下面的流程。这个模型听起来挺简单的。\r\n\r\n然后是CPS。用一句话来描述这个模型——他把一切操作都当作了IO，无论干什么，结果要通过回调函数来返回。从这个角度来说，IO回调模型只能被视作CPS的一个特例。\r\n\r\n例如，我们需要计算1 + 2 * 3，在cps里面就需要这么写：\r\n```python\r\nmul(lambda x: add(pprint.pprint, x, 1), 2, 3)\r\n```\r\n其中mul和add在python里面如下定义：\r\n```python\r\nadd = lambda f, *nums: f(sum(nums))\r\nmul = lambda f, *nums: f(reduce(lambda x,y: x*y, nums))\r\n```\r\n而且由于python没有TCO，所以这样的写法会产生非常多的frame。\r\n\r\n但是要正确理解这个模型，你需要仔细思考一下以下几个问题：\r\n\r\n1.      函数的调用过程为什么必须是一个栈？\r\n2.      IO过程在什么时间发生？调用发生时，还是回调时？\r\n3.      回调函数从哪里调用？如果当时利用工具去看上下文的话，调用栈是什么样子的？\r\n\r\n**函数组件和返回值**\r\n\r\n不知道你是否思考过为什么函数调用层级(上下文栈)会被表述为一个栈——是否有什么必要性，必须将函数调用的过程定义为一个栈呢？\r\n\r\n原因就是返回值和同步顺序。对于大部分函数，我们需要得到函数计算的返回值。而要得到返回值，调用者就必须阻塞直到被调用者返回为止。因此调用者的执行状态就必须被保存，等到被调用者返回后继续——从这点来说，调用其实是最朴素的上下文切换手段。而对于少部分无需返回的函数，我们又往往需要他的顺序外部效应——例如干掉了某个进程，开了一个灯，或者仅仅是在环境变量里面添加了一项内容。而顺序外部效应同样需要等待被调用者返回以表明这个外部效应已经发生。\r\n\r\n那么，如果我们不需要返回值也不需要顺序的外部效应呢？例如启动一个背景程序将数据发送到对端，无需保证发送成功的情况下。或者是开始一个数据抓取行为，无需保证抓取的成功。\r\n\r\n通常这种需求我们就凑合着用一个同步调用混过去了——反正问题也不严重。但是对于阻塞相当严重的情况而言，很多人还是会考虑到将这个行为做成异步过程。目前最流行的异步调用分解工具就是mq——不仅异步，而且分布。当然，还有一个更简单的非分布方案——开一个coroutine。\r\n\r\n而CPS则是另一个方向——函数的返回值可以不返回调用者，而是返回给第三者。\r\n\r\n**IO 过程在什么时间发生**\r\n\r\n其实这个问题的核心在于——整个回调模型是基于多路复用的还是基于异步IO的？\r\n\r\n原则上两者都可以。你可以监听fd就绪，也可以监听IO完成。当然，即使监听IO完成，也不代表使用了内核态异步接口。很可能只是用epoll封装的而已。\r\n回调函数的上下文环境\r\n\r\n这个问题则需要和上面提到的“用户态调度框架”结合起来说。IO回调注册的实质是将回调函数绑定到某个fd上——就如同将coroutine绑定上去那样。只是coroutine允许你顺序的执行，而callback则会切碎函数。当然，大部分实现中，使用callback也有好处——coroutine的最小切换开销也在50ns，而call本身则只有2ns。\r\n\r\n**状态机模型**\r\n\r\n状态机模型是一个更难于理解和编程的模型，其本质是每次重入。\r\n\r\n想像你是一个周期失忆的病人(就像“一周的朋友”那样)。那么你如何才能完成一项需要跨越周期的工作呢？例如刺绣，种植作物，或者——交一个男朋友。\r\n\r\n当然，类比到失忆病人的例子上必须有一点限制。正常的生活技能，还有一些常识性的东西必须不能在周期失忆范围内。例如重新学习认字什么的可没人受的了。\r\n\r\n答案就是——做笔记。每次重复失忆后，你需要阅读自己的笔记，观察上次做到哪个步骤，下一个步骤是什么。这需要将一个工作分解为很多步骤，在每个步骤内“重入”直到步骤完成，转移到下一个状态。\r\n\r\n同理，在状态机模型解法里，每次执行都需要推演合适的状态，直到工作完成。这个模型已经很少用到了，因为相比回调函数来说，状态机模型更难理解和使用，性能差异也不大。\r\n\r\n最后顺带一提，交一个男友的方案和其他几个略有不同，主要靠颜好高冷反差萌，一般人就不要尝试挑战了。。。当然一般人也不会一周失忆一次，毕竟生活不是韩剧也不是日本动漫。。。\r\n\r\n**说实话,这篇文章看的云里雾里的,基本没看懂,但还是收下了!**\r\n\r\n原文链接:  http://segmentfault.com/blog/portal_qiniu_com/1190000001813992','<p>进程和线程究竟是什么东西？传统网络服务模型是如何工作的？协程和线程的关系和区别有哪些？IO过程在什么时间发生？</p>\n<p>在刚刚结束的 PyCon2014 上海站，来自七牛云存储的 Python 高级工程师许智翔带来了关于 Python 的分享《Python中的进程、线程、协程、同步、异步、回调》。</p>\n<h3>一、上下文切换技术</h3>\n<p><strong>简述</strong></p>\n<p>在进一步之前，让我们先回顾一下各种上下文切换技术。</p>\n<p>不过首先说明一点术语。当我们说“上下文”的时候，指的是程序在执行中的一个状态。通常我们会用调用栈来表示这个状态——栈记载了每个调用层级执行到哪里，还有执行时的环境情况等所有有关的信息。</p>\n<p>当我们说“上下文切换”的时候，表达的是一种从一个上下文切换到另一个上下文执行的技术。而“调度”指的是决定哪个上下文可以获得接下去的CPU时间的方法。</p>\n<p><strong>进程</strong></p>\n<p>进程是一种古老而典型的上下文系统，每个进程有独立的地址空间，资源句柄，他们互相之间不发生干扰。</p>\n<p>每个进程在内核中会有一个数据结构进行描述，我们称其为进程描述符。这些描述符包含了系统管理进程所需的信息，并且放在一个叫做任务队列的队列里面。</p>\n<p>很显然，当新建进程时，我们需要分配新的进程描述符...</p>',0,2,'2014-12-24 15:21:50.000000','2015-01-29 18:03:55.000000',1),(9,'Django 1.8 发布','Django 1.8(第二个长期版本) 发布了. 具体的更新日志参考这里: https://docs.djangoproject.com/en/1.8/releases/1.8/','<p>Django 1.8(第二个长期版本) 发布了. 具体的更新日志参考这里: https://docs.djangoproject.com/en/1.8/releases/1.8/</p>',0,2,'2015-04-02 09:55:08.000000','2015-04-02 09:55:08.000000',1),(10,'Understanding ECMAScript 6','*         Introduction\r\n  *                  Browser and Node.js Compatibility\r\n  *                  Who This Book is For\r\n  *                  Overview\r\n  *                  Help and Support\r\n*         The Basics\r\n  *            Better Unicode Support\r\n  *            Other String Changes\r\n  *            Other Regular Expression Changes\r\n  *            Object.is()\r\n  *            Block bindings\r\n  *            Destructuring Assignment\r\n  *            Numbers\r\n  *            Summary\r\n*         Functions\r\n  *            Default Parameters\r\n  *            Rest Parameters\r\n  *            Destructured Parameters\r\n  *            The Spread Operator\r\n  *            The name Property\r\n  *            Block-Level Functions\r\n  *            Arrow Functions\r\n  *            Syntax\r\n  *            Summary\r\n*         Objects\r\n  *            Object Categories\r\n  *            Object Literal Extensions\r\n  *            Object.assign()\r\n  *            Duplicate Object Literal Properties\r\n  *            Changing Prototypes\r\n  *            Super References\r\n  *            Summary\r\n*         Symbols\r\n  *            Creating Symbols\r\n  *            Identifying Symbols\r\n  *            Using Symbols\r\n  *            Sharing Symbols\r\n  *            Finding Object Symbols\r\n  *            Coercing Symbols to Strings\r\n  *            Well-Known Symbols\r\n  *            Summary\r\n*         Classes\r\n  *            Class-Like Structures in ECMAScript 5\r\n  *            Class Declarations\r\n*         Iterators and Generators\r\n  *            What are Iterators?\r\n  *            Generators\r\n  *            Iterables and for-of\r\n  *            Built-in Iterators\r\n  *            Advanced Functionality\r\n  *            Summary\r\n*         Template Strings\r\n  *            Basic Syntax\r\n  *            Multiline Strings\r\n  *            Substitutions\r\n  *            Tagged Templates\r\n  *            Summary\r\n\r\n## **Introduction**\r\n\r\nThe JavaScript core language features are defined in a standard called ECMA-262. The language defined in this standard is called ECMAScript, of which the JavaScript in the browser and Node.js environments are a superset. While browsers and Node.js may add more capabilities through additional objects and methods, the core of the language remains as defined in ECMAScript, which is why the ongoing development of ECMA-262 is vital to the success of JavaScript as a whole.\r\n\r\nIn 2007, JavaScript was at a crossroads. The popularity of Ajax was ushering in a new age of dynamic web applications while JavaScript hadn’t changed since the third edition of ECMA-262 was published in 1999. TC-39, the committee responsible for driving the ECMAScript process, put together a large draft specification for ECMAScript 4. ECMAScript 4 was massive in scope, introducing changes both small and large to the language. Language features included new syntax, modules, classes, classical inheritance, private object members, optional type annotations, and more.\r\n\r\nThe scope of the ECMAScript 4 changes caused a rift to form in TC-39, with some members feeling that the fourth edition was trying to accomplish too much. A group of leaders from Yahoo, Google, and Microsoft came up with an alternate proposal for the next version of ECMAScript that they initially called ECMAScript 3.1. The “3.1” was intended to show that this was an incremental change to the existing standard.\r\n\r\nECMAScript 3.1 introduced very few syntax changes, instead focusing on property attributes, native JSON support, and adding methods to already-existing objects. Although there was an early attempt to reconcile ECMAScript 3.1 and ECMAScript 4, this ultimately failed as the two camps had difficulty with the very different perspectives on how the language should grow.\r\n\r\nIn 2008, Brendan Eich, the creator of JavaScript, announced that TC-39 would focus its efforts on standardizing ECMAScript 3.1. They would table the major syntax and feature changes of ECMAScript 4 until after the next version of ECMAScript was standardized, and all members of the committee would work to bring the best pieces of ECMAScript 3.1 and 4 together after that point into an effort initially nicknamed ECMAScript Harmony.\r\n\r\nECMAScript 3.1 was eventually standardized as the fifth edition of ECMA-262, also described as ECMAScript 5. The committee never released an ECMAScript 4 standard to avoid confusion with the now-defunct effort of the same name. Work then began on ECMAScript Harmony, with ECMAScript 6 being the first standard released in this new “harmonious” spirit.\r\n\r\nECMAScript 6 reached feature complete status in 2014. The features vary widely from completely new objects and patterns to syntax changes to new methods on existing objects. The exciting thing about ECMAScript 6 is that all of these changes are geared towards problems that developers are actually facing. And while it will still take time for adoption and implementation to reach the point where ECMAScript 6 is the minimum that developers can expect, there’s a lot to be gained from a good understanding of what the future of JavaScript looks like.\r\n#### **Browser and Node.js Compatibility**\r\n\r\nMany JavaScript environments, such as web browsers and Node.js, are actively working on implementing ECMAScript 6. This book does not attempt to address the inconsistencies between implementations and instead focuses on what the specification defines as the correct behavior. As such, it’s possible that your JavaScript environment may not conform to the behavior described in this book.\r\n#### **Who This Book is For**\r\n\r\nThis book is intended as a guide for those who are already familiar with JavaScript and ECMAScript 5. While a deep understanding of the language isn’t necessary to use this book, it is helpful in understanding the differences between ECMAScript 5 and 6. In particular, this book is aimed at intermediate-to-advanced JavaScript developers (both browser and Node.js environments) who want to learn about the future of the language.\r\n\r\nThis book is not for beginners who have never written JavaScript. You will need to have a good basic understanding of the language to make use of this book.\r\n#### **Overview**\r\n\r\n**Chapter 1**: The Basics introduces the smallest changes in the language. These are the new features that don’t necessarily introduce syntax changes, but rather are incremental changes on top of ECMAScript 5.\r\n\r\n**Chapter 2**: Functions discusses the various changes to functions. This includes the arrow function form, default parameters, rest parameters, and more.\r\n\r\n**Chapter 3**: Objects explains the changes to how objects are created, modified, and used. Topics include changes to object literal syntax, and new reflection methods.\r\n\r\n**Chapter 4**: Symbols introduces the concept of symbols, a new way to define properties. Symbols are a new primitive type that can be used to obscure (but not hide) object properties and methods.\r\n\r\n**Chapter 5**: Arrays details the changes to native arrays and the interesting new ways they can be used in JavaScript.\r\n\r\n**Chapter 6**: Collections details the new collection types of Set, WeakSet, Map, and WeakMap. These types expand on the usefulness of arrays by adding semantics, de-duping, and memory management designed specifically for JavaScript.\r\n\r\n**Chapter 7**: Classes introduces the first formal concept of classes in JavaScript. Often a point of confusion for those coming from other languages, the addition of class syntax in JavaScript makes the language more approachable to others and more concise for enthusiasts.\r\n\r\n**Chapter 8**: Iterators and Generators discusses the addition of iterators and generators to the language. These features allow you to work with collections of data in powerful ways that were not possible in previous versions of JavaScript.\r\n\r\n**Chapter 9**: Proxies discusses the new proxy object that allows you to intercept every operation performed on an object. Proxies give developers unprecedented control over objects and, as such, unlimited possibilities for defining new interaction patterns.\r\n\r\n**Chapter 10**: Promises introduces promises as a new part of the language. Promises were a grassroots effort that eventually took off and gained in popularity due to extensive library support. ECMAScript 6 formalizes promises and makes them available by default.\r\n\r\n**Chapter 11**: Modules details the official module format for JavaScript. The intent is that these modules can replace the numerous ad-hoc module definition formats that have appeared over the years.\r\n\r\n**Chapter 12**: Template Strings discusses the new built-in templating functionality. Template strings are designed to easily create DSLs in a secure way.\r\n\r\n**Chapter 13**: Reflection introduces the formalized reflection API for JavaScript. Similar to other languages, ECMAScript 6 reflection allows you to inspect objects at a granular level, even if you didn’t create the object.\r\n#### **Help and Support**\r\n\r\nYou can file issues, suggest changes, and open pull requests against this book by visiting: https://github.com/nzakas/understandinges6\r\n\r\nFor anything else, please send a message to the mailing list: http://groups.google.com/group/zakasbooks.\r\n## **The Basics**\r\n\r\nECMAScript 6 makes a large number of changes on top of ECMAScript 5. Some of the changes are larger, such as adding new types or syntax, while others are quite small, providing incremental improvements on top of the language. This chapter covers those incremental improvements that likely won’t gain a lot of attention but provide some important functionality that may make certain types of problems easier to solve.\r\n#### **Better Unicode Support**\r\n\r\nPrior to ECMAScript 6, JavaScript strings were based solely on the idea of 16-bit character encodings. All string properties and methods, such as length and charAt(), were based around the idea that every 16-bit sequence represented a single character. ECMAScript 5 allowed JavaScript engines to decide which of two encodings to use, either UCS-2 or UTF-16 (both encodings use 16-bit code units, making all observable operations the same). While it’s true that all of the world’s characters used to fit into 16 bits at one point in time, that is no longer the case.\r\n\r\nKeeping within 16 bits wasn’t possible for Unicode’s stated goal of providing a globally unique identifier to every character in the world. These globally unique identifiers, called code points, are simply numbers starting at 0 (you might think of these as character codes, though there is a subtle difference). A character encoding is responsible for encoding a code point into code units that are internally consistent. While UCS-2 had a one-to-one mapping of code point to code unit, UTF-16 is more variable.\r\n\r\nThe first 2^16 code points are represented as single 16-bit code units in UTF-16. This is called the Basic Multilingual Plane (BMP). Everything beyond that range is considered to be in a supplementary plane, where the code points can no longer be represented in just 16-bits. UTF-16 solves this problem by introducing surrogate pairs in which a single code point is represented by two 16-bit code units. That means any single character in a string can be either one code unit (for BMP, total of 16 bits) or two (for supplementary plane characters, total of 32 bits).\r\n\r\nECMAScript 5 kept all operations as working on 16-bit code units, meaning that you could get unexpected results from strings containing surrogate pairs. For example:\r\n\r\n```js\r\nvar text = \"','<ul>\n<li>Introduction</li>\n<li>Browser and Node.js Compatibility</li>\n<li>Who This Book is For</li>\n<li>Overview</li>\n<li>Help and Support</li>\n<li>The Basics</li>\n<li>Better Unicode Support</li>\n<li>Other String Changes</li>\n<li>Other Regular Expression Changes</li>\n<li>Object.is()</li>\n<li>Block bindings</li>\n<li>Destructuring Assignment</li>\n<li>Numbers</li>\n<li>Summary</li>\n<li>Functions</li>\n<li>Default Parameters</li>\n<li>Rest Parameters</li>\n<li>Destructured Parameters</li>\n<li>The Spread Operator</li>\n<li>The name Property</li>\n<li>Block-Level Functions...</li></ul>',0,0,'2015-04-16 15:04:47.000000','2015-04-16 15:48:55.000000',1),(11,'Django运行方式及处理流程总结','之前在网上看过一些介绍Django处理请求的流程和Django源码结构的文章，觉得了解一下这些内容对开发Django项目还是很有帮助的。所以，我按照自己的逻辑总结了一下Django项目的运行方式和对Request的基本处理流程。\r\n\r\n\r\n###一、Django的运行方式\r\n\r\n运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到runserver方法，使用Django自己的web server；另外一种就是使用fastcgi，uWSGIt等协议运行Django项目，这里以uWSGIt为例。\r\n\r\n**1、runserver方法**\r\n\r\nrunserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：\r\n```python\r\nmanage.py runserver [options] [optional port number, or ipaddr:port]\r\npython manager.py runserver    # default port is 8000\r\npython manager.py runserver 8080\r\npython manager.py runserver 127.0.0.1:9090\r\n```\r\n看一下manager.py的源码，你会发现上面的命令其实是通过Django的execute_from_command_line方法执行了内部实现的runserver命令，那么现在看一下runserver具体做了什么。。\r\n\r\n看了源码之后，可以发现runserver命令主要做了两件事情：\r\n\r\n1. 解析参数，并通过django.core.servers.basehttp.get_internal_wsgi_application方法获取wsgi handler;\r\n2. 根据ip_address和port生成一个WSGIServer对象，接受用户请求\r\n\r\nget_internal_wsgi_application的源码如下：\r\n```python\r\ndef get_internal_wsgi_application():\r\n    \"\"\"\r\n    Loads and returns the WSGI application as configured by the user in\r\n    ``settings.WSGI_APPLICATION``. With the default ``startproject`` layout,\r\n    this will be the ``application`` object in ``projectname/wsgi.py``.\r\n \r\n    This function, and the ``WSGI_APPLICATION`` setting itself, are only useful\r\n    for Django\'s internal servers (runserver, runfcgi); external WSGI servers\r\n    should just be configured to point to the correct application object\r\n    directly.\r\n \r\n    If settings.WSGI_APPLICATION is not set (is ``None``), we just return\r\n    whatever ``django.core.wsgi.get_wsgi_application`` returns.\r\n \r\n    \"\"\"\r\n    from django.conf import settings\r\n    app_path = getattr(settings, \'WSGI_APPLICATION\')\r\n    if app_path is None:\r\n        return get_wsgi_application()\r\n \r\n    return import_by_path(\r\n        app_path,\r\n        error_prefix=\"WSGI application \'%s\' could not be loaded; \" % app_path\r\n    )\r\n```\r\n通过上面的代码我们可以知道，Django会先根据settings中的WSGI_APPLICATION来获取handler；在创建project的时候，Django会默认创建一个wsgi.py文件，而settings中的WSGI_APPLICATION配置也会默认指向这个文件。看一下这个wsgi.py文件，其实它也和上面的逻辑一样，最终调用get_wsgi_application实现。\r\n\r\n**2、uWSGI方法**\r\n\r\nuWSGI+Nginx的方法是现在最常见的在生产环境中运行Django的方法，本人的博客也是使用这种方法运行，要了解这种方法，首先要了解一下WSGI和uWSGI协议。\r\n\r\nWSGI，全称Web Server Gateway Interface，或者Python Web Server Gateway Interface，是为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口，基于现存的CGI标准而设计的。WSGI其实就是一个网关(Gateway)，其作用就是在协议之间进行转换。(PS: 这里只对WSGI做简单介绍，想要了解更多的内容可自行搜索)\r\n\r\nuWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。注意uwsgi是一种通信协议，而uWSGI是实现uwsgi协议和WSGI协议的Web服务器。uWSGI具有超快的性能、低内存占用和多app管理等优点。以我的博客为例，uWSGI的xml配置如下：\r\n```js\r\n<uwsgi>\r\n    <!-- 端口 -->\r\n    <socket>:7600</socket>\r\n    <stats>:40000</stats>\r\n    <!-- 系统环境变量 -->\r\n    <env>DJANGO_SETTINGS_MODULE=geek_blog.settings</env>\r\n    <!-- 指定的python WSGI模块 -->\r\n    <module>django.core.handlers.wsgi:WSGIHandler()</module>\r\n    <processes>6</processes>\r\n    <master />\r\n    <master-as-root />\r\n    <!-- 超时设置 -->\r\n    <harakiri>60</harakiri>\r\n    <harakiri-verbose/>\r\n    <daemonize>/var/app/log/blog/uwsgi.log</daemonize>\r\n    <!-- socket的监听队列大小 -->\r\n    <listen>32768</listen>\r\n    <!-- 内部超时时间 -->\r\n    <socket-timeout>60</socket-timeout>\r\n</uwsgi>\r\n```\r\n以上就是uWSGI xml配置的写法，也可以使用ini的方式。安装uWSGI和运行的命令如下：\r\n```shell\r\nsudo pip install uwsgi\r\nuwsgi --pidfile=/var/run/geek-blog.pid -x uwsgi.xml --uid blog --gid nogroup\r\n```\r\nuWSGI和Nginx一起使用的配置方法就不在这里说明了，网上教程很多，需要的可以自行搜索。\r\n\r\n\r\n###二、HTTP请求处理流程\r\n\r\nDjango和其他Web框架一样，HTTP的处理流程基本类似：接受request，返回response内容。Django的具体处理流程大致如下图所示：\r\n\r\n**1、加载project settings**\r\n\r\n在通过django-admin.py创建project的时候，Django会自动生成默认的settings文件和manager.py等文件，在创建WSGIServer之前会执行下面的引用：\r\n```python\r\nfrom django.conf import settings\r\n```\r\n上面引用在执行时，会读取os.environ中的DJANGO_SETTINGS_MODULE配置，加载项目配置文件，生成settings对象。所以，在manager.py文件中你可以看到，在获取WSGIServer之前，会先将project的settings路径加到os路径中。\r\n\r\n**2、创建WSGIServer**\r\n\r\n不管是使用runserver还是uWSGI运行Django项目，在启动时都会调用django.core.servers.basehttp中的run()方法，创建一个django.core.servers.basehttp.WSGIServer类的实例，之后调用其serve_forever()方法启动HTTP服务。run方法的源码如下：\r\n```python\r\ndef run(addr, port, wsgi_handler, ipv6=False, threading=False):\r\n    server_address = (addr, port)\r\n    if threading:\r\n        httpd_cls = type(str(\'WSGIServer\'), (socketserver.ThreadingMixIn, WSGIServer), {})\r\n    else:\r\n        httpd_cls = WSGIServer\r\n    httpd = httpd_cls(server_address, WSGIRequestHandler, ipv6=ipv6)\r\n    # Sets the callable application as the WSGI application that will receive requests\r\n    httpd.set_app(wsgi_handler)\r\n    httpd.serve_forever()\r\n```\r\n如上，我们可以看到：在创建WSGIServer实例的时候会指定HTTP请求的Handler，上述代码使用WSGIRequestHandler。当用户的HTTP请求到达服务器时，WSGIServer会创建WSGIRequestHandler实例，使用其handler方法来处理HTTP请求(其实最终是调用wsgiref.handlers.BaseHandler中的run方法处理)。WSGIServer通过set_app方法设置一个可调用(callable)的对象作为application，上面提到的handler方法最终会调用设置的application处理request，并返回response。\r\n\r\n其中，WSGIServer继承自wsgiref.simple_server.WSGIServer，而WSGIRequestHandler继承自wsgiref.simple_server.WSGIRequestHandler，wsgiref是Python标准库给出的WSGI的参考实现。其源码可自行到wsgiref参看，这里不再细说。\r\n\r\n**3、处理Request**\r\n\r\n第二步中说到的application，在Django中一般是django.core.handlers.wsgi.WSGIHandler对象，WSGIHandler继承自django.core.handlers.base.BaseHandler，这个是Django处理request的核心逻辑，它会创建一个WSGIRequest实例，而WSGIRequest是从http.HttpRequest继承而来\r\n\r\n**4、返回Response**\r\n\r\n上面提到的BaseHandler中有个get_response方法，该方法会先加载Django项目的ROOT_URLCONF，然后根据url规则找到对应的view方法(类)，view逻辑会根据request实例生成并返回具体的response。\r\n\r\n在Django返回结果之后，第二步中提到wsgiref.handlers.BaseHandler.run方法会调用finish_response结束请求，并将内容返回给用户。\r\n\r\n\r\n###三、Django处理Request的详细流程\r\n\r\n上述的第三步和第四步逻辑只是大致说了一下处理过程，Django在处理request的时候其实做了很多事情，下面我们详细的过一下。首先给大家分享两个网上看到的Django流程图：\r\n\r\n![](http://xianglong.qiniudn.com/django.png)\r\n\r\n![](http://xianglong.qiniudn.com/django_flow.png)\r\n\r\n上面的两张流程图可以大致描述Django处理request的流程，按照流程图2的标注，可以分为以下几个步骤：\r\n\r\n用户通过浏览器请求一个页面\r\n    1.     请求到达Request Middlewares，中间件对request做一些预处理或者直接response请求\r\n    2.     URLConf通过urls.py文件和请求的URL找到相应的View\r\n    3.     View Middlewares被访问，它同样可以对request做一些处理或者直接返回response\r\n    4.     调用View中的函数\r\n    5.     View中的方法可以选择性的通过Models访问底层的数据\r\n    6.     所有的Model-to-DB的交互都是通过manager完成的\r\n    7.     如果需要，Views可以使用一个特殊的Context\r\n    8.     Context被传给Template用来生成页面\r\n    9.     Template使用Filters和Tags去渲染输出\r\n    10.     输出被返回到View\r\n    11.     HTTPResponse被发送到Response Middlewares\r\n    12.     任何Response Middlewares都可以丰富response或者返回一个完全不同的response\r\n    13.     Response返回到浏览器，呈现给用户\r\n\r\n上述流程中最主要的几个部分分别是：Middleware(中间件，包括request, view, exception, response)，URLConf(url映射关系)，Template(模板系统)，下面一一介绍一下。\r\n\r\n**1、Middleware(中间件)**\r\n\r\nMiddleware并不是Django所独有的东西，在其他的Web框架中也有这种概念。在Django中，Middleware可以渗入处理流程的四个阶段：request，view，response和exception，相应的，在每个Middleware类中都有rocess_request，process_view， process_response 和 process_exception这四个方法。你可以定义其中任意一个活多个方法，这取决于你希望该Middleware作用于哪个处理阶段。每个方法都可以直接返回response对象。\r\n\r\nMiddleware是在Django BaseHandler的load_middleware方法执行时加载的，加载之后会建立四个列表作为处理器的实例变量：\r\n\r\n    _request_middleware：process_request方法的列表\r\n\r\n    _view_middleware：process_view方法的列表\r\n\r\n    _response_middleware：process_response方法的列表\r\n\r\n    _exception_middleware：process_exception方法的列表\r\n\r\nDjango的中间件是在其配置文件(settings.py)的MIDDLEWARE_CLASSES元组中定义的。在MIDDLEWARE_CLASSES中，中间件组件用字符串表示：指向中间件类名的完整Python路径。例如GeekBlog项目的配置：\r\n```python\r\nMIDDLEWARE_CLASSES = (\r\n    \'django.middleware.cache.UpdateCacheMiddleware\',\r\n    \'django.middleware.common.CommonMiddleware\',\r\n    \'django.middleware.cache.FetchFromCacheMiddleware\',\r\n    \'django.contrib.sessions.middleware.SessionMiddleware\',\r\n    \'django.middleware.csrf.CsrfViewMiddleware\',\r\n    \'django.contrib.auth.middleware.AuthenticationMiddleware\',\r\n    \'django.contrib.messages.middleware.MessageMiddleware\',\r\n    \'django.middleware.locale.LocaleMiddleware\',\r\n    \'geek_blog.middlewares.MobileDetectionMiddleware\',    # 自定义的Middleware\r\n)\r\n```\r\nDjango项目的安装并不强制要求任何中间件，如果你愿意，MIDDLEWARE_CLASSES可以为空。中间件出现的顺序非常重要：在request和view的处理阶段，Django按照MIDDLEWARE_CLASSES中出现的顺序来应用中间件，而在response和exception异常处理阶段，Django则按逆序来调用它们。也就是说，Django将MIDDLEWARE_CLASSES视为view函数外层的顺序包装子：在request阶段按顺序从上到下穿过，而在response则反过来。以下两张图可以更好地帮助你理解：\r\n\r\n![Django Middleware流程1](http://xianglong.qiniudn.com/django_middleware_flow.png)\r\n\r\n![Django Middleware流程图2](http://xianglong.qiniudn.com/django_middleware_flow2.png)\r\n\r\n**2、URLConf(URL映射)**\r\n\r\n如果处理request的中间件都没有直接返回response，那么Django会去解析用户请求的URL。URLconf就是Django所支撑网站的目录。它的本质是URL模式以及要为该URL模式调用的视图函数之间的映射表。通过这种方式可以告诉Django，对于这个URL调用这段代码，对于那个URL调用那段代码。具体的，在Django项目的配置文件中有ROOT_URLCONF常量，这个常量加上根目录\"/\"，作为参数来创建django.core.urlresolvers.RegexURLResolver的实例，然后通过它的resolve方法解析用户请求的URL，找到第一个匹配的view。\r\n\r\n其他有关URLConf的内容，这里不再具体介绍，大家可以看DjangoBook了解。\r\n\r\n**3、Template(模板)**\r\n\r\n大部分web框架都有自己的Template(模板)系统，Django也是。但是，Django模板不同于Mako模板和jinja2模板，在Django模板不能直接写Python代码，只能通过额外的定义filter和template tag实现。由于本文主要介绍Django流程，模板内容就不过多介绍。\r\n\r\n\r\n参考文章：\r\n\r\nuWSGI Web服务器介绍\r\n\r\nwsgiref源码分析\r\n\r\n用Python写一个简单的Web框架\r\n\r\nDjango 结构及处理流程分析\r\n\r\n\r\nPS: 以上代码和内容都是基于Django 1.6.5版本，其他版本可能与其不同，请参考阅读。\r\n\r\n原文地址: http://xianglong.me/article/django-request-work-flow/','<p>之前在网上看过一些介绍Django处理请求的流程和Django源码结构的文章，觉得了解一下这些内容对开发Django项目还是很有帮助的。所以，我按照自己的逻辑总结了一下Django项目的运行方式和对Request的基本处理流程。</p>\n<h3>一、Django的运行方式</h3>\n<p>运行Django项目的方法很多，这里主要介绍一下常用的方法。一种是在开发和调试中经常用到runserver方法，使用Django自己的web server；另外一种就是使用fastcgi，uWSGIt等协议运行Django项目，这里以uWSGIt为例。</p>\n<p><strong>1、runserver方法</strong></p>\n<p>runserver方法是调试Django时经常用到的运行方式，它使用Django自带的WSGI Server运行，主要在测试和开发中使用，使用方法如下：</p>\n<div class=\"codehilite\"><pre><span class=\"n\">manage</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">runserver</span> <span class=\"p\">[</span><span class=\"n\">options</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">optional</span> <span class=\"n\">port</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"ow\">or</span> <span class=\"n\">ipaddr</span><span class=\"p\">:</span><span class=\"n\">port</span><span class=\"p\">]</span>\n<span class=\"n\">python</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">runserver</span>    <span class=\"c1\"># default port is 8000</span>\n<span class=\"n\">python</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">runserver</span> <span class=\"mi\">8080</span>\n<span class=\"n\">python</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">py</span> <span class=\"n\">runserver</span> <span class=\"mf\">127.0...</span></pre></div>',0,2,'2014-12-25 16:58:00.000000','2015-01-29 18:03:46.000000',1),(12,'来自HeroKu的HTTP API 设计指南(中文版)','\r\n###简介\r\n\r\n本指南中文翻译者为[@Easy](http://weibo.com/easy), 他是国内首家互联网人才拍卖网站[JobDeer.com](http://ha.jobdeer.com/)的创始人。转载请保留本信息。\r\n\r\n本指南描述了一系列HTTP+JSON API的设计实践, 来自并展开于[Heroku Platform API](https://devcenter.heroku.com/articles/platform-api-reference) 的工作. 本指南指导着Heroku内部API的开发，我们希望也能对Heroku以外的API设计者有所帮助。\r\n\r\n###目录\r\n\r\n**基础**\r\n\r\n1.     总是使用TLS\r\n2.     在Accepts头中带上版本号\r\n3.     通过Etags支持缓存\r\n4.     用Request-Ids追踪请求\r\n5.     用Ranges来分页\r\n\r\n**请求**\r\n\r\n1.     返回适当的状态码\r\n2.     总是返回完整的资源\r\n3.     在请求body中接收JSON序列\r\n4.     使用一致的路径格式\r\n5.     小写所有路径和属性\r\n6.     支持非ID的参数作为快捷方式\r\n7.     少用路径嵌套\r\n\r\n**响应**\r\n\r\n1.     总是提供资源(UU)ID\r\n2.     提供标准的时间戳\r\n3.     使用ISO8601格式的UTC时间\r\n4.     嵌入外键数据\r\n5.     总是生成结构化的错误信息\r\n6.     显示频率限制的状态\r\n7.     在所有的响应中压缩JSON数据\r\n\r\n**文档及其他**\r\n\r\n1.     提供机器可读的JSON格式\r\n2.     提供人类可读的文档\r\n3.     提供可执行的示例\r\n4.     描述稳定性\r\n\r\n**基础**\r\n\r\n总是使用TLS\r\n\r\n总是使用TLS（就是https）来访问API，没有必要指出什么时候需要用，什么时候不需要用，只管任何时候都用它就好。\r\n\r\n对所有非TLS的请求返回403 Forbidden，不要用重定向，这会允许一些不良的客户端行为，而又没有任何好处。依赖重定向的客户端会使流量翻倍，而让TLS毫无意义 —— 敏感数据已经在第一次请求时发送出来了。\r\n在Accepts头中带上版本号\r\n\r\n从一开始就为API分配版本。使用Accepts头来发送版本信息，可以使用自定义的内容类型，如：\r\n```js\r\nAccept: application/vnd.heroku+json; version=3\r\n```\r\n不要提供默认版本，而由客户端显式指定它使用哪一个特定的版本。\r\n通过Etags支持缓存\r\n\r\n在所有的请求中带上 ETag 头 ， 用于识别特定版本的返回资源。用户可以在随后的请求中通过提供If-None-Match头的值来检查内容是否过期。\r\n用Request-Ids追踪请求\r\n\r\n在每个API相应中提供Request-Id头，带上一个唯一的UUID值。如果服务器和客户端都记录了这些值，在跟踪和调试请求时会派上大用场。\r\n用Ranges来分页\r\n\r\n对所有可能产生大量数据的响应进行分页。使用Content-Range 头来标记分页请求。可以参考这个例子，来了解请求和响应头、状态码、Limit、排序和翻页：Heroku Platform API on Ranges\r\n请求\r\n返回适当的状态码\r\n\r\n为每个请求返回适当的状态码，成功的请求应该遵守如下规则：\r\n\r\n*     200: 当GET请求成功完成，DELETE或者PATCH请求同步完成。\r\n*     201: 同步方式成功完成POST请求。\r\n*     202: POST，DELETE或者PATCH请求提交成功，稍后将异步的进行处理。\r\n*     206: GET请求成功完成，但只返回了部分数据。参见用ranges分页\r\n\r\n注意认证和认证错误的使用：\r\n\r\n*     401 Unauthorized: 请求失败，因为用户没有进行认证。\r\n*     403 Forbidden: 请求失败，因为用户被认定没有访问特定资源的权限。\r\n\r\n返回合适的状态码可以为错误提供更多的信息：\r\n\r\n*     422 Unprocessable Entity: 你的请求服务器可以理解，但是其中包含了不合法的参数。\r\n*     429 Too Many Requests: 请求频率超配，稍后再试。\r\n*     500 Internal Server Error: 服务器出错了，检查网站的状态，或者报告问题。\r\n\r\n根据HTTP response code 规范的指导来设计用户错误和服务器错误情况下的状态码。\r\n总是返回完整的资源\r\n\r\n对于200和201的响应，总是尽可能在响应中返回完整的资源（比如一个对象的所有属性），包括PUT，PATCH和DELETE请求，如：\r\n```html\r\n$ curl -X DELETE \\  \r\n  https://service.com/apps/1f9b/domains/0fd4\r\n\r\nHTTP/1.1 200 OK\r\nContent-Type: application/json;charset=utf-8\r\n...\r\n{\r\n  \"created_at\": \"2012-01-01T12:00:00Z\",\r\n  \"hostname\": \"subdomain.example.com\",\r\n  \"id\": \"01234567-89ab-cdef-0123-456789abcdef\",\r\n  \"updated_at\": \"2012-01-01T12:00:00Z\"\r\n}\r\n```\r\n202响应则不用包含完整的资源，如:\r\n```bs\r\n$ curl -X DELETE \\  \r\n  https://service.com/apps/1f9b/dynos/05bd\r\n\r\nHTTP/1.1 202 Accepted\r\nContent-Type: application/json;charset=utf-8\r\n...\r\n{}\r\n```\r\n在请求body中接收JSON序列\r\n\r\n不要将额外信息放到form-encoded里边，而是将其JSON序列放到PUT，PATCH或POST请求的Body中。这样才能和同为JSON序列的响应Body对称（作者你是处女座么），如：\r\n```json\r\n$ curl -X POST https://service.com/apps \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -d \'{\"name\": \"demoapp\"}\'\r\n\r\n{\r\n  \"id\": \"01234567-89ab-cdef-0123-456789abcdef\",\r\n  \"name\": \"demoapp\",\r\n  \"owner\": {\r\n    \"email\": \"username@example.com\",\r\n    \"id\": \"01234567-89ab-cdef-0123-456789abcdef\"\r\n  },\r\n  ...\r\n}\r\n```\r\n使用一致的路径格式\r\n\r\n资源名称\r\n\r\n使用复数来命名资源，除非该资源在系统中是单件（比如，在绝大多数系统中，一个用户只能拥有一个账户）。这样在你引用特定资源时可以保持一致性。\r\n\r\n动作\r\n\r\n对独有的资源使用不需要特定动作的endpoint格式。这样当需要特定的动作，只需要把它们放到标准的actions前缀后边，就可以清晰的描述它们：\r\n```js\r\n/resources/:resource/actions/:action\r\n```\r\n如：\r\n```js\r\n/runs/{run_id}/actions/stop\r\n```\r\n小写所有路径和属性\r\n\r\n使用小写字母和减号命名路径，这样Hostname可以对齐（作者你真的是处女座）：\r\n```json\r\nservice-api.com/users\r\nservice-api.com/app-setups\r\n```\r\n同样小写属性，但使用下划线来分割，这样属性名在JavaScript中可以不用加引号：\r\n```js\r\nservice_class: \"first\"\r\n```\r\n支持非ID的参数作为快捷方式\r\n\r\n有时候要求最终用户提供ID来表示资源会比较麻烦，比如，用户可能只想得起Heroku的Appname，而应用本身却是由UUID来区分的。在这种情况下，我们可以同时接收ID和Name：\r\n```bash\r\n$ curl https://service.com/apps/{app_id_or_name}\r\n$ curl https://service.com/apps/97addcf0-c182\r\n$ curl https://service.com/apps/www-prod\r\n```\r\n绝不要只接收名称来排除某些ID。\r\n少用路径嵌套\r\n\r\n在嵌套了父子资源的数据模型中，路径可能深度嵌套：\r\n\r\n	/orgs/{org_id}/apps/{app_id}/dynos/{dyno_id}\r\n\r\n可以通过从根路径定位来限制嵌套层数。使用嵌套来标识作用域内部的数据集。比如，上边那个dyno属于一个app，而app又属于一个org的例子：\r\n\r\n    /orgs/{org_id}\r\n    /orgs/{org_id}/apps\r\n    /apps/{app_id}\r\n    /apps/{app_id}/dynos\r\n    /dynos/{dyno_id}\r\n\r\n响应\r\n总是提供资源(UU)ID\r\n\r\n为每个资源提供默认的ID属性。除非有特殊理由，总是使用UUID。不要用那些在服务的实例间或资源间不全局唯一的ID，特别是自增ID。\r\n\r\n以8-4-4-4-12的格式小写UUID：\r\n\r\n\"id\": \"01234567-89ab-cdef-0123-456789abcdef\"\r\n\r\n提供标准的时间戳\r\n\r\n为资源提供默认的 created_at 和 updated_at 时间戳：\r\n```json\r\n{\r\n  ...\r\n  \"created_at\": \"2012-01-01T12:00:00Z\",\r\n  \"updated_at\": \"2012-01-01T13:00:00Z\",\r\n  ...\r\n}\r\n```\r\n如果这些时间戳对某些资源真的没有意义，那么你也可以去掉它。\r\n使用ISO8601格式的UTC时间\r\n\r\n只接受和返回UTC时间，以ISO8601格式显示：\r\n\r\n	\"finished_at\": \"2012-01-01T12:00:00Z\"\r\n\r\n嵌入外键数据\r\n\r\n将外键引用通过序列化的嵌入对象显示：\r\n```json\r\n{\r\n  \"name\": \"service-production\",\r\n  \"owner\": {\r\n    \"id\": \"5d8201b0...\"\r\n  },\r\n  ...\r\n}\r\n```\r\n而不是这样：\r\n```json\r\n{\r\n  \"name\": \"service-production\",\r\n  \"owner_id\": \"5d8201b0...\",\r\n  ...\r\n}\r\n```\r\n这使得我们可以在inline使用相关的数据，而不需要改变响应的格式，或者引入更多高层的响应字段：\r\n```json\r\n{\r\n  \"name\": \"service-production\",\r\n  \"owner\": {\r\n    \"id\": \"5d8201b0...\",\r\n    \"name\": \"Alice\",\r\n    \"email\": \"alice@heroku.com\"\r\n  },\r\n  ...\r\n}\r\n```\r\n总是生成结构化的错误信息\r\n\r\n为错误生成一致的，结构化的响应Body。包含机器可读的id，人类可读的message，以及可选的url指向关于错误的更多信息，还有如何解决它：\r\n\r\n	HTTP/1.1 429 Too Many Requests\r\n```json\r\n{\r\n  \"id\":      \"rate_limit\",\r\n  \"message\": \"Account reached its API rate limit.\",\r\n  \"url\":     \"https://docs.service.com/rate-limits\"\r\n}\r\n```\r\n为客户端常见的错误的格式和id撰写文档。\r\n显示频率限制的状态\r\n\r\n对客户端的频率限制可以保护服务的健康，并对其他的客户端提供高质量的服务。你可以使用token bucket 算法 来量化请求限制。\r\n\r\n在每次请求的响应头中，通过RateLimit-Remaining 返回剩余的请求次数。\r\n在所有的响应中压缩JSON数据\r\n\r\n额外的空格增大了响应的大小，而很多人性化的客户端可以自动美化JSON输出。所以最好将JSON响应进行压缩：\r\n```json\r\n{\"beta\":false,\"email\":\"alice@heroku.com\",\"id\":\"01234567-89ab-cdef-0123-456789abcdef\",\"last_login\":\"2012-01-01T12:00:00Z\", \"created_at\":\"2012-01-01T12:00:00Z\",\"updated_at\":\"2012-01-01T12:00:00Z\"}\r\n```\r\n不要这样：\r\n```json\r\n{\r\n  \"beta\": false,\r\n  \"email\": \"alice@heroku.com\",\r\n  \"id\": \"01234567-89ab-cdef-0123-456789abcdef\",\r\n  \"last_login\": \"2012-01-01T12:00:00Z\",\r\n  \"created_at\": \"2012-01-01T12:00:00Z\",\r\n  \"updated_at\": \"2012-01-01T12:00:00Z\"\r\n}\r\n```\r\n你可以考虑提供一个可选的方式来为客户端输出更长的响应，比如通过请求参数（如?pretty=true）或者通过 Accept头（如Accept: application/vnd.heroku+json; version=3; indent=4;）。\r\n文档及其他\r\n提供机器可读的JSON格式\r\n\r\n提供机器可读的schema来描述你的API，可以用prmd来管理你的schema，用过prmd verify来确保它通过验证。\r\n提供人类可读的文档\r\n\r\n提供人类可读的文档帮助客户端开发者们理解你的API。\r\n\r\n如果你使用了prmd来创建schema，那么你可以简单的通过prmd doc命令来生成Markdown的endpoint级别的文档。\r\n\r\n除了endpoint级别的描述，还要提供概要级别的信息，比如：\r\n\r\n*     授权，包括获得和使用授权Token。\r\n*     API的稳定性和版本，包括如何选择现有的API版本。\r\n*     通用请求和响应头。\r\n*     错误的序列化格式。\r\n*     各种语言的客户端如何使用API的例子。\r\n\r\n提供可执行的示例\r\n\r\n提供可执行的例子，这样用户可以直接在终端输入并看到可以用的API请求。最好的情况是，这些例子可以直接复制粘贴，以最小化用户试用API的成本，如：\r\n\r\n    $ export TOKEN=... # acquire from dashboard\r\n    $ curl -is https://$TOKEN@service.com/users\r\n\r\n如果你使用prmd来生成Markdown文档，你就免费获得了可执行的示例。\r\n描述稳定性\r\n\r\n描述你API的稳定性，以及哪些endpoint依赖于其成熟度，比如使用prototype，development或者production的标识。\r\n\r\n可参考 Heroku API compatibility policy 了解哪些接口是稳定的，哪些可能有变动。\r\n\r\n一旦你的API宣布为 production-ready 和 稳定版，不要在该API版本上做任何不向前兼容的修改。如果你需要做不向前兼容的修改，创建一个新的版本号。\r\n\r\n英文原版 → https://github.com/interagent/http-api-design','<h3>简介</h3>\n<p>本指南中文翻译者为<a href=\"http://weibo.com/easy\">@Easy</a>, 他是国内首家互联网人才拍卖网站<a href=\"http://ha.jobdeer.com/\">JobDeer.com</a>的创始人。转载请保留本信息。</p>\n<p>本指南描述了一系列HTTP+JSON API的设计实践, 来自并展开于<a href=\"https://devcenter.heroku.com/articles/platform-api-reference\">Heroku Platform API</a> 的工作. 本指南指导着Heroku内部API的开发，我们希望也能对Heroku以外的API设计者有所帮助。</p>\n<h3>目录</h3>\n<p><strong>基础</strong></p>\n<ol>\n<li>总是使用TLS</li>\n<li>在Accepts头中带上版本号</li>\n<li>通过Etags支持缓存</li>\n<li>用Request-Ids追踪请求</li>\n<li>用Ranges来分页</li>\n</ol>\n<p><strong>请求</strong></p>\n<ol>\n<li>返回适当的状态码</li>\n<li>总是返回完整的资源</li>\n<li>在请求body中接收JSON序列</li>\n<li>使用一致的路径格式</li>\n<li>小写所有路径和属性</li>\n<li>支持非ID的参数作为快捷方式</li>\n<li>少用路径嵌套</li>\n</ol>\n<p><strong>响应</strong></p>\n<ol>\n<li>总是提供资源(UU)ID</li>\n<li>提供标准的时间戳</li>\n<li>使用ISO8601格式的UTC时间</li>\n<li>嵌入外键数据</li>\n<li>总是生成结构化的错误信息</li>\n<li>显示频率限制的状态</li>\n<li>在所有的响应中压缩JSON数据</li>\n</ol>\n<p><strong>文档及其他</strong></p>\n<ol>\n<li>提供机器可读的JSON格式</li>\n<li>提供人类可读的文档</li>\n<li>提供可执行的示例</li>\n<li>描述稳定性</li>\n</ol>\n<p><strong>基础</strong></p>\n<p>总是使用TLS...</p>',0,2,'2014-12-26 12:57:50.000000','2015-01-29 18:03:08.000000',1),(13,'AngularJS 1.4开始开发, 更多版本有待2015年发布',' AngularJS 1.4的相关工作已经开始。在宣布了2.0版本的计划后，开发团队决定继续在1.x版本中开发新功能，并在2015年持续开发。\r\n\r\n由于1.4版还在早期开发阶段，目前没有很详细的新特性列表。Brian Ford在他的一篇 [博文](http://angularjs.blogspot.com/2014/12/planning-angular-14.html) 里提到了1.4中几个主要的“主题”：\r\n\r\n*     New Router\r\n*     Internationalization\r\n*     Forms\r\n*     $http\r\n*     $parse\r\n*     Documentation\r\n\r\n为了赶在 [ng-conf ](http://www.ng-conf.org/)大会（专注于AngularJS的大会，将于2015年3月5日召开）之前发布1.4版本，开发团队为其做计划时决定适当限制其开发规模。Igor Minar说：“相比发布1.4，我更愿意开发一个更小的版本以在ng-conf之前发布。” 当被问及1.4版紧迫的开发时间问题时，AngularJS 1.x的技术领导Pete Bacon Darwin说，尽快发布1.4版本能让开发者们尽早受益：\r\n\r\n我们知道，多发布常规大版本更便于开发者使用。过去我们常常几个月没有新版本发布，这意味着开发者迁移代码的工作量增大，同时他们为了用上新功能也不得不等待更长的时间。\r\n\r\n对某些开发者来说，1.4版会带来一些重大改变。Darwin解释了AngularJS版本号的编号规则：“仅增加\'补丁\'号(patch)的版本不会有较大变动，而如果‘次版本’号(minor)增加则很可能有较大变化。” 而由于1.4版正是增加了次版本号，因此很可能有功能上的大改变。\r\n\r\nAngularJS 2.0刚发布时，有的开发者对其新趋势表示不满，同时担忧Google还能支持1.x版到什么时候。Pluralsight作者 Travis Gosselin 为 1.4版的消息而振奋 ：\r\n\r\n我认为Angular 1.x能与2.0版并行开发简直太好了，这是其开发团队为Angular社区做的贡献。\r\n\r\nJeremy Likeness 认为2015年中1.x版本还会有更多新特性：\r\n\r\n1.4版的发布预告说明1.x产品还有生命力，从1.3.x的情况来看，1.4很可能会有很多迭代。这为客户在2015年仍然继续在1.x上的投入提供了许多可能。\r\n\r\nDarwin说，尽管他们有开发1.5版本的计划，但不确定后面还会有几个1.x版本。\r\n\r\n我们目前无法知道在AngularJS 1.x进入维护模式之前还会有几次大的版本发布。因为这受很多因素的影响，比如增加发布频率的做法在实践中对开发者帮助有多大、距Angular 2的发布还有多长时间、人们彻底接受Angular 2的时间、以及我们是否会走到认为已经不能对AngularJS 1.x做任何改进的程度。\r\n\r\n2.0版本的计划和相关工作都已公布出来，同时开发团队也想让1.x的工作更加开放。目前的1.4版除了 [设计文档](https://drive.google.com/#folders/0BxgtL8yFJbacUnUxc3l5aTZrbVk) 和会议记录之外，团队还公布了他们的 [主要计划会议](https://www.youtube.com/watch?v=Uae9_8aFo-o) 。Darwin说，这是一次尝试，“我们的开发过程更透明，让更多人参与进来。” 与他一样，有人认为这种做法能让开发者的计划时间更为充裕：\r\n\r\n我相信Angular团队将他们的工作方式和计划都尽量透明化是正确的选择，开发者们有充足的时间根据其发布时间表来相应地规划自己应用的开发策略。\r\n\r\n开发者能看到1.4版的 [计划表](https://docs.google.com/spreadsheets/d/1F4JmM25GeaVWLv7oaJrmfFZoE8ioepqNZQKd6xx_Jc4/edit?pli=1#gid=0) ，团队同时还鼓励他们加入其在 [GitHub](https://github.com/angular/angular.js) 上的项目中。Darwin说：“我们很注重开发体验，也就是说我们十分欢迎那些每天都使用Angular的一线开发者的反馈。”\r\n\r\n查看英文原文 ： [AngularJS 1.4 Announced, More to Come in 2015](https://github.com/angular/angular.js)','<p>AngularJS 1.4的相关工作已经开始。在宣布了2.0版本的计划后，开发团队决定继续在1.x版本中开发新功能，并在2015年持续开发。</p>\n<p>由于1.4版还在早期开发阶段，目前没有很详细的新特性列表。Brian Ford在他的一篇 <a href=\"http://angularjs.blogspot.com/2014/12/planning-angular-14.html\">博文</a> 里提到了1.4中几个主要的“主题”：</p>\n<ul>\n<li>New Router</li>\n<li>Internationalization</li>\n<li>Forms</li>\n<li>$http</li>\n<li>$parse</li>\n<li>Documentation</li>\n</ul>\n<p>为了赶在 <a href=\"http://www.ng-conf.org/\">ng-conf </a>大会（专注于AngularJS的大会，将于2015年3月5日召开）之前发布1.4版本，开发团队为其做计划时决定适当限制其开发规模。Igor Minar说：“相比发布1.4，我更愿意开发一个更小的版本以在ng-conf之前发布。” 当被问及1.4版紧迫的开发时间问题时，AngularJS 1.x的技术领导Pete Bacon Darwin说，尽快发布1.4版本能让开发者们尽早受益：</p>\n<p>我们知道，多发布常规大版本更便于开发者使用。过去我们常常几个月没有新版本发布，这意味着开发者迁移代码的工作量增大...</p>',0,2,'2014-12-29 10:03:45.000000','2015-01-29 18:02:21.000000',1),(14,'2014年总结','####我的2014年\r\n\r\n2014年就这样过去了! 对于我来说这一年发生了几件大事\r\n\r\n**工作变换**\r\n\r\n13年的时候我还在太原, 现在又跑到深圳了! 从事了python的开发工作.\r\n\r\n**14年3月**开始在百米生活这家网络公司工作, 认识了很多同事, 学到了很多东西. (感恩同事)\r\n\r\n**14年5月**由于工作需要, 在广州出差半月, 后又调回深圳, 直到8月份, 一直在开发及维护公司的路由广告管理系统, 在此期间, 学习了许多tornado和angularjs的相关知识, 获益良多! \r\n\r\n**14年10月**开发了公司的路由器升级管理平台, 这个平台主要是路由器固件升级, 路由器脚本升级管理服务, PV和UV都是千万级的, 在数据库, 服务器方面也学到了很多.\r\n\r\n**14年11月**发生一件大事件: 我当爸爸了! 有了女儿. 虽然到目前为止依然在为宝宝的名字发愁, 但依然发自内心的幸福. (感恩老婆大人)\r\n\r\n####展望2015','<h4>我的2014年</h4>\n<p>2014年就这样过去了! 对于我来说这一年发生了几件大事</p>\n<p><strong>工作变换</strong></p>\n<p>13年的时候我还在太原, 现在又跑到深圳了! 从事了python的开发工作.</p>\n<p><strong>14年3月</strong>开始在百米生活这家网络公司工作, 认识了很多同事, 学到了很多东西. (感恩同事)</p>\n<p><strong>14年5月</strong>由于工作需要, 在广州出差半月, 后又调回深圳, 直到8月份, 一直在开发及维护公司的路由广告管理系统, 在此期间, 学习了许多tornado和angularjs的相关知识, 获益良多! </p>\n<p><strong>14年10月</strong>开发了公司的路由器升级管理平台, 这个平台主要是路由器固件升级, 路由器脚本升级管理服务, PV和UV都是千万级的, 在数据库, 服务器方面也学到了很多.</p>\n<p><strong>14年11月</strong>发生一件大事件: 我当爸爸了! 有了女儿. 虽然到目前为止依然在为宝宝的名字发愁, 但依然发自内心的幸福. (感恩老婆大人)</p>\n<h4>展望2015</h4>',0,0,'2014-12-31 19:43:22.000000','2015-01-01 00:42:36.000000',1),(15,'AngularJS相关工具','[ AngularJS](http://angularjs.org) 是一组用来开发Web页面的框架、模板以及数据绑定和丰富UI组件。它支持整个开发进程，提供web应用的架构，无需进行手工DOM操作。 AngularJS很小，只有60K，兼容主流浏览器，与 jQuery 配合良好。\r\n\r\n数据绑定可能是AngularJS最酷最实用的特性。它能够帮助你避免书写大量的初始代码从而节约开发时间。一个典型的web应用可能包含了80%的代码用来处理，查询和监听DOM。数据绑定使得代码更少，你可以专注于你的应用。\r\n开源中国收录的 AngularJS 相关软件：\r\n\r\n**AngularJS 扩展：**\r\n*         [AngularJS URL 复制 Angular-bind-hash](http://www.oschina.net/p/angular-bind-hash)\r\n*         [angularjs开发协助工具 fex](http://www.oschina.net/p/fex)\r\n*         [angular-semantic-ui](http://www.oschina.net/p/angular-semantic-ui)\r\n*         [angular-semantic](http://www.oschina.net/p/angular-semantic)\r\n*         [angular-file-upload —— NG 文件上传扩展](http://www.oschina.net/p/angular-file-upload)\r\n*         [Satellizer](http://www.oschina.net/p/satellizer) —— AngularJS 的认证模块\r\n*         [纯 AngularJS 实现的 Bootstrap 组件 UI Bootstrap](http://www.oschina.net/p/ui-bootstrap)\r\n*         [基于 AngularJS 实现的自动完成的 UI 实现 angular-smarty](http://www.oschina.net/p/angular-smarty)\r\n*         [AngularJS 过滤器 AngularJS Emoji Filter](http://www.oschina.net/p/angularjs-emoji-filter)\r\n*         [AngularJS 表单构建器 angular-form-builder](http://www.oschina.net/p/angular-form-builder)\r\n*         [Foundation 的 AngularJS 版本 angular-foundation](http://www.oschina.net/p/angular-foundation)\r\n*         [AngularJS 的国际化和本地化模块 angular-translate](http://www.oschina.net/p/angular-translate)\r\n*         [AngularJS 的UI增强指令集 AngularUI](http://www.oschina.net/p/angularui)\r\n*         [AngularJS UI 组件 adapt-strap](http://www.oschina.net/p/adapt-strap)\r\n*         [AngularJS 扩展 gc-http-factory](http://www.oschina.net/p/gc-http-factory)\r\n*         [AngularJS 扩展 angular-data](http://www.oschina.net/p/angular-data)\r\n*         [AngularJS 扩展 angular-sails](http://www.oschina.net/p/angular-sails)\r\n*         [ng-view 的替代品 overmind.js](http://www.oschina.net/p/overmind-js)\r\n*         [angularSails](http://www.oschina.net/p/angularsails)\r\n*         [ngSea](http://www.oschina.net/p/ngsea)\r\n*         [ngCordova](http://www.oschina.net/p/ngcordova)\r\n*         [GoAngular](http://www.oschina.net/p/goangular)\r\n*         [AngularStrap](http://www.oschina.net/p/angularstrap)\r\n*         [AngularJS Eclipse Plugin](http://www.oschina.net/p/angularjs-eclipse)\r\n*         [bootstrap-AngularJS](http://www.oschina.net/p/bootstrap-angularjs)\r\n\r\n**其他**\r\n*         [Taiga —— Django+AngularJS 实现的项目管理](http://www.oschina.net/p/taiga)\r\n*         [ngMario —— 基于 AngularJS 实现的超级玛丽](http://www.oschina.net/p/ngmario)\r\n*         [CommaFeed —— 开源的 Google Reader 实现](http://www.oschina.net/p/commafeed)\r\n*         [测试运行工具 Protractor](http://www.oschina.net/p/protractor)\r\n*         [多人BLOG系统 ANS Angularjs NstormJs web framework v 0.4.2](http://www.oschina.net/p/anstorm)\r\n*         [AngularJS 基于类控制器的清理工具 Classy](http://www.oschina.net/p/classy)\r\n*         [TypeScript 类型定义 DefinitelyTyped](http://www.oschina.net/p/definitelytyped)\r\n*         [HTML5 移动应用框架 ionic](http://www.oschina.net/p/ionic)\r\n*         [RSS 阅读器 CommaFeed](http://www.oschina.net/p/commafeed)\r\n*         [mvvm模式构建组件库 RegularJS](http://www.oschina.net/p/regularjs)\r\n*         [社区网站系统 jsGen](http://www.oschina.net/p/jsgen)\r\n*         [协作式白板 DeadSimpleWhiteboard](http://www.oschina.net/p/deadsimplewhiteboard)\r\n*         [响应式操作面板 Responsive-Dashboard](http://www.oschina.net/p/responsive-dashboard)\r\n*         [Bootstrap 主题生成器 bootstrap-magic](http://www.oschina.net/p/bootstrap-magic)\r\n*         [Yeoman 的生成器 JHipster](http://www.oschina.net/p/jhipster)\r\n*         [静态项目排期表 plan.js](http://www.oschina.net/p/planjs)\r\n*         [错误信息记录服务 Victorique](http://www.oschina.net/p/victorique)\r\n\r\n**开源中国 AngularJS 优秀文章汇总：**\r\n\r\n*     [OSChina 第 56 期高手问答 —— AngularJS](http://www.oschina.net/question/1765084_195634)\r\n*     [2014 年最火的 21 个 JavaScript 框架](http://www.oschina.net/translate/21-best-javascript-frameworks-2014)\r\n*     [AngularJS - 下一个大框架](http://www.oschina.net/translate/angularjs-the-next-big-thing)\r\n*     [AngularJS 、Backbone.js 和 Ember.js 的比较](http://www.oschina.net/translate/javascript-framework-comparison)\r\n*     [JavaScript 的轻框架开发](http://www.oschina.net/translate/frameworkless-javascript)\r\n*     [AngularJS 开发者最常犯的 10 个错误](http://www.oschina.net/translate/top-10-mistakes-angularjs-developers-make)\r\n*     [AngularJS 的 IE 兼容性](http://www.oschina.net/translate/angularjs-ie-compatibility)\r\n*     [PhpStorm 对 AngularJS 的支持](http://www.oschina.net/translate/angularjs-support-in-phpstorm)\r\n*     [Angular 编程思想 ](http://www.oschina.net/translate/the-angular-way)\r\n*     [AngularJS Hello World 代码实例，只需 6 步](http://www.oschina.net/translate/angularjs-hello-world-code-example)\r\n*     [AngularJS 1.3 提升了 HTML 表单](http://www.oschina.net/translate/angular-13-html-forms)\r\n*     [AngularJS 1.3 支持使用 $digest() 循环实现延迟](http://www.oschina.net/translate/delaying-the-digest-cycle-in-angularjs)\r\n*     [AngularJS – 实现基于角色访问控制的 GUI](http://www.oschina.net/translate/angularjs-role-based-access-on-gui)\r\n*     [AngularJS —— 使用模块组织你的代码](http://www.oschina.net/translate/angularjs-organizing-your-code-with-modules)\r\n*     [AngularJS 的自定义指令](http://www.oschina.net/translate/delaying-the-digest-cycle-in-angularjs)\r\n*     [AngularJS 中的通信(发布订阅模式)](http://www.oschina.net/translate/hailing-all-frequencies-communicating-in-angularjs-with-the-pubsub-design-pattern)\r\n*     [AngularJS —— 使用 ngResource、RESTful APIs 和 Spring MVC 框架提交数据](http://www.oschina.net/translate/post-data-ngresource-restful-apis-spring-mvc)\r\n*     [AngularJS 的表单验证](http://www.oschina.net/translate/angularjs-form-validation)\r\n*     [AngularJS 提交表单的方式](http://www.oschina.net/translate/submitting-ajax-forms-the-angularjs-way)\r\n*     [AngularJS ui-router (嵌套路由)](http://www.oschina.net/translate/angularjs-ui-router-nested-routes)\r\n*     [AngularJS – 如何处理 XSS 漏洞](http://www.oschina.net/translate/angularjs-handle-xss-vulnerability-scenarios)\r\n*     [AngularJS 之 Factory vs Service vs Provider](http://www.oschina.net/translate/angularjs-factory-vs-service-vs-provider)\r\n*     [AngularJS 使用 Prerender.io 处理 SEO 的问题](http://www.oschina.net/translate/angularjs-seo-with-prerender-io)\r\n*     [AngularJS 使用 UI Router 实现表单向导](http://www.oschina.net/translate/submitting-ajax-forms-the-angularjs-way)\r\n*     [AngularJS 实现页面切换的一个可伸缩方法](http://www.oschina.net/translate/scalable-approach-page-transitions-angularjs)\r\n*     [AngularJS 中的友好 URL —— 移除URL 中的 #](http://www.oschina.net/translate/pretty-urls-in-angularjs-removing-the-hashtag)\r\n*     [使用 AngularJS 开发 2048 游戏](http://www.oschina.net/translate/building-2048-in-angularjs)\r\n*     [使用 AngularJS 创建的 RSS 阅读器 —— FreedReadR](http://www.oschina.net/translate/freedreadr-rss-reader-created-with-angularjs)\r\n*     [使用 AngularJS 开发一个大规模的单页应用（SPA）](http://www.oschina.net/translate/developing-a-large-scale-application-with-a-single)\r\n*     [使用 AngularJS 的路由和模板实现单页应用 (Single Page)](http://www.oschina.net/translate/single-page-apps-with-angularjs-routing-and-templating)\r\n*     [使用 Laravel 和 Angular 创建一个单页的评论应用](http://www.oschina.net/translate/create-a-laravel-and-angular-single-page-comment-application)\r\n*     [使用 AngularJS 开发的移动应用示例](http://www.oschina.net/translate/sample-mobile-application-with-angularjs)\r\n*     [如何使用 AngularJS 的 ngShow 和 ngHide](http://www.oschina.net/translate/how-to-use-ngshow-and-nghide)\r\n*     [如何自动跟踪 Angular.js 的异常](http://www.oschina.net/translate/track-angular-js-exceptions-automatically)\r\n*     [如何在 AngularJS 中对控制器进行单元测试](http://www.oschina.net/translate/how-to-unit-test-controllers-in-angularjs-without-setting-your-hair-on-fire)\r\n*     [AngularJS 生命周期管理、懒加载和其他高级 DI 技术](http://www.oschina.net/translate/angularjs-lifetime-management-lazy)\r\n*     [AngularJS 路由的安全性处理](http://www.oschina.net/translate/angularjs-routing-security)\r\n*     [AngularJS 应用中实现 JavaScript 动画效果](http://www.oschina.net/translate/javascript-animations-angularjs-applications)\r\n*     [AngularJS 性能优化二三事](http://www.oschina.net/translate/angularjs-performance-improvement)\r\n*     [超级简单的 AngularJS 应用 —— 实时创建 vCard](http://www.oschina.net/translate/super-simple-angularjs-web-app-realtime-vcard-crea)\r\n*     [改善用户体验的 3 个 AngularJS 指令](http://www.oschina.net/translate/better-ux-with-angularjs-directives)\r\n*     [创建 AngularJS 自定义过滤器，带自定义参数](http://www.oschina.net/translate/angularjs-filter-creating-custom-filter)\r\n*     [在 AngularJS 应用中通过 JSON 文件来设置状态](http://www.oschina.net/translate/setting-up-states-from-a-json-file-in-angularjs-applications)\r\n*     [在 AngularJS 应用中处理单选框和复选框](http://www.oschina.net/translate/handling-checkboxes-and-radio-buttons-in-angular-forms)\r\n*     [通过终端调试 AngularJS 应用](http://www.oschina.net/translate/angularjs-console)\r\n*     [让你的 AngularJS 应用动起来 ： ngView](http://www.oschina.net/translate/animating-angularjs-apps-ngview)\r\n*     [angular-smarty ： 一个 AngularJS 的自动完成 UI 实现](http://www.oschina.net/translate/autocomplete-ui-in-angularjs)\r\n*     [Meteor vs Angular](http://www.oschina.net/translate/meteor-vs-angular)\r\n*     [AngularJS 通过 CORS 实现跨域方案](http://my.oschina.net/blogshi/blog/303758)\r\n*     [Angular 实现权限控制 - 基于RBAC](http://my.oschina.net/blogshi/blog/300595)\r\n*     [不可错过的 AngularJS 应用技巧](http://my.oschina.net/blogshi/blog/293631)\r\n*     [Angularjs 总结 (Form)](http://my.oschina.net/felumanman/blog/330624)\r\n*     [AngularJS 自定义控件](http://my.oschina.net/ilivebox/blog/289670)\r\n*     [Angular 项目构建指南 - 不再为 Angular 构建而犹豫不决](http://my.oschina.net/blogshi/blog/280400)\r\n*     [整合 jQuery Mobile+AngularJS 经验谈](http://my.oschina.net/trumanspace/blog/207449)\r\n*     [AngularJS的post请求，SpringMVC后台接收不到参数值的解决方案](http://my.oschina.net/buwei/blog/191640)\r\n*     [用 karma 测试 Angularjs 应用](http://my.oschina.net/zhaoxiaoben/blog/161458)\r\n*     [通过Express4构建Restful API服务器 - 结合AngularJS前后端分离开发](http://my.oschina.net/blogshi/blog/349044)\r\n*     [通过路由管理视图间切换 - AngularJS路由解析](http://my.oschina.net/blogshi/blog/347114)\r\n*     [AngularJS SEO 简易教程](http://my.oschina.net/tommyfok/blog/348259)','<p><a href=\"http://angularjs.org\"> AngularJS</a> 是一组用来开发Web页面的框架、模板以及数据绑定和丰富UI组件。它支持整个开发进程，提供web应用的架构，无需进行手工DOM操作。 AngularJS很小，只有60K，兼容主流浏览器，与 jQuery 配合良好。</p>\n<p>数据绑定可能是AngularJS最酷最实用的特性。它能够帮助你避免书写大量的初始代码从而节约开发时间。一个典型的web应用可能包含了80%的代码用来处理，查询和监听DOM。数据绑定使得代码更少，你可以专注于你的应用。\n开源中国收录的 AngularJS 相关软件：</p>\n<p><strong>AngularJS 扩展：</strong>\n<em>         <a href=\"http://www.oschina.net/p/angular-bind-hash\">AngularJS URL 复制 Angular-bind-hash</a>\n</em>         <a href=\"http://www.oschina.net/p/fex\">angularjs开发协助工具 fex</a>\n<em>         <a href=\"http://www.oschina.net/p/angular-semantic-ui\">angular-semantic-ui</a>\n</em>         <a href=\"http://www.oschina.net/p/angular-semantic\">angular-semantic</a>\n<em>         <a href=\"http://www.oschina.net/p/angular-file-upload\">angular-file-upload —— NG 文件上传扩展</a>\n</em>         <a href=\"http://www.oschina.net/p/satellizer\">Satellizer</a> —— AngularJS 的认证模块\n<em>         <a href=\"http://www.oschina.net/p/ui-bootstrap\">纯 AngularJS 实现的 Bootstrap 组件 UI Bootstrap</a>\n</em>         <a href=\"http://www.oschina.net/p/angular-smarty\">基于 AngularJS 实现的自动完成的 UI 实现...</a></p>',0,2,'2015-01-01 22:53:09.000000','2015-01-29 18:00:47.000000',1),(16,'A Better Way to Learn AngularJS','##Introduction\r\n\r\nCongratulations on taking the plunge!\r\n\r\nThis AngularJS course is built with the intent of exposing you to the best available resources on each Angular topic. Our desire is to present these topics richly, and from a variety of vantage points, in order to afford you a more complete perspective on them.\r\n\r\nThis course is accompanied by AngularJS Tutorial: Learn to Build Modern Web Apps with MEAN.\r\n\r\nThe learning curve of AngularJS can be described as a hockey stick. Getting started with apps featuring basic functionality is delightfully easy. However, building more complex apps often require understanding Angular\'s inner workings. Failure to do so will cause development to become awkward and cumbersome.\r\n\r\nWith AngularJS, the \"Ready, Fire, Aim\" learning methodology of duct taping together a handful of tutorials and a cursory glance through the documentation will lead to confusion and frustration. This curriculum is designed to properly guide you through each of the key Angular concepts thoroughly with a broad exposure to high quality content. With your eventual mastery of AngularJS, you will be able to fluently and efficiently construct large-scale applications.\r\n\r\n**Prerequisites**\r\n\r\n*     Moderate knowledge of HTML, CSS, and JavaScript\r\n*     Basic Model-View-Controller (MVC) concepts\r\n*     The Document Object Model (DOM)\r\n*     JavaScript functions, events, and error handling\r\n* \r\n**Resources**\r\n\r\nSince AngularJS is still in its infancy relative to other JavaScript frameworks, the number of encyclopaedic resources on it is still insufficient. Therefore, the curriculum will employ a healthy number of excellent blogs in order to offer a more meaty perspective on respective topics.\r\n\r\n*     Required Resources\r\n    *         AngularJS - O\'Reilly Media (available on Amazon)\r\n    *         John Lindquist\'s egghead.io\r\n    *         AngularJS docs\r\n*     Supplemental Resources\r\n    *         Ben Nadel blog\r\n    *         OneHungryMind\r\n    *         year of moo\r\n    *         Bruno Scopelliti blog\r\n\r\n##Part 1. Kicking the Tires\r\n\r\nAngularJS is not a library.\r\n\r\nRather, it is a JavaScript framework that embraces extending HTML into a more expressive and readable format. It allows you to decorate your HTML with special markup that synchronizes with your JavaScript leaving you to write your application logic instead of manually updating views. Whether you\'re looking to augment existing JavaScript applications or harness the full power of the framework to create rich and interactive SPA\'s, Angular can help you write cleaner and more efficient code.\r\nFilling the Tank\r\n\r\nWe\'ve found that the egghead.io videos are the best starting resource available, so every chapter will lead off with them. The transcribed screencasts and source code are provided along with the videos. We encourage you to follow along with them, as they make the video content much more readily digestible.\r\n\r\nAs good as the egghead videos are, they should serve only as an introductory resource. Excerpts from the O\'Reilly AngularJS book and the angularjs.org documentation complement the videos as the broader and more thorough source, and should be treated as the main reference for the course.\r\nAdjusting Your Mirrors\r\n\r\nWhen descending upon an entirely new topic, it is important to frame the topic correctly before diving into the minutia.\r\n\r\nRead the following two entries in the AngularJS guide docs, they will give you a good idea of what you\'re about to get into. Don\'t worry about picking up on every aspect of the topics they glaze over, all of these will be covered thoroughly in subsequent lessons.\r\n\r\nAngularJS Overview\r\n\r\nIntroduction to AngularJS\r\nRevving the Engine\r\n\r\nBefore we get on with it, we recommend this post:\r\n\r\nThings I Wish I Were Told About Angular.js\r\n\r\nIt goes over a handful of topics that might be helpful in building the appropriate mental models while consuming the Angular curriculum. Some, probably most, of the terms will bounce right off you until you have gone through that section of the course, but it should provide valuable context when approaching a new topic.\r\n\r\nNow it\'s off to the races!\r\n\r\n##Part 2: Taking It for a Spin\r\n\r\nOne of the awesome things about AngularJS is its usability right out of the box. Very little information about how the framework operates is needed to get up and running with your first application. With that in mind, go ahead and tear through the first five egghead videos:\r\n\r\nAngularJS - Binding\r\n\r\nAngularJS - Controllers\r\n\r\nAngularJS - The Dot\r\n\r\nAngularJS - Sharing Data Between Controllers\r\n\r\nAngularJS - Defining a Method on the Scope\r\nReadings\r\n\r\nWe\'re going to crack the cover of AngularJS for the first time.\r\n\r\nRead all of Chapter 1. Introduction to Angular JS\r\n\r\nRead from the beginning of Chapter 2. Anatomy of an AngularJS Application to the section \"Templates and Data Binding\"\r\nAngularJS Documentation\r\n\r\nThe following set of guides will serve to reinforce many of the topics just covered, and explain some new ones in detail:\r\n\r\nBootstrap\r\n\r\nExpressions\r\n\r\nForms\r\n\r\nData Binding In Angular\r\n\r\n##Part 3: Filters\r\n\r\nFilters are a simple but powerful tool in Angular, used primarily to format expressions in bindings in views and templates.\r\n\r\nThese three egghead videos serve to cover the basics nicely:\r\n\r\nAngularJS - Filters\r\n\r\nAngularJS - ngFilter\r\n\r\nAngularJS - Built-In Filters\r\nReadings\r\n\r\nIn Chapter 2: \"Anatomy of an AngularJS Application\", read the section \"Formatting Data with Filters\"\r\nAngularJS Documentation\r\n\r\nFinally, the Angular guides offer a bit more depth on filters:\r\n\r\nAngular Filters\r\n\r\n##Part 4. Directives\r\n\r\nNow you\'re really getting into the meat of what makes Angular special. Directives are certainly one of the most important facets of the framework, and as such, this is one of the biggest sections of the course. The egghead videos do a superb job covering many of the features and use cases of directives:\r\n\r\nAngularJS - First Directive\r\n\r\nAngularJS - Directive Restrictions\r\n\r\nAngularJS - Basic Behaviors\r\n\r\nAngularJS - Useful Behaviors\r\n\r\nAngularJS - Directives Talking to Controllers\r\n\r\nAngularJS - Directive to Directive Communication\r\n\r\nAngularJS - Transclusion Basics\r\n\r\nAngularJS - Components and Containers\r\n\r\nAngularJS - Directive Communication\r\nReadings\r\n\r\nThere\'s a lot to digest in those videos, the text will help to clarify:\r\n\r\nChapter 6: Directives - Read from the beginning of the chapter up to and including: In the section \"API Overview\": Subsection, \"Compile and Link Functions\"\r\n\r\nAlso, in section \"API Overview\": Read subsection \"Controllers\"\r\nAngularJS Documentation\r\n\r\nTo wrap up, the Angular guides offer a bit more detail on the specifics of some aspects of directives:\r\n\r\nHTML Compiler\r\n\r\nDirectives\r\n\r\n##Part 5: Scope\r\n\r\nInterestingly, scopes are dramatically underrepresented in mainstream Angular resources compared to how important they are. A solid understanding of scope mechanics is essential when scaling applications, as well as writing modular and testable code. Fortunately, the egghead videos do it justice:\r\n\r\nAngularJS - Understanding Isolate Scope\r\n\r\nAngularJS - Isolate Scope \"@\"\r\n\r\nAngularJS - Isolate Scope \"=\"\r\n\r\nAngularJS - Isolate Scope \"&\"\r\n\r\nAngularJS - Isolate Scope Review\r\nReadings\r\n\r\nChapter 6: Directives - In the section \"API Overview\": Read subsection \"Scopes\"\r\nAngularJS Documentation\r\n\r\nFinally, check out the Angular docs for an in-depth analysis:\r\n\r\nScopes\r\n\r\n##Part 6: Application Structure and Organization\r\n\r\nAt this point, it\'s important you step back to rethink and examine Angular as a whole. It\'s easy to mentally paint yourself into a corner when learning a new language or framework, and a great way to combat this is by exposing yourself to alternate ways of thinking, and viewing the bigger picture.\r\n\r\nWatch these egghead videos to get started on thinking about alternative application structure:\r\n\r\nAn Alternative Approach to Controllers\r\n\r\nThinking Differently About Organization\r\n\r\nExperimental \"Controller as\" Syntax\r\nReadings\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": Read the section \"Organizing Dependencies with Modules\"\r\nAngularJS Documentation\r\n\r\nRead the AngularJS page on Modules\r\n\r\n##Part 7: The View and the DOM\r\n\r\nThis section is a bit of a hybrid of seemingly unrelated topics, DOM manipulation, $watch, and view services, but they are closely related, as they all live in close proximity around the application\'s views in implementation.\r\n\r\nThe egghead videos do a superb job of tying these topics together:\r\n\r\nAngularJS - angular.element\r\n\r\nAngularJS - $index, $event, $log\r\nReadings\r\n\r\nThese book sections will give additional depth on these subjects:\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": in section \"Templates and Data Binding\": Read \"Observing Model Changes with $watch\"\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": in section \"Templates and Data Binding\": Read \"Performance Considerations in $watch\"\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": Read section \"Changing the DOM with Directives\"\r\n\r\nIn Chapter 6. \"Directives\": In the section \"API Overview\": Read subsection \"Manipulating DOM Elements\"\r\n\r\nAdditionally, we\'ve put together a section that goes into further detail on DOM manipulation:\r\n\r\nRead jqLite, angular.element, and the DOM\r\nAngularJS Documentation\r\n\r\nWorking with CSS in Angular\r\n\r\n##Part 8: Templates\r\n\r\nDespite this being a short section, understanding Angular templates is critical to being able to build applications effectively.\r\n\r\nThis handful of egghead videos is an excellent primer on the subject:\r\n\r\ntemplateUrl\r\n\r\n$templateCache\r\nReadings\r\n\r\nThe AngularJS book has a terrific and comprehensive section detailing templates:\r\n\r\nIn Chapter 6. \"Directives\": in the section \"API Overview\": Read subsection \"The Directive Definition Object\"\r\nAngularJS Documentation\r\n\r\nThe documentation guide also has a quick but quality piece on Angular templates:\r\n\r\nAngular Templates\r\n\r\n##Part 9: Routing\r\n\r\nAngular routing, while not unduly complicated, does introduce a large number of concepts all at once. It also will handle the lion\'s share (or close to it) of logic for many single page applications. It should then be no surprise that this is the largest section of the course.\r\n\r\nThe egghead videos appropriately devote a great deal of podium time to routing:\r\n\r\nAngularJS - ng-view\r\n\r\nAngularJS - The config function\r\n\r\nAngularJS - $routeProvider api\r\n\r\nAngularJS - $routeParams\r\n\r\nAngularJS - redirectTo\r\n\r\nAngularJS - Promises\r\n\r\nAngularJS - Resolve\r\n\r\nAngularJS - Resolve conventions\r\n\r\nAngularJS - Resolve $routeChangeError\r\n\r\nAngularJS - Directive for Route Handling\r\n\r\nAngularJS - Route Life Cycle\r\nReadings\r\n\r\nSome of the concepts introduced here are probably still fuzzy, and the text does an excellent job of clearing them up:\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": Read the section \"Changing Views with Routes and $location\"\r\n\r\nIn Chapter 5. \"Communicating with Servers\": Read the section \"The $q and the Promise\"\r\n\r\nIn Chapter 5. \"Communicating with Servers\": Read the section \"Response Interception\"\r\n\r\nIn Chapter 7. \"Other Concerns\": Read the section \"$location\"\r\nAngularJS Documentation\r\n\r\nFinally, the Angular docs have a great section on the $location service:\r\n\r\nUsing $location\r\n\r\n##Part 10: Examples and Analysis\r\n\r\nAt this point, most of the core Angular topics have been covered, and it\'s appropriate to get into some examples.\r\n\r\negghead has a good, though fairly trivial, example, \"Zippy\":\r\n\r\nBuilding Zippy\r\nReadings\r\n\r\nNext, the O\'Reilly text has a great, chapter-long example that is terrific to work through:\r\n\r\nRead all of Chapter 4. \"Analyzing an AngularJS App\"\r\nAngularJS Documentation\r\n\r\nLast, we recommend working through the AngularJS documentation tutorial. The format they present it in is a bit too hands-off to be exceedingly helpful, so we recommend playing around with it and modifying it to get the most out of the exercise.\r\n\r\nAngularJS Tutorial\r\n\r\n##Part 11: Under the Hood\r\n\r\nAt this juncture, it\'s appropriate to dive into the niceties of AngularJS. In order to truly master the framework, hand-wavy arguments for how things work aren\'t sufficient anymore. You need to get into the nitty-gritty of what makes Angular tick.\r\n\r\nThese egghead videos offer an excellent primer for some increasingly advanced topics:\r\n\r\n$scope vs. scope\r\n\r\nProviders\r\n\r\nInjectors\r\n\r\nngmin\r\nReadings\r\n\r\nFollowing this, the book has a handful of sections detailing these and other new framework topics:\r\n\r\nIn Chapter 7. \"Other Concerns\": in the section \"AngularJS Module Methods\": Read the section \"Communicating Between Scopes with $on, $emit, and $broadcast\"\r\n\r\nAdditionally,\r\n\r\nRead this in-depth analysis of $digest\r\nAngularJS Documentation\r\n\r\nFinally, there are a healthy number of Angular documentation guide pages that really get down into dissecting Angular. These are some of the best resources on Angular\'s innards out there, make sure and fully take them in:\r\n\r\nConceptual Overview\r\n\r\nDependency Injection\r\n\r\nAngular Services\r\n\r\n##Part 12: Development Environment and Testing\r\n\r\nMuch of Angular\'s design is built around being highly testable. Central to this is the widespread utilization of dependency injection, which you read about in Chapter 11. Not only this, but with tools like Yeoman available, a robust test suite becomes realistic and manageable.\r\n\r\nThere is only one egghead video on testing, and it gives a simplistic overview of a unit test on a filter. (It\'s worth mentioning that the Testacular test runner is now called \'Karma\'):\r\n\r\nAngularJS - Testing Overview\r\nReadings\r\n\r\nWe\'d like to get a bit more in depth than that, so next read all of Ch.3 in O\'Reilly. This chapter focuses on Yeoman, which is a set of productivity tools that make Angular a lot more digestible: Yo, a scaffolding tool, Grunt, the build and testing tool, and Bower, the package management tool.\r\n\r\nRead Chapter 3: Developing in AngularJS\r\nMeet the Gang\r\n\r\nA person new to testing might be a little overwhelmed with these concepts and how they play together in the world of testing. This reference should help out:\r\n\r\n*     Yeoman has the scaffolding tool yo that generates an application skeleton to start out with, complete with things like Bootstrap or a pre-configured testing setup. The scaffold of the application is different in many ways to the angular-seed scaffold, but it is important to note that they both use Karma and Jasmine in the same ways.\r\n*     angular-seed is a ready-to-eat AngularJS scaffold available on their github with directory structure and testing amenities pre-prepared. Testing this application is accomplished by running a standalone Karma test server.\r\n*     Grunt is the testing tool used in Yeoman, but it is used as a wrapper for Karma.\r\n*     Karma is the actual test runner that is used to test AngularJS. It can be used standalone from Grunt. Karma circumvents testing inconsistencies across browsers, which would happen with things like PhantomJS, by actually launching a browser and running the tests in it.\r\n*     Jasmine is the testing framework which is used for unit tests by default in Karma. Angular E2E tests with Karma don\'t and can\'t use the Jasmine adapter, although E2E tests use very similar syntax with the Angular Scenario Runner. This blog post does a fine job of going through how to actually author some Jasmine tests, and gives some excellent examples.\r\n\r\nAngularJS Documentation\r\n\r\nNow that we have fleshed out how testing should generally go, let\'s take a look at the Angular docs on testing. These are going to give some more information on how to think about Angular testing. While they are a good resource to have, regrettably, some of them are not yet complete.\r\n\r\nUnit Testing\r\n\r\nE2E Testing\r\nMore Readings and Examples\r\n\r\nNow, read through How to Test an AngularJS Directive. This blog post goes through setting up Yeoman, generating a very simple sample application, writing tests for a directive, and running tests using Karma.\r\n\r\nFinally, go through one of the better Angular testing resources to date, Full-Spectrum Testing with AngularJS and Karma. This is an outstanding resource that has fantastic explanations and demonstrations of testing with Grunt and Karma. Included are examples for each of the major testing categories in Angular. It also adds the intermediate Midway test paradigm to the fray, which is a compelling convenience if you\'re trying to streamline authoring tests.\r\n\r\n##Part 13. $http and Server Interaction\r\n$http\r\n\r\nIn the face of a slew of new concepts, it\'s important to not overthink the $http service.\r\n\r\n$http can be thought of as a wrapper to make requests to external HTTP entities with the browser\'s XHR object or JSONP. Because of the nature of these requests, it employs callbacks afforded to it by the $q defer/promise API.\r\n\r\nMore generally, $http is used predominantly for AJAX requests. Its API exists as you would expect, with the ability to make GET, POST, PUT, DELETE, HEAD, and JSONP requests. You are responsible for making these calls manually, and for constructing how to handle the objects they return, and the callbacks for various outcomes that might occur with an asynchronous request.\r\n$resource\r\n\r\nAngularJS offers another level abstractions above $http, the $resource service. This is a convenience offered to you when dealing with external resources that are RESTful. It wraps the $http service, which is pointed at a singular endpoint, and presents a REST API on the $resource to handle RESTful requests. The $resource get() method returns a Resource object, which can then be modified with CRUD (or custom defined) operations invoked upon it.\r\nAuthentication\r\n\r\nSince services are singletons, and can be injected pretty much anywhere, they are perfect for use in authentication logic. There is a diverse spectrum of implementations on how exactly to construct the service, but they are all variations on basically the same theme.\r\n```js\r\nmyApp.factory(\'AuthenticationService\', function() {\r\n  var current_user;\r\n  return {\r\n    signIn: function() {\r\n      // check password on server, get user data, unique token, etc.\r\n    },\r\n    signOut: function() {\r\n      // clear current_user data, unset logged in status, etc.\r\n    },\r\n    isSignedIn: function() {\r\n      // logic to check if current user has signed in\r\n    },\r\n    currentUser: function() {\r\n      // return the current_user object, or handle if the user is not signed in\r\n    }\r\n  };\r\n});\r\n```\r\nSince it is a service, you can inject this to your heart\'s desire, set watchers on its methods, use the user data in views, handle routing conditionals based on signin status, etc. Since all this data is still just freely living in the AngularJS framework, you still need to exercise the same security precautions when performing server transactions involving authentication.\r\n\r\nRead this blog entry, Deal with users authentication in an AngularJS web app. It offers excellent insight into service-based Angular authentication.\r\nReadings\r\n\r\nThe text offers a wealth of information on interacting with servers:\r\n\r\nIn Chapter 2. \"Anatomy of an AngularJS Application\": in the section \"Changing Views with Routes and $location\": Read the subsection \"Talking to Servers\"\r\n\r\nRead all of Chapter 5. \"Communicating with Servers\"\r\n\r\nIn Chapter 8. \"Cheatsheet and Recipes\": Read the section \"Working with Servers and Login\"\r\nAngularJS Documentation\r\n\r\nFinally, check out the Angular API docs on $http and $resource:\r\n\r\nThe $http service\r\n\r\nThe $resource service','<h2>Introduction</h2>\n<p>Congratulations on taking the plunge!</p>\n<p>This AngularJS course is built with the intent of exposing you to the best available resources on each Angular topic. Our desire is to present these topics richly, and from a variety of vantage points, in order to afford you a more complete perspective...</p>',0,2,'2015-01-13 12:47:50.000000','2015-01-29 18:00:40.000000',1),(17,'Python and Flask Are Ridiculously Powerful','As a developer, I sometimes forget the power I wield. It\'s easy to forget that, when something doesn\'t work the way I\'d like, I have the power to change it. Yesterday, I was reminded of this fact as I finally got fed up with the way payments are processed for my book. After being unhappy with the three different digital-goods payment processors I\'ve used since the book came out, I took two hours and wrote my own solution using Python and Flask. That\'s right. Two hours. It\'s now powering my book payment processing and the flow is so incredibly simple that you can buy the book and begin reading it in 20 seconds.\r\n\r\nRead on to find out how I created my own digital goods payment solution in an evening.\r\n\r\n**Payment Processor Purchase Problems**\r\n\r\nWhen I began selling the book, I used a combination of two services (one for credit cards and another for PayPal). Eventually, I found a single processor capable of supporting both. I\'ve never been happy, though, with any of them. The most recent processor required users to create an account on the merchant\'s system and enter their mailing address (though there was no use for it).\r\n\r\nAdditionally, I\'ve had a terrible time trying to get Google Analytics to properly track visitor flow through the entire visit, including the checkout process. I always sensed that, if I were able to get that working and run A/B tests on my book page, I could greatly increase sales. Without proper tracking however, I was out of luck.\r\n\r\nLastly, sending out book updates is terribly time-consuming using three different processors. None supported updates well, and I wanted a one-click solution to sending out book updates. Finding a service that supported that was basically impossible.\r\n\r\n**Oh Yeah, I\'m a Programmer**\r\n\r\nAfter receiving an email from a customer yesterday about how difficult the payment process was and informing me that I\'m likely losing sales because of it, I got fed up. I decided to roll my own digital goods management solution. It needed the following work-flow:\r\n\r\n>      When a customer clicks the \"Buy Now\" button, they should be asked to enter only their email address and credit card info, click \"Confirm\", and be taken to a unique URL to download the book (generated specifically for that purchase). An email should be sent to the customer containing the generated URL (in case the customer needs to re-download the book). There should be a limit to the number of times (5) they can download it. The purchase and customer information should be stored in a database, and sending out updates should be a one-command affair.\r\n\r\nClearly, it\'s not that complicated. The trickiest part would be dynamically generating a unique URL that linked to the proper version of the book. Everything else seemed straightforward.\r\n\"Flask to the Rescue,\" or \"A Digital Goods Payment Solution in 100 Lines of Code\"\r\n\r\nSpoiler alert: the resulting application is exactly 100 lines of code. Flask is a great choice for a web application of this size. It doesn\'t require a ton of boilerplate (cough like Django cough) but has good plugin support. Bottle would have been another fine choice, but I\'ve used Flask more recently, so that\'s what I chose.\r\n\r\nTo begin, I needed to decide how I was going to store the customer and purchase information. I decided to use [SQLAlchemy](http://www.sqlalchemy.org/), since I\'ve got a lot of experience with it because of [sandman](http://www.sandman.io/). Flask has a plugin, Flask-SQLAlchemy, that makes using the two together easy. Since I don\'t need anything too fancy database-wise, I chose SQLite as my database back-end.\r\n\r\nHaving made these decisions, I created a file named app.py and created the following models:\r\n```python\r\nclass Product(db.Model):\r\n    __tablename__ = \'product\'\r\n    id = db.Column(db.Integer, primary_key=True)\r\n    name = db.Column(db.String)\r\n    file_name = db.Column(db.String)\r\n    version = db.Column(db.String)\r\n    is_active = db.Column(db.Boolean, default=True)\r\n    price = db.Column(db.Float)\r\n\r\nclass Purchase(db.Model):\r\n    __tablename__ = \'purchase\'\r\n    uuid = db.Column(db.String, primary_key=True)\r\n    email = db.Column(db.String)\r\n    product_id = db.Column(db.Integer, db.ForeignKey(\'product.id\'))\r\n    product = db.relationship(Product)\r\n    downloads_left = db.Column(db.Integer, default=5)\r\n```\r\nAfter adding the five different versions of the book to the database (I created a populate_db.py file and added them as SQLAlchemy models), I needed to decide how I was going to actually process payments. Luckily, Stripe makes accepting credit card payments stupidly easy, and I already had an account with them. Their \"checkout.js\" solution creates a form and button on your page. When the button is clicked, a simple and attractive payment overlay is displayed.\r\n\r\n![](http://www.jeffknupp.com/images/payment.jpg)\r\n\r\nThe action attribute of the form points to the page on your site that the user should be taken to after a successful payment. I added 5 of these buttons to my book sales site and added another hidden form field to contain the product_id (an integer between 1 and 5) of the product that was purchased.\r\n**Processing Payments**\r\n\r\nClearly, I needed an endpoint in my application to process a successfully charged card. I added the following function to do so:\r\n```python\r\n@app.route(\'/buy\', methods=[\'POST\'])\r\ndef buy():\r\n    stripe_token = request.form[\'stripeToken\']\r\n    email = request.form[\'stripeEmail\']\r\n    product_id = request.form[\'product_id\']\r\n    product = Product.query.get(product_id)\r\n    try:\r\n        charge = stripe.Charge.create(\r\n                amount=int(product.price * 100),\r\n                currency=\'usd\',\r\n                card=stripe_token,\r\n                description=email)\r\n    except stripe.CardError, e:\r\n        return \"\"\"<html><body><h1>Card Declined</h1><p>Your chard could not\r\n        be charged. Please check the number and/or contact your credit card\r\n        company.</p></body></html>\"\"\"\r\n    print charge\r\n    purchase = Purchase(uuid=str(uuid.uuid4()),\r\n            email=email,\r\n            product=product)\r\n    db.session.add(purchase)\r\n    db.session.commit()\r\n    message = Message(\r\n            subject=\'Thanks for your purchase!\',\r\n        sender=\"jeff@jeffknupp.com\", \r\n        html=\"\"\"<html><body><h1>Thanks for buying Writing Idiomatic Python!</h1>\r\n<p>If you didn\'t already download your copy, you can visit \r\n<a href=\"http://buy.jeffknupp.com/{}\">your private link</a>. You\'ll be able to\r\ndownload the file up to five times, at which point the link will\r\nexpire.\"\"\".format(purchase.uuid),\r\n        recipients=[email])\r\n    with mail.connect() as conn:\r\n        conn.send(message)\r\n    return redirect(\'/{}\'.format(purchase.uuid))\r\n```\r\nAs you can see, I took a few shortcuts with the code (since I was coding angrily...). First, I have inline HTML to be returned from an unsuccessful charge and for the email that is sent upon purchase. That should be extracted to a global variable or, better, contained in a separate file. Second, I didn\'t do any error checking when creating the Purchase object. But really, the only thing that could go wrong is trying to insert a duplicate uuid, which doesn\'t concern me due to the probability of it happening (read: vanishingly small).\r\n\r\nYou can see I\'m using a mail object. This comes from the Flask-Mail package, which makes sending email painless. I simply set it up to use GMail as the mail server and everything Just Worked.\r\n\r\n**OK, Now Give Me The Book**\r\n\r\nNow that I had the payment portion sorted out, I needed to add an endpoint for initiating downloads after a purchase. Since I\'m using UUIDs as a primary key, I can also use them as the URL for the download endpoint. When someone hits the endpoint, I simply need to check that the UUID contained in the URL matches the UUID of a purchase in the database. If it does, serve the book file and decrement the downloads_left attribute. If not, return a 404 error. Here\'s the code I came up with:\r\n```python\r\n@app.route(\'/<uuid>\')\r\ndef download_file(uuid):\r\n    purchase = Purchase.query.get(uuid)\r\n    if purchase:\r\n        if purchase.downloads_left <= 0:\r\n            return \"\"\"<html><body><h1>No downloads left!</h1><p>You have\r\n            exceeded the allowed number of downloads for this file. Please email\r\n            jeff@jeffknupp.com with any questions.</p></body></html>\"\"\"\r\n        purchase.downloads_left -= 1\r\n        db.session.commit()\r\n        return send_from_directory(directory=\'files\',\r\n                filename=purchase.product.file_name, as_attachment=True)\r\n    else:\r\n        abort(404)\r\n```\r\nVery straightforward. Using the UUID as a URL variable, search for a purchase. If it exists, just check that there are still downloads left and serve the file attribute of the purchase\'s product. Otherwise, here\'s a 404 for you.\r\n\r\nLastly, I needed to add a test endpoint that would allow me to simulate the purchase process. Here\'s the code for that endpoint and the portion that runs the app:\r\n\r\n```python\r\n@app.route(\'/test\')\r\ndef test():\r\n    return \"\"\"<http><body><form action=\"buy\" method=\"POST\">\r\n<script\r\n    src=\"https://checkout.stripe.com/checkout.js\" class=\"stripe-button\"\r\n    data-key=\"pk_test_w3qNBkDR8A4jkKejBmsMdH34\"\r\n    data-amount=\"999\"\r\n    data-name=\"jeffknupp.com\"\r\n    data-description=\"Writing Idiomatic Python 3 PDF ($9.99)\">\r\n</script>\r\n<input type=\"hidden\" name=\"product_id\" value=\"2\" />\r\n</form>\r\n</body>\r\n</html>\r\n\"\"\"\r\nif __name__ == \'__main__\':\r\n    sys.exit(app.run(debug=True))\r\n```\r\n**With Great Power Comes... Moar Power!**\r\n\r\nI was actually surprised at how quickly and easily I got this working. The entire application is a single file containing 100 lines of code. And it replaces a very important service I use everyday, one with which I\'ve never been happy. Finally, I can track purchases without issue, which I\'m convinced will increase sales.\r\n\r\nIt\'s nice to be reminded that, as developers, we have a lot of power to shape our interactions with the digital world. I, for one, often forget that if I don\'t like the way some piece of technology works, I can change it. From automating mechanical tasks like data entry to automatically sorting and organizing email, developers have the power to simplify their everyday tasks.\r\n\r\nHaving libraries like Flask in your tool belt is crucial to solving these sorts of problems, though. As you progress as a developer, you should be building up a set of tools that work for \"core\" problem domains. Flask is a perfect example, since needing to throw together a web app is a common problem.\r\n\r\nAnd of course, sharing what you made is critical as well. I would be remiss if I created something useful for myself and didn\'t share it with others. \"Sharing\" means more than \"putting in a public GitHub repo\". You also need to let people know about it. From mailing lists to forums to personal blogs, there\'s no shortage of avenues for making others aware of what you\'ve created. I always try to give back to the community, since I\'ve gained so much from it.','<p>As a developer, I sometimes forget the power I wield. It\'s easy to forget that, when something doesn\'t work the way I\'d like, I have the power to change it. Yesterday, I was reminded of this fact as I finally got fed up with the way payments...</p>',0,2,'2015-01-13 14:03:40.000000','2015-01-29 18:00:24.000000',1),(18,'一切都是属性(python)','对于菜鸟来说,python中如何创建类(Class)应该是很简单的,比如:\r\n```python\r\nclass Foo(object): \r\n    pass\r\n```\r\n这就是python的类(很无聊对吧?). 我们也可以实例化这个类:\r\n```python\r\nf = Foo()\r\n```\r\n实际上, 我们如果输出这个实例的类型,会发现它就是个类:\r\n```python\r\n>>> type(f)\r\n<class \'__main__.Foo\'>\r\n```\r\n现在, 我们已经创建了Foo类并且实例化了一个对象f. 但是在实际应用中这肯定不够, 比如我们想定义对象的变量. 我们知道可以写__init__函数(注意这个函数是在new一个对象后才执行的), 比如:\r\n```python\r\nclass Foo(object):\r\n    def __init__(self, x, y):\r\n      self.x = x\r\n      self.y = y\r\n\r\n>> f = Foo(100, \'abc\')\r\n\r\n>>> f.x\r\n100\r\n>>> f.y\r\n\'abc\'\r\n```\r\n表面上看, 上面的例子是对f这个F类对象设置了x,y变量.但实际上, 类变量和实例变量在操作上是没有区别的. 到底该如何看待python中的类变量和实例变量呢?\r\n\r\n关键在于Foo类中的__init__方法, 我们添加了一个新属性叫self, 它指向我们新创建的实例对象(f). 可以说属性是python的一个基本属性. 只要理解了属性, 那就对python有了更深入的理解.\r\n\r\npython中的每个对象都有属性. 你可以通过python的内置函数dir来查看. 比如:\r\n```python\r\n>>> s = \'abc\'\r\n>>> len(dir(s))\r\n71\r\n>>> dir(s)[:5]\r\n[\'__add__\', \'__class__\', \'__contains__\', \'__delattr__\', \'__doc__\']\r\n\r\n>>> i = 123\r\n>>> len(dir(i))\r\n64\r\n>>> dir(i)[:5]\r\n[\'__abs__\', \'__add__\', \'__and__\', \'__class__\', \'__cmp__\']\r\n\r\n>>> t = (1,2,3)\r\n>>> len(dir(t))\r\n32\r\n>>> dir(t)[:5]\r\n[\'__add__\', \'__class__\', \'__contains__\', \'__delattr__\', \'__doc__\']\r\n```\r\n由此可以看出, python中的基本数据类型(像int, str等)都有很多属性. 我们只是罗列出了前5个而已, 有兴趣的童鞋可以自己实验.\r\n\r\nThe thing is, these attribute names returned by “dir” are strings. How can I use this string to get or set the value of an attribute? We somehow need a way to translate between the world of strings and the world of attribute names.\r\n我们发现上面例子中返回的属性都是字符串(string), 那我们如何获得这些属性呢?\r\npython提供了内置的方法getattr, 如下所示:\r\n```python\r\n>>> getattr(t, \'__class__\')\r\ntuple\r\n```\r\n上面的例子等同于:\r\n```python\r\n>>> t.__class__\r\ntuple\r\n```\r\n所以, 在python中 \'.\'操作和\'getattr\'是一样的. 要说有区别那就是\'.\'操作更简单而\'getattr\'更灵活.\r\n\r\n另外,python也提供了内置函数\'setattr\', 它的作用等同于\'.\'操作的赋值.\r\n```python\r\n>>> f = Foo()\r\n>>> setattr(f, \'x\', 5)\r\n>>> getattr(f, \'x\')\r\n5\r\n>>> f.x\r\n5\r\n>>> f.x = 100\r\n>>> f.x\r\n100\r\n```\r\nAs with all assignments in Python, the new value can be any legitimate Python object. In this case, we’ve assigned f.x to be 5 and 100, both integers, but there’s no reason why we couldn’t assign a tuple, dictionary, file, or even a more complex object. From Python’s perspective, it really doesn’t matter.\r\n\r\n如果我们给一个对象赋一个没有定义的属性值会如何呢? 这样也可以!\r\n```python\r\n>>> f.new_attrib = \'hello\'\r\n>>> f.new_attrib\r\n\'hello\' \r\n\r\n>>> f.favorite_number = 72\r\n>>> f.favorite_number\r\n72\r\n```\r\n所以, 我们可以动态地创建和分配属性. 但是如果读取一个未定义的属性就会报错:\r\n```python\r\n>>> f.no_such_attribute\r\nAttributeError: \'Foo\' object has no attribute \'no_such_attribute\'\r\n```\r\npython对象有属性,并且可以动态获取或是修改.而python中的函数也是对象,所以函数也可以设置属性:\r\n```python\r\ndef hello():\r\n    return \"Hello\"\r\n\r\n>>> hello.abc_def = \'hi there!\'\r\n\r\n>>> hello.abc_def\r\n\'hi there!\'\r\n```\r\npython中的函数是对象所以有自己的属性.同样地,也可以设置属性.\r\n\r\n所以, 上面的例子中(Foo)类中的__init__方法中可以不设置变量, 而在类实例化对象上采用动态赋值是完全可以的.\r\n\r\nThis is one of those conventions that is really useful to follow: Yes, you can create and assign object attributes wherever you want. But it makes life so much easier for everyone if you assign all of an object’s attributes in __init__, even if it’s just to give it a default value, or even None. Just because you can create an attribute whenever you want doesn’t mean that you should do such a thing.\r\n\r\n既然一切对象都有属性, 那么我们看看类:\r\n```python\r\n>>> class Foo(object):\r\n        pass\r\n```\r\n类也可以设置属性:\r\n```python\r\n>>> Foo.bar = 100\r\n>>> Foo.bar\r\n100\r\n```\r\n类也是对象, 所以类也有属性. 但是我们如何理解类属性和类对象属性(比如在__init__函数中定义的x, y)呢?\r\n\r\n这个问题其实很好理解. 主要区别在于函数定义和类定义. 函数主体只有在函数调用时才会执行, 而类主体是立即执行且只执行一次! 我们可以在类主体中执行函数代码:\r\n```python\r\nclass Foo(object):\r\n    print(\"Hello from inside of the class!\")\r\n```\r\n同样的, 也可以什么都不做, 只定义属性:\r\n```python\r\nclass Foo(object):\r\n    x = 100\r\n```\r\n如果我们在类定义中设置变量, 实际情况是赋值不成功的. 这样是创建类属性. 所以\r\n```python\r\nFoo.x\r\n```\r\n会返回100.\r\n\r\n在类主体中定义变量会成为类属性, 那类中的函数呢? 其实函数也是属性:\r\n```python\r\n>>> class Foo(object):\r\n        def blah(self):\r\n            return \"blah\"\r\n\r\n>>> Foo.blah\r\n<unbound method Foo.blah>\r\n```\r\n其实定义一个函数就等于在当前命名空间(通常是全局空间)定义一个新属性. 那么在类中定义一个函数也就等于为类创建了一个新属性(只是这个属性是函数而已).\r\n\r\n换言之: 对象方法不是绑定在对象上. 当你在类(Foo)对象f上调用对象函数\"f.blah()\"时会调用类(Foo)的函数blah(),并传递对象f给\"blah\"的第一个参数(也就是self). 所以调用\"f.blah()\"和\"Foo.blah(f)\"的效果是完全相同的.\r\n\r\n但是, 当我调用\"f.blah()\"时, python是如果知道要调用\"Foo.blah()\"的? f和F完全是2个不同的对象; f是Foo的一个实例, 而Foo是type的一个实例. python为什么会调用Foo的\"blah()\"?\r\n\r\n这就要说道python的属性查找规则了. 对于变量, python遵循LEGB规则顺序查找: L(Local), E(Enclosing), G(Global), B(Builtin). 但是对于属性, python遵循不同的规则: 首先,在对象查找. 其次,在对象的类上查找. 以此类推, 直到最顶级的类(object).\r\n\r\n对应我们的例子中python会先在f对象想查找blah属性, 未找到后会在它的类(Foo)上查找, 找到后执行.\r\n\r\n所以, 在python中其实没有所谓的\"对象变量\"或\"类变量\"的. 某些情况属性定义在类上, 而某些情况属性又定义在对象上.(当然, 类也是type对象, 在这里我们不讨论). 这也解释了为什么人们通常都会在类上定义属性, 因为这些属性对于它的对象来讲都是可见的.Yes, that is true, but it sometimes makes more sense than others to do so.\r\n\r\nWhat you really want to avoid is creating an attribute on the instance that has the same name as an attribute on the class. 请看下面的例子:\r\n```python\r\nclass Person(object):\r\n    population = 0\r\n    def __init__(self, first, last):\r\n        self.first = first        \r\n        self.last = last\r\n        self.population += 1\r\n\r\np1 = Person(\'Reuven\', \'Lerner\')\r\np2 = Person(\'foo\', \'bar\')\r\n```\r\n看起来好像没什么问题. 但是很快发现**Person.population**一直是0, 但**p1.population**和**p2.population**都被设置成了1. 怎么会这样?\r\n\r\n注意这行代码:\r\n```python\r\nself.population += 1\r\n```\r\n它会这样执行:\r\n```python\r\nself.population = self.population + 1\r\n```\r\n右边的\"self.population\"会先于左边的\"self.population\"计算. 因此, 对于每个实例来说, 先在自己的属性中查找population, 未找到后会在它的类上继续查找, 找到后返回0, 所以\"self.population\"都会是0, 然后执行+1, 返回1!\r\n\r\nWe can actually see what attributes were actually set on the instance and on the class, using a list comprehension:\r\n```python\r\nclass Foo(object):\r\n    def blah(self):\r\n        return \"blah\"\r\n\r\n>>> [attr_name for attr_name in dir(f) if attr_name not in dir(Foo)]\r\n[]\r\n\r\n>>> [attr_name for attr_name in dir(Foo) if attr_name not in dir(object)]\r\n[\'__dict__\', \'__module__\', \'__weakref__\', \'blah\']\r\n```\r\nIn the above, we first define “Foo”, with a method “blah”. That method definition, as we know, is stored in the “blah” attribute on Foo. We haven’t assigned any attributes to f, which means that the only attributes available to f are those in its class.\r\n\r\n希望这篇文章对你学习python有点帮助!\r\n\r\n原文地址: http://blog.lerner.co.il/python-attributes/\r\n\r\n~~I hope that this has helped to put Python’s attributes into perspective. If this sort of thing interests you, you might be interested in my [full-day, live online class about object-oriented Python](https://www.eventbrite.com/e/full-day-online-class-in-object-oriented-python-tickets-13687653139), which I’ll next be offering on October 29th.  I’m also giving a [full-day, live online class about functional programming in Python](https://www.eventbrite.com/e/full-day-online-class-in-functional-programming-in-python-tickets-13687633079) on October 27th, and a free (no obligation) hour-long [Webinar on October 22nd about functional programming in Python](https://www.eventbrite.com/e/how-functional-programming-will-make-you-a-better-python-programmer-october-2014-tickets-13687895865).~~','<p>对于菜鸟来说,python中如何创建类(Class)应该是很简单的,比如:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span> \n    <span class=\"k\">pass</span>\n</pre></div>\n\n\n<p>这就是python的类(很无聊对吧?). 我们也可以实例化这个类:</p>\n<div class=\"codehilite\"><pre><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>实际上, 我们如果输出这个实例的类型,会发现它就是个类:</p>\n<div class=\"codehilite\"><pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">&#39;</span><span class=\"nc\">__main__</span><span class=\"o\">.</span><span class=\"n\">Foo</span><span class=\"s\">&#39;&gt;</span>\n</pre></div>\n\n\n<p>现在, 我们已经创建了Foo类并且实例化了一个对象f. 但是在实际应用中这肯定不够, 比如我们想定义对象的变量. 我们知道可以写<strong>init</strong>函数(注意这个函数是在new一个对象后才执行的), 比如:</p>\n<div class=\"codehilite\"><pre><span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">x</span>\n      <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">y</span>\n\n<span class=\"o\">&gt;&gt;...</span></pre></div>',0,2,'2015-01-15 11:22:51.000000','2015-01-29 17:59:42.000000',1),(19,'用Django和AngularJS构建Web应用','这篇文章很长很长, 讲了如何结合[django-rest-framework](http://django-rest-framework.com) 和 [angularjs](http://angularjs.org) 开发单页免应用. 先保存下来, 有空了翻译一下, 加深印象.\r\n\r\n本教程将带你进入 [django](https://djangoproject.com) 和 [angular](https://angularjs.org) 的世界, 用它们构建一个类似Google+的应用, 我们暂且叫它\"Not Google Plus\";\r\n\r\n在开始本教程之前, 我们先来搞清楚通过本文你能学到些什么东东.\r\n\r\n###目标\r\n\r\nHere at Thinkster, we strive to create high value, in depth content while maintaining a low barrier to entry. We release this content for free with the hope that you find it both exciting as well as informative.\r\n\r\nEach tutorial we release has a specific goal. In this tutorial, that goal is to give you a brief overview of how Django and AngularJS play together and how these technologies can be combined to build amazing web applications. Furthermore, we place a heavy emphasis on building good engineering habits. This includes everything from considering the tradeoffs that come from making architectural decisions, to maintaining high quality code throughout your project. While these things may not sound like fun, they are key to becoming a well-rounded software developer.\r\n\r\n###面向读者?\r\n\r\nEvery author must answer this difficult question. Our goal is to make this tutorial useful for novices as well as experienced developers.\r\n\r\nFor those of your who are in the early days of your software development careers, we have tried to be thorough and logical in our explanations as possible, while still making the text flow fluidly; we try to avoid making intuitive leaps where doing so makes sense.\r\n\r\nFor those of you who have been around the block a few times, and perhaps are just interested in learning more about Django or AngularJS, we know you don\'t need the basics explained to you. One of our goals when writing this tutorial was to make it easy to skim. This allows you to use your existing knowledge to speed up the reading process and identify where unfamiliar concepts are presented so you can grok them quickly and move on.\r\n\r\nWe want to make this tutorial accessible to anyone with enough interest to take the time necessary to learn and understand the concepts presented.\r\n\r\n###A brief interlude about formatting\r\n\r\nThroughout this tutorial, we strive to maintain consistent formatting. This section details what that formatting looks like and what it means.\r\n\r\n*     When presenting a new code snippet, we will present the snippet in it\'s entirety and then walk through it line-by-line as necessary to cover new concepts.\r\n*     Variable names and file names appear in-line with special formatting: thinkster_django_angular/settings.py.\r\n*     Longer code snippets will appear on their own lines:\r\n```python\r\ndef is_this_google_plus():\r\n       return False\r\n```\r\n*     Terminal commands also appear on their own line, prefixed by a $:\r\n```sh\r\n$ python manage.py runserver\r\n```\r\n*     Unless otherwise specified, you should assume that all terminal commands are run from the root directory of your project.\r\n\r\n###代码格式\r\n\r\nWhere possible, we opt to follow style guides created by the Django and Angular communities.\r\n\r\nFor Django, we follow PEP8 strictly and try our best to adhere to Django Coding style.\r\n\r\nFor AngularJS, we have adopted John Papa\'s AngularJS Style Guide. We also adhere to Google\'s JavaScript Style Guide where it makes sense to do so.\r\n\r\n###A humble request for feedback\r\n\r\nAt the risk of sounding cliche, we would not have a reason to make this tutorial if not for you. Because we believe that your success is our success, we invite you to contact us with any thoughts you have about the tutorial. You can reach us via the Olark box in the bottom-right corner of the screen, via Twitter at @jamesbrwr or @GoThinkster, or by emailing support@thinkster.io.\r\n\r\nWe welcome criticism openly and accept praise if you believe it is warranted. We\'re interested in knowing what you like, what you don\'t like, what you want to know more about, and anything else you feel is relevant.\r\n\r\nIf you are too busy to reach out to us, that\'s OK. We know that learning takes a lot of work. If, on the other hand, you want to help us build something amazing, we await your mail.\r\n\r\n###前言\r\n\r\nIt is our experience that the developers who gain the most from our tutorials are the ones who take an active approach to their learning.\r\n\r\nWe strongly recommend you type out the code for yourself. When you copy and paste code, you don’t interact with it and that interaction is in turn what makes you a better developer.\r\n\r\nIn addition to typing the code yourself, do not be afraid to get your hands dirty; jump in and play around, break things and build missing features. If you encounter a bug, explore and figure out what is causing it. These are the obstacles we as engineers must tackle multiple times a day, and have thus learned to embrace these explorations as the best source of learning.\r\n\r\nLet\'s build some software.\r\n\r\n***上面的内容我就不翻译了, 直接进入主题***\r\n##环境配置\r\n\r\nThe application we will be building requires a non-trivial amount of boilerplate. Instead of spending time setting up your environment, which is not the purpose of this tutorial, we have created a boilerplate project to get you started.\r\nYou can find the boilerplate project on Github at brwr/thinkster-django-angular-boilerplate. The repository includes a list of commands you need to run to get everything running.\r\n\r\n###注意事项\r\n\r\n我们想在本地用python manage.py runserver来测试时, 只需访问 http://localhost:8000/ 就可以. 默认情况下 这个页面是只带导航的空白页.(并且导航的按钮也不起作用).\r\n\r\n> 确保我们访问的页面是 http://localhost:8000/\r\n\r\n###扩展Django内置的User模块\r\n\r\nDjango提供了基本的内置User模块. 一般情况下这已经够用了.但是有些情况不行. 比如我想给User添加一个\"tagline\"的字段,而User模块是没有这个字段的, 怎么办?\r\n\r\nDjango中的User是继承自AbstractBaseUser的. 我们也可以自己写一个User模块(AbstractBaseUser基类设置了User的基本信息, 如用户名(username), 密码(password)等等). 然后添加自定义的字段, 本例中我们需要\"tagline\"这个字段.\r\n\r\nDjango的代码是按照\"app\"组织的, 这方面有很多文章可以参考.(也可以去Django官方文档查看) 我们这里创建一个叫\"authentication\"的\"app\". 这个app主要实现用户的类, 登陆, 注销以及注册等.\r\n\r\n创建一个新的app可以通过如下命令完成:\r\n```bash\r\n$ python manage.py startapp authentication\r\n```\r\n\r\n###创建账户模块\r\n\r\n首先, 我们创建一个账户的model.\r\n\r\n打开 ***authentication/models.py*** 这个文件并输入以下代码:\r\n```python\r\nfrom django.contrib.auth.models import AbstractBaseUser\r\nfrom django.db import models\r\n\r\nclass Account(AbstractBaseUser):\r\n    email = models.EmailField(unique=True)\r\n    username = models.CharField(max_length=40, unique=True)\r\n\r\n    first_name = models.CharField(max_length=40, blank=True)\r\n    last_name = models.CharField(max_length=40, blank=True)\r\n    tagline = models.CharField(max_length=140, blank=True)\r\n\r\n    is_admin = models.BooleanField(default=False)\r\n\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n\r\n    objects = AccountManager()\r\n\r\n    USERNAME_FIELD = \'email\'\r\n    REQUIRED_FIELDS = [\'username\']\r\n\r\n    def __unicode__(self):\r\n        return self.email\r\n\r\n    def get_full_name(self):\r\n        return \' \'.join([self.first_name, self.last_name])\r\n\r\n    def get_short_name(self):\r\n        return self.first_name\r\n```\r\n详细看下这个model的属性.\r\n```python\r\nemail = models.EmailField(unique=True)\r\n\r\n# ...\r\n\r\nUSERNAME_FIELD = \'email\'\r\n```\r\nDjango内置的User中username用作用户登陆时的用户名使用. 我们这里用email来做登陆用.\r\n\r\n为实现email字段来做用户登陆用, 需要保证email的唯一性, 所以我们为email字段设置unique=True\r\n```python\r\nusername = models.CharField(max_length=40, unique=True)\r\n```\r\n虽然我们用email来做登陆用, 但username字段还是需要的. 这个字段需要显示用户自己的posts和profile页面.我们也将用username来做用户的url参数, 所以username也必须唯一. 所以username字段也要设置unique=True.\r\n```python\r\nfirst_name = models.CharField(max_length=40, blank=True)\r\nlast_name = models.CharField(max_length=40, blank=True)\r\n```\r\n理想情况下, 用户还需要有姓, 名之类的信息, 但这些信息是可选的, 所以设置first_name和last_name为blank=True.\r\n```python\r\ntagline = models.CharField(max_length=140, blank=True)\r\n```\r\n上面提到, tagline属性也会在用户的profile页面显示, 所以这个字段也要有.\r\n```python\r\ncreated_at = models.DateTimeField(auto_now_add=True)\r\nupdated_at = models.DateTimeField(auto_now=True)\r\n```\r\ncreated_at保存了用户创建的时间, updated_at保存了用户更新相关信息的时间, 这2个字段也是要有的. ***auto_now_add=True*** 将字段默认时间设置为创建时间, 而***auto_now=True***将字段设置为更新时当前时间.\r\n\r\n```python\r\nobjects = AccountManager()\r\n```\r\n为Account添加自定义管理器(objects).\r\n```python\r\nREQUIRED_FIELDS = [\'username\']\r\n```\r\n由于用户名会有很多地方显示, 我们设置它为必须项(REQUIRED_FIELDS是一个列表, 你也可以把你需要的字段名添加进来.)\r\n```python\r\ndef __unicode__(self):\r\n    return self.email\r\n```\r\n添加__unicode__方法用来显示Account对象(注意python2.X和python3.X有些许不同, 具体设置可以参考Django官方文档)\r\n```python\r\ndef get_full_name(self):\r\n    return \' \'.join([self.first_name, self.last_name])\r\n\r\ndef get_short_name(self):\r\n    return self.first_name\r\n```python\r\nget_full_name() 和 get_short_name() 是Django约定提供的方法. 虽然本例中我们并未用到这个方法, 但写进来还是比较好的习惯.\r\n\r\n###Account管理器\r\n\r\n自定义user模块, 需要我们自己定义Manager去重载create_user() 和 create_superuser()这2个方法.\r\n\r\n在 ***authentication/models.py***文件中加入如下代码:\r\n```python\r\nfrom django.contrib.auth.models import BaseUserManager\r\n\r\n\r\nclass AccountManager(BaseUserManager):\r\n    def create_user(self, email, password=None, **kwargs):\r\n        if not email:\r\n            raise ValueError(\'Users must have a valid email address.\')\r\n\r\n        if not kwargs.get(\'username\'):\r\n            raise ValueError(\'Users must have a valid username.\')\r\n\r\n        account = self.model(\r\n            email=self.normalize_email(email), username=kwargs.get(\'username\')\r\n        )\r\n\r\n        account.set_password(password)\r\n        account.save()\r\n\r\n        return account\r\n\r\n    def create_superuser(self, email, password, **kwargs):\r\n        account = self.create_user(email, password, **kwargs)\r\n\r\n        account.is_admin = True\r\n        account.save()\r\n\r\n        return account\r\n```\r\n我们详细看看上面这段代码:\r\n```python\r\nif not email:\r\n    raise ValueError(\'Users must have a valid email address.\')\r\n\r\nif not kwargs.get(\'username\'):\r\n    raise ValueError(\'Users must have a valid username.\')\r\n```\r\n由于用户的email和username2个字段都是必须的, 所以我们需要做判断.\r\n\r\n```python\r\naccount = self.model(\r\n    email=self.normalize_email(email), username=kwargs.get(\'username\')\r\n)\r\n```\r\nSince we haven\'t defined a model attribute on the AccountManager class, self.model refers to the model attribute of BaseUserManager. This defaults to settings.AUTH_USER_MODEL, which we will change in just a moment to point to the Account class.\r\n```python\r\naccount = self.create_account(email, password, **kwargs)\r\n\r\naccount.is_admin = True\r\naccount.save()\r\n```\r\n以上是创建superuser的代码, 对比create_user()基本是一致的. 这里就不再赘述.\r\n###修改Django用户认证模块(AUTH_USER_MODEL)\r\n\r\n这一部分需要在settings.py中设置, 具体如下:\r\n```python\r\nAUTH_USER_MODEL = \'authentication.Account\'\r\n```\r\n这一设置告诉Django如何找user模块. **注意只有app的名字和Account**\r\n\r\n###安装第一个app\r\n\r\nDjango中, 你必须显式的告诉Django你安装了哪些app.\r\n打开 settings.py 找到 INSTALLED_APPS 把 \"authentication\"添加进去:\r\n```python\r\nINSTALLED_APPS = (\r\n    ...,\r\n    \'authentication\',\r\n)\r\n```\r\n\r\n###Migrating\r\n\r\nDjango1.7以后新增了Migrate功能.\r\n\r\nAnyone with a background in Rails will find the concept of migrations familiar. In short, migrations handle the SQL needed to update the schema of our database so you don\'t have to. By way of example, consider the Account model we just created. These models need to be stored in the database, but our database doesn\'t have a table for Account objects yet. What do we do? We create our first migration! The migration will handle adding the tables to the database and offer us a way to rollback the changes if we make a mistake.\r\n\r\nWhen you\'re ready, generate the migrations for the authentication app and apply them:\r\n```python\r\n$ python manage.py makemigrations\r\nMigrations for \'authentication\':\r\n    0001_initial.py:\r\n        - Create model Account\r\n$ python manage.py migrate\r\nOperations to perform:\r\n    Synchronize unmigrated apps: rest_framework\r\n    Apply all migrations: admin, authentication, contenttypes, auth, sessions\r\nSynchronizing apps without migrations:\r\n    Creating tables...\r\n    Installing custom SQL...\r\n    Installing indexes...\r\nRunning migrations:\r\n    Applying authentication.0001_initial... OK\r\n```\r\n###创建超级管理员\r\n\r\nLet\'s talk more about the python manage.py createsuperuser command from a few minutes ago.\r\n\r\nDifferent users have different levels of access in any given application. Some users are admins and can do anywhere, while some are just regular users whose actions should be limited. In Django, a super user is the highest level of access you can have. Because we want the ability to work will all facets of our application, we will create a super user. That is what python manage.py createsuperuser does.\r\n\r\nAfter running the command, Django will prompt you for some information and create an Account with superuser access. Go ahead and give it a try.\r\n```python\r\n$ python manage.py createsuperuser\r\n```\r\nMake a new super user Account\r\n\r\n###查看结果\r\n\r\nTo make sure everything is properly configured, let\'s take a quick break and open Django\'s shell:\r\n```python\r\n$ python manage.py shell\r\n```\r\nYou should see a new prompt: >>>. Inside the shell, we can get the Account we just created like so:\r\n```python\r\n>>> from authentication.models import Account\r\n>>> a = Account.objects.latest(\'created_at\')\r\n```\r\nIf everything went well, you should be able to access the various attributes of your Account object:\r\n```python\r\n>>> a\r\n>>> a.email\r\n>>> a.username\r\n```\r\n\r\n##Account Model的序列化\r\n\r\nAngularJS是通过AJAX请求服务器的. 所以服务器在返回数据前需要格式化数据, 本例中我们用JSON格式(这也是现在比较通用的格式).这个过程就是序列化!\r\n\r\n我们把Account 对应的serializer 命名为AccountSerializer.\r\n\r\n###Django REST Framework\r\n\r\n这里我们用到了[Django REST Framework](http://django-rest-framework.com). 关于它的介绍可以去官网学习.\r\n\r\n###AccountSerializer\r\n\r\n首先在 authentication app 中创建 serializers.py:\r\n```python\r\n$ touch authentication/serializers.py\r\n```\r\n\r\n打开serializers.py, 并输入以下代码:\r\n```python\r\nfrom django.contrib.auth import update_session_auth_hash\r\n\r\nfrom rest_framework import serializers\r\n\r\nfrom authentication.models import Account\r\n\r\n\r\nclass AccountSerializer(serializers.ModelSerializer):\r\n    password = serializers.CharField(write_only=True, required=False)\r\n    confirm_password = serializers.CharField(write_only=True, required=False)\r\n\r\n    class Meta:\r\n        model = Account\r\n        fields = (\'id\', \'email\', \'username\', \'created_at\', \'updated_at\',\r\n                  \'first_name\', \'last_name\', \'tagline\', \'password\',\r\n                  \'confirm_password\',)\r\n        read_only_fields = (\'created_at\', \'updated_at\',)\r\n\r\ndef create(self, validated_data):\r\n    return Account.objects.create(**validated_data)\r\n\r\ndef update(self, instance, validated_data):\r\n    instance.username = validated_data.get(\'username\', instance.username)\r\n    instance.tagline = validated_data.get(\'tagline\', instance.tagline)\r\n\r\n    instance.save()\r\n\r\n    password = validated_data.get(\'password\', None)\r\n    confirm_password = validated_data.get(\'confirm_password\', None)\r\n\r\n    if password and confirm_password and password == confirm_password:\r\n        instance.set_password(password)\r\n    	instance.save()\r\n\r\n    update_session_auth_hash(self.context.get(\'request\'), instance)\r\n\r\n    return instance\r\n```\r\n\r\n> **提示**\r\n\r\n> 从这里开始, 我们将进入正题!\r\n\r\n仔细阅读下面两行代码:\r\n```python\r\npassword = serializers.CharField(write_only=True, required=False)\r\nconfirm_password = serializers.CharField(write_only=True, required=False)\r\n```\r\n我们在AccountSerializer中显式的声明这2个字段用来定义它的required属性. 因为这2个属性不是必须要更新的, 除非用户提供了新的密码.\r\n\r\n同时要注意 write_only=True 这个参数. user的密码对于前端来说是不可见的.\r\n```python\r\nclass Meta:\r\n```\r\nMeta子类中定义了metadata, 其中包括了model, fields等属性.\r\n```python\r\nmodel = Account\r\nfields = (\'id\', \'email\', \'username\', \'created_at\', \'updated_at\',\r\n          \'first_name\', \'last_name\', \'tagline\', \'password\',\r\n          \'confirm_password\',)\r\n```\r\nfields属性显式地声明哪些地段要被序列化. 这里一定要注意, Account不是所有字段都要序列化的, 比如 is_superuser 字段.\r\n```python\r\nread_only_fields = (\'created_at\', \'updated_at\',)\r\n```\r\n设置只读字段, 这里我们把\'created_at\', \'updated_at\' 这2个字段设置为只读, 因为它会自动更新.\r\n```python\r\ndef create(self, validated_data):\r\n    # ...\r\n\r\ndef update(self, instance, validated_data):\r\n    # ...\r\n```\r\nEarlier we mentioned that we sometimes want to turn JSON into a Python object. This is called deserialization and it is handled by the .create() and .update() methods. When creating a new object, such as an Account, .create() is used. When we later update that Account, .update() is used.\r\n```python\r\ninstance.username = attrs.get(\'username\', instance.username)\r\ninstance.tagline = attrs.get(\'tagline\', instance.tagline)\r\n```\r\nWe will let the user update their username and tagline attributes for now. If these keys are present in the arrays dictionary, we will use the new value. Otherwise, the current value of the instance object is used. Here, instance is of type Account.\r\n```python\r\npassword = validated_data.get(\'password\', None)\r\nconfirm_password = validated_data.get(\'confirm_password\', None)\r\n\r\nif password and confirm_password and password == confirm_password:\r\n    instance.set_password(password)\r\n    instance.save()\r\n```\r\nBefore updating the user\'s password, we need to confirm they have provided values for both the password and password_confirmation field. We then check to make sure these two fields have equivelant values.\r\n\r\nAfter we verify that the password should be updated, we much use Account.set_password() to perform the update. Account.set_password() takes care of storing passwords in a secure way. It is important to note that we must explicitly save the model after updating the password.\r\n\r\nupdate_session_auth_hash(self.context.get(\'request\'), instance)\r\n\r\nWhen a user\'s password is updated, their session authentication hash must be explicitly updated. If we don\'t do this here, the user will not be authenticated on their next request and will have to log in again.\r\n\r\n###检查\r\n\r\n以上代码完成后, 我们可以在命令行测试:\r\n```python\r\n>>> from authentication.models import Account\r\n>>> from authentication.serializers import AccountSerializer\r\n>>> account = Account.objects.latest(\'created_at\')\r\n>>> serialized_account = AccountSerializer(account)\r\n>>> serialized_account.data.get(\'email\')\r\n>>> serialized_account.data.get(\'username\')\r\n```\r\n确保 AccountSerializer 可以正常工作.\r\n\r\n##注册新用户\r\n\r\n我们已经有了Account的model和serializers. 我们还需要创建认证系统. 这涉及到用户的注册, 登陆和注销等操作.后续我们会接触到AngularJS的控制器.\r\n\r\n由于我们没有用户可以登陆, 所以先从注册开始吧.\r\n\r\n要创建用户, 我们需要首先创建一个API请求来处理用户创建(AngularJS 通过AJAX请求来和API交互).\r\n\r\n###Account API viewset\r\n\r\n打开 authentication/views.py 清空 并输入以下代码:\r\n```python\r\nfrom rest_framework import permissions, viewsets\r\n\r\nfrom authentication.models import Account\r\nfrom authentication.permissions import IsAccountOwner\r\nfrom authentication.serializers import AccountSerializer\r\n\r\n\r\nclass AccountViewSet(viewsets.ModelViewSet):\r\n    lookup_field = \'username\'\r\n    queryset = Account.objects.all()\r\n    serializer_class = AccountSerializer\r\n\r\n    def get_permissions(self):\r\n        if self.request.method in permissions.SAFE_METHODS:\r\n            return (permissions.AllowAny(),)\r\n\r\n        if self.request.method == \'POST\':\r\n            return (permissions.AllowAny(),)\r\n\r\n        return (permissions.IsAuthenticated(), IsAccountOwner(),)\r\n\r\ndef create(self, request):\r\n    serializer = self.serializer_class(data=request.data)\r\n\r\n    if serializer.is_valid():\r\n    Account.objects.create_user(**serializer.validated_data)\r\n\r\n    return Response(serializer.validated_data, status=status.HTTP_201_CREATED)\r\n    return Response({\r\n    \'status\': \'Bad request\',\r\n    \'message\': \'Account could not be created with received data.\'\r\n    }, status=status.HTTP_400_BAD_REQUEST)\r\n```\r\n\r\n详细阅读代码:\r\n```python\r\nclass AccountViewSet(viewsets.ModelViewSet):\r\n```\r\nDjango REST Framework提供了很有用的接口viewsets. viewsets是一组view的集合. 特别是ModelViewSet, 它提供了创建, 读取, 更新和删除对应之model(非常有用, 代码也写得非常漂亮, 简洁. 有兴趣的童鞋可以查看它的源代码).\r\n```python\r\nlookup_field = \'username\'\r\nqueryset = Account.objects.all()\r\nserializer_class = AccountSerializer\r\n```\r\n这里我们定义了 queryset  和 serializer_class. 同时注意 我们还定义了 lookup_field. 它主要是用来做Account查找的(通过username字段来查找用户).\r\n```python\r\ndef get_permissions(self):\r\n    if self.request.method in permissions.SAFE_METHODS:\r\n        return (permissions.AllowAny(),)\r\n\r\n    if self.request.method == \'POST\':\r\n        return (permissions.AllowAny(),)\r\n\r\n    return (permissions.IsAuthenticated(), IsAccountOwner(),)\r\n```\r\n只有账号作者自己可以对本账号进行更新, 删除等危险操作, 所以我们定义了 get_permissions(), 这个方法主要是对权限进行控制.\r\n\r\n如果HTTP请求是\"safe\"的, 那任何人都可以操作.\r\n```python\r\ndef create(self, request):\r\n    serializer = self.serializer_class(data=request.data)\r\n\r\n    if serializer.is_valid():\r\n        Account.objects.create_user(**serializer.validated_data)\r\n\r\n        return Response(serializer.validated_data, status=status.HTTP_201_CREATED)\r\n    return Response({\r\n        \'status\': \'Bad request\',\r\n        \'message\': \'Account could not be created with received data.\'\r\n    }, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\ndef create(self, request):\r\n    serializer = self.serializer_class(data=request.DATA)\r\n\r\n    if serializer.is_valid():\r\n        account = Account.objects.create_user(**request.DATA)\r\n\r\n        account.set_password(request.DATA.get(\'password\'))\r\n        account.save()\r\n\r\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\r\n    return Response({\r\n        \'status\': \'Bad request\',\r\n        \'message\': \'Account could not be created with received data.\'\r\n    }, status=status.HTTP_400_BAD_REQUEST)\r\n```\r\nWhen you create an object using the serializer\'s .save() method, the object\'s attributes are set literally. This means that a user registering with the password \'password\' will have their password stored as \'password\'. This is bad for a couple of reasons: 1) Storing passwords in plain text is a massive security issue. 2) Django hashes and salts passwords before comparing them, so the user wouldn\'t be able to log in using \'password\' as their password.\r\nDjango rest framework 默认的serializer\'s .save() 方法只是简单的把http请求的数据保存到对应的model上. 但是我们这里不可以这么做, 因为\r\n\r\n* 		密码不建议明文保存\r\n*       django会对密码进行加密, 这样的话, 用户用自己设置的密码是不能登陆的\r\n\r\n所以我们需要重写Account的 create(以及update)方法\r\n\r\n###用户权限设置\r\n\r\n创建文件 authentication/permissions.py 并输入以下代码:\r\n```python\r\nfrom rest_framework import permissions\r\n\r\n\r\nclass IsAccountOwner(permissions.BasePermission):\r\n    def has_object_permission(self, request, view, account):\r\n        if request.user:\r\n            return account == request.user\r\n        return False\r\n```\r\n这是个非常简单(基本)的权限控制.\r\n\r\n###添加路由信息\r\n\r\n在 urls.py 中添加urlpatterns:\r\n```python\r\n# .. Imports\r\nfrom rest_framework_nested import routers\r\n\r\nfrom authentication.views import AccountViewSet\r\n\r\nrouter = routers.SimpleRouter()\r\nrouter.register(r\'accounts\', AccountViewSet)\r\n\r\nurlpatterns = patterns(\r\n     \'\',\r\n    # ... URLs\r\n    url(r\'^api/v1/\', include(router.urls)),\r\n\r\n    url(\'^.*$\', IndexView.as_view(), name=\'index\'),\r\n)\r\n```\r\n> 特别注意最后一行 url(\'^.*$\', IndexView.as_view(), name=\'index\'), 它把其他所有的url请求都转到首页了, **为什么?**.\r\n\r\n###AngularJS端的user services\r\n\r\n后端的服务有了, 接下来是前端的代码.\r\n创建文件 static/javascripts/authentication/services/authentication.service.js 并添加如下代码:\r\n```js\r\n/**\r\n* Authentication\r\n* @namespace thinkster.authentication.services\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.authentication.services\')\r\n    .factory(\'Authentication\', Authentication);\r\n\r\n  Authentication.$inject = [\'$cookies\', \'$http\'];\r\n\r\n  /**\r\n  * @namespace Authentication\r\n  * @returns {Factory}\r\n  */\r\n  function Authentication($cookies, $http) {\r\n    /**\r\n    * @name Authentication\r\n    * @desc The Factory to be returned\r\n    */\r\n    var Authentication = {\r\n      register: register\r\n    };\r\n\r\n    return Authentication;\r\n\r\n    ////////////////////\r\n\r\n    /**\r\n    * @name register\r\n    * @desc Try to register a new user\r\n    * @param {string} username The username entered by the user\r\n    * @param {string} password The password entered by the user\r\n    * @param {string} email The email entered by the user\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.authentication.services.Authentication\r\n    */\r\n    function register(email, password, username) {\r\n      return $http.post(\'/api/v1/accounts/\', {\r\n        username: username,\r\n        password: password,\r\n        email: email\r\n      });\r\n    }\r\n  }\r\n})();\r\n```\r\n在文件 static/javascripts/authentication/services/authentication.service.js 中创建工厂方法Authentication\r\n\r\n逐行解释下代码:\r\n```js\r\nangular\r\n  .module(\'thinkster.authentication.services\')\r\n```\r\nAngularJS supports the use of modules. Modularization is a great feature because it promotes encapsulation and loose coupling. We make thorough use of Angular\'s module system throughout the tutorial. For now, all you need to know is that this service is in the thinkster.authentication.services module.\r\n```js\r\n.factory(\'Authentication\', Authentication);\r\n```\r\nThis line registers a factory named Authentication on the module from the previous line.\r\n```js\r\nfunction Authentication($cookies, $http) {\r\n```\r\nHere we define the factory we just registered. We inject the $cookies and $http services as a dependency. We will be using $cookies later.\r\n```js\r\nvar Authentication = {\r\n  register: register\r\n};\r\n```\r\nThis is personal preference, but I find it\'s more readable to define your service as a named object and then return it, leaving the details lower in the file.\r\n```js\r\nfunction register (username, password, email) {\r\n```\r\nAt this point, the Authentication service has only one method: register, which takes a username, password, and email. We will add more methods to the service as we move forward.\r\n```js\r\nreturn $http.post(\'/api/v1/accounts/\', {\r\n  username: username,\r\n  password: password,\r\n  email: email\r\n});\r\n```\r\nAs mentioned before, we need to make an AJAX request to the API endpoint we made. As data, we include the username, password and email parameters this method received. We have no reason to do anything special with the response, so we will let the caller of Authentication.register handle the callback.\r\n\r\n###注册用户的前端模板\r\n\r\n创建文件 static/templates/authentication/register.html 并添加如下代码:\r\n```html\r\n<div class=\"row\">\r\n  <div class=\"col-md-4 col-md-offset-4\">\r\n    <h1>Register</h1>\r\n\r\n    <div class=\"well\">\r\n      <form role=\"form\" ng-submit=\"vm.register()\">\r\n        <div class=\"form-group\">\r\n          <label for=\"register__email\">Email</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"register__email\" ng-model=\"vm.email\" placeholder=\"ex. john@notgoogle.com\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"register__username\">Username</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"register__username\" ng-model=\"vm.username\" placeholder=\"ex. john\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"register__password\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"register__password\" ng-model=\"vm.password\" placeholder=\"ex. thisisnotgoogleplus\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\nWe won\'t go into much detail this time because this is pretty basic HTML. A lot of the classes come from Bootstrap, which is included by the boilerplate project. There are only two lines that we are going to pay attention to:\r\n```html\r\n<form role=\"form\" ng-submit=\"vm.register()\">\r\n```\r\nThis is the line responsible for calling $scope.register, which we set up in our controller. ng-submit will call vm.register when the form is submitted. If you have used Angular before, you are probably used to using $scope. In this tutorial, we choose to avoid using $scope where possible in favor of vm for ViewModel. See the Controllers section of John Papa\'s AngularJS Style Guide for more on this.\r\n```html\r\n<input type=\"email\" class=\"form-control\" id=\"register__email\" ng-model=\"vm.email\" placeholder=\"ex. john@notgoogle.com\" />\r\n```\r\nOn each <input />, you will see another directive, ng-model. ng-model is responsible for storing the value of the input on the ViewModel. This is how we get the username, password, and email when vm.register is called.\r\n\r\n###用户注册的控制器(RegisterController)\r\n\r\nWith a service and interface in place, we need a controller to hook the two together. The controller we create, RegisterController will allow us to call the register method of the Authentication service when a user submits the form we\'ve just built.\r\n\r\n创建文件 static/javascripts/authentication/controllers/register.controller.js 并添加以下代码:\r\n```js\r\n/**\r\n* Register controller\r\n* @namespace thinkster.authentication.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.authentication.controllers\')\r\n    .controller(\'RegisterController\', RegisterController);\r\n\r\n  RegisterController.$inject = [\'$location\', \'$scope\', \'Authentication\'];\r\n\r\n  /**\r\n  * @namespace RegisterController\r\n  */\r\n  function RegisterController($location, $scope, Authentication) {\r\n    var vm = this;\r\n\r\n    vm.register = register;\r\n\r\n    /**\r\n    * @name register\r\n    * @desc Register a new user\r\n    * @memberOf thinkster.authentication.controllers.RegisterController\r\n    */\r\n    function register() {\r\n      Authentication.register(vm.email, vm.password, vm.username);\r\n    }\r\n  }\r\n})();\r\n```\r\nAs usual, we will skip over the familiar and talk about new concepts.\r\n```js\r\n.controller(\'RegisterController\', RegisterController);\r\n```\r\nThis is similar to the way we registered our service. The difference is that, this time, we are registering a controller.\r\n```js\r\nvm.register = register;\r\n```\r\nvm allows the template we just created to access the register method we define later in the controller.\r\n```js\r\nAuthentication.register(vm.email, vm.password, vm.username);\r\n```\r\nHere we call the service we created a few minutes ago. We pass in a username, password and email from vm.\r\n\r\n###注册路由(Router)和模块(Modules)\r\n\r\nLet\'s set up some client-side routing so users of the app can navigate to the register form.\r\n\r\n创建文件 static/javascripts/thinkster.routes.js 并添加以下代码:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.routes\')\r\n    .config(config);\r\n\r\n  config.$inject = [\'$routeProvider\'];\r\n\r\n  /**\r\n  * @name config\r\n  * @desc Define valid application routes\r\n  */\r\n  function config($routeProvider) {\r\n    $routeProvider.when(\'/register\', {\r\n      controller: \'RegisterController\', \r\n      controllerAs: \'vm\',\r\n      templateUrl: \'/static/templates/authentication/register.html\'\r\n    }).otherwise(\'/\');\r\n  }\r\n})();\r\n```\r\n\r\nThere are a few points we should touch on here.\r\n```js\r\n.config(config);\r\n```\r\nAngular, like just about any framework you can imagine, allows you to edit it\'s configuration. You do this with a .config block.\r\n```js\r\nfunction config($routeProvider) {\r\n```\r\nHere, we are injecting $routeProvider as a dependency, which will let us add routing to the client.\r\n```js\r\n$routeProvider.when(\'/register\', {\r\n```\r\n$routeProvider.when takes two arguments: a path and an options object. Here we use /register as the path because thats where we want the registration form to show up.\r\n\r\ncontroller: \'RegisterController\',\r\ncontrollerAs: \'vm\',\r\n\r\nOne key you can include in the options object is controller. This will map a certain controller to this route. Here we use the RegisterController controller we made earlier. controllerAs is another option. This is required to use the vm variable. In short, we are saying that we want to refer to the controller as vm in the template.\r\n```js\r\ntemplateUrl: \'/static/templates/authentication/register.html\'\r\n```\r\nThe other key we will use is templateUrl. templateUrl takes a string of the URL where the template we want to use for this route can be found.\r\n```js\r\n}).otherwise(\'/\');\r\n```\r\nWe will add more routes as we move forward, but it\'s possible a user will enter a URL that we don\'t support. When this happens, $routeProvider.otherwise will redirect the user to the path specified; in this case, \'/\'.\r\n\r\n###设置AngularJS modules\r\n\r\n先说说AngularJS modules\r\n\r\nIn Angular, you must define modules prior to using them. So far we need to define thinkster.authentication.services, thinkster.authentication.controllers, and thinkster.routes. Because thinkster.authentication.services and thinkster.authentication.controllers are submodules of thinkster.authentication, we need to create a thinkster.authentication module as well.\r\n\r\n创建文件 static/javascripts/authentication/authentication.module.js 并添加如下代码:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.authentication\', [\r\n      \'thinkster.authentication.controllers\',\r\n      \'thinkster.authentication.services\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.authentication.controllers\', []);\r\n\r\n  angular\r\n    .module(\'thinkster.authentication.services\', [\'ngCookies\']);\r\n})();\r\n```\r\n这里的代码格式需要注意.\r\n```js\r\nangular\r\n  .module(\'thinkster.authentication\', [\r\n    \'thinkster.authentication.controllers\',\r\n    \'thinkster.authentication.services\'\r\n  ]);\r\n```\r\n这是AngularJS里的核心理念依赖注入, 模块thinkster.authentication 依赖于 thinkster.authentication.controllers 和 thinkster.authentication.services\r\n```js\r\nangular\r\n  .module(\'thinkster.authentication.controllers\', []);\r\n```\r\n这里创建了无依赖的模块thinkster.authentication.controllers.\r\n\r\n现在我们需要定义 thinkster.authentication 和 thinkster.routes.\r\n\r\n打开文件 static/javascripts/thinkster.js, 添加依赖. 注意 thinkster.routes 依赖于AngularJS的内置模块ngRoute.\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster\', [\r\n      \'thinkster.routes\',\r\n      \'thinkster.authentication\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.routes\', [\'ngRoute\']);\r\n})();\r\n```\r\n\r\n###Hash routing\r\n\r\n***这一节暂时不翻译***\r\n\r\nBy default, Angular uses a feature called hash routing. If you\'ve ever seen a URL that looks like www.google.com/#/search then you know what I\'m talking about. Again, this is personal preference, but I think those are incredibly ugly. To get rid of hash routing, we can enabled $locationProvider.html5Mode. In older browsers that do not support HTML5 routing, Angular will intelligently fall back to hash routing.\r\n\r\nCreate a file in static/javascripts/ called thinkster.config.js and give it the following content:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.config\')\r\n    .config(config);\r\n\r\n  config.$inject = [\'$locationProvider\'];\r\n\r\n  /**\r\n  * @name config\r\n  * @desc Enable HTML5 routing\r\n  */\r\n  function config($locationProvider) {\r\n    $locationProvider.html5Mode(true);\r\n    $locationProvider.hashPrefix(\'!\');\r\n  }\r\n})();\r\n```\r\n\r\nAs mentioned, enabling $locationProvider.html5Mode gets rid of the hash sign in the URL. The other setting here, $locationProvider.hashPrefix, turns the # into a #!. This is mostly for the benefit of search engines.\r\n\r\nBecause we are using a new module here, we need to open up static/javascripts/thinkster.js, define the module, and include is as a dependency for the thinkster module.\r\n```js\r\nangular\r\n  .module(\'thinkster\', [\r\n    \'thinkster.config\',\r\n    // ...\r\n  ]);\r\n\r\nangular\r\n  .module(\'thinkster.config\', []);\r\n```\r\n\r\n###添加js文件\r\n\r\n这一部分其实是django中的内容, 如果你用了compress app, 注意添加js的位置, 一定要在{% compress js %}块内.\r\n\r\n打开文件 templates/javascripts.html 并添加如下代码(注意要放在{% compress js %} 和 {% endcompress %}中:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/thinkster.config.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/thinkster.routes.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/authentication/authentication.module.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/authentication/services/authentication.service.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/authentication/controllers/register.controller.js\' %}\"></script>\r\n```\r\n\r\n###处理 CSRF\r\n\r\nDjango提供了跨站点请求保护措施(CSRF).\r\nDjango, by default, stores a CSRF token in a cookie named csrftoken and expects a header with the name X-CSRFToken for any dangerous HTTP request (POST, PUT, PATCH, DELETE). We can easily configure Angular to handle this.\r\n所以需要在AngularJS中进行相应的设置\r\n\r\n打开文件 static/javascripts/thinkster.js 并添加如下代码到文件尾:\r\n```js\r\nangular\r\n  .module(\'thinkster\')\r\n  .run(run);\r\n\r\nrun.$inject = [\'$http\'];\r\n\r\n/**\r\n* @name run\r\n* @desc Update xsrf $http headers to align with Django\'s defaults\r\n*/\r\nfunction run($http) {\r\n  $http.defaults.xsrfHeaderName = \'X-CSRFToken\';\r\n  $http.defaults.xsrfCookieName = \'csrftoken\';\r\n}\r\n```\r\n\r\n###查看结果\r\n\r\n运行服务端 (python manage.py runserver), 并从浏览器访问 http://localhost:8000/register 并填写相关信息.\r\n\r\n注册成功后, 在命令行查看结果如下:\r\n```python\r\n>>> from authentication.models import Account\r\n>>> Account.objects.latest(\'created_at\')\r\n```\r\nThe Account object returned should match the one you just created.\r\n\r\n##用户登陆\r\n\r\n现在用户可以注册了, 我们需要让用户登陆. 这也是认证系统的一部分. 一旦用户注册成功, 我们需要自动登陆.\r\n\r\nTo get started, we will create views for logging in and logging out. Once those are done we will progress in a fashion similar to the registration systems: services, controllers, etc.\r\n我们从创建views开始(包括logging in 和logging out).\r\n\r\n###创建登陆API\r\n\r\n打开文件 authentication/views.py 并添加如下代码:\r\n```python\r\nimport json\r\n\r\nfrom django.contrib.auth import authenticate, login\r\n\r\nfrom rest_framework improt status, views\r\nfrom rest_framework.response import Response\r\n\r\nclass LoginView(views.APIView):\r\n    def post(self, request, format=None):\r\n        data = json.loads(request.body)\r\n\r\n        email = data.get(\'email\', None)\r\n        password = data.get(\'password\', None)\r\n\r\n        account = authenticate(email=email, password=password)\r\n\r\n        if account is not None:\r\n            if account.is_active:\r\n                login(request, account)\r\n\r\n                serialized = AccountSerializer(account)\r\n\r\n                return Response(serialized.data)\r\n            else:\r\n                return Response({\r\n                    \'status\': \'Unauthorized\',\r\n                    \'message\': \'This account has been disabled.\'\r\n                }, status=status.HTTP_401_UNAUTHORIZED)\r\n        else:\r\n            return Response({\r\n                \'status\': \'Unauthorized\',\r\n                \'message\': \'Username/password combination invalid.\'\r\n            }, status=status.HTTP_401_UNAUTHORIZED)\r\n```\r\n\r\nThis is a longer snippet than we\'ve seen in the past, but we will approach it the same way: by talking about what\'s new and ignoring what we have already encountered.\r\n```python\r\n class LoginView(views.APIView):\r\n```\r\nYou will notice that we are not using a generic view this time. Because this view does not perfect a generic activity like creating or updating an object, we must start with something more basic. Django REST Framework\'s views.APIView is what we use. While APIView does not handle everything for us, it does give us much more than standard Django views do. In particular, views.APIView are made specifically to handle AJAX requests. This turns out to save us a lot of time.\r\n```python\r\ndef post(self, request, format=None):\r\n```\r\nUnlike generic views, we must handle each HTTP verb ourselves. Logging in should typically be a POST request, so we override the self.post() method.\r\n```python\r\naccount = authenticate(email=email, password=password)\r\n```\r\nDjango provides a nice set of utilities for authenticating users. The authenticate() method is the first utility we will cover. authenticate() takes an email and a password. Django then checks the database for an Account with email email. If one is found, Django will try to verify the given password. If the username and password are correct, the Account found by authenticate() is returned. If either of these steps fail, authenticate() will return None.\r\n```python\r\nif account is not None:\r\n    # ...\r\nelse:\r\n    return Response({\r\n        \'status\': \'Unauthorized\',\r\n        \'message\': \'Username/password combination invalid.\'\r\n    }, status=status.HTTP_401_UNAUTHORIZED)\r\n```\r\nIn the event that authenticate() returns None, we respond with a 401 status code and tell the user that the email/password combination they provided is invalid.\r\n```python\r\nif account.is_active:\r\n    # ...\r\nelse:\r\n    return Response({\r\n        \'status\': \'Unauthorized\',\r\n        \'message\': \'This account has been disabled.\'\r\n    }, status=status.HTTP_401_UNAUTHORIZED)\r\n```\r\nIf the user\'s account is for some reason inactivate, we respond with a 401 status code. Here we simply say that the account has been disabled.\r\n```python\r\nlogin(request, account)\r\n```\r\nIf authenticate() success and the user is active, then we use Django\'s login() utility to create a new session for this user.\r\n```python\r\nserialized = AccountSerializer(account)\r\n\r\nreturn Response(serialized.data)\r\n```\r\nWe want to store some information about this user in the browser if the login request succeeds, so we serialize the Account object found by authenticate() and return the resulting JSON as the response.\r\n\r\n###添加登陆路由信息\r\n\r\nJust as we did with AccountViewSet, we need to add a route for LoginView.\r\n\r\nOpen up thinkster_django_angular_boilerplate/urls.py and add the following URL between ^/api/v1/ and ^:\r\n```python\r\nfrom authentication.views import LoginView\r\n\r\nurlpatterns = patterns(\r\n    # ...\r\n    url(r\'^api/v1/auth/login/$\', LoginView.as_view(), name=\'login\'),\r\n    # ...\r\n)\r\n```\r\n\r\n###认证服务\r\n\r\nLet\'s add some more methods to our Authentication service. We will do this in two stages. First we will add a login() method and then we will add some utility methods for storing session data in the browser.\r\n\r\n打开文件 static/javascripts/authentication/services/authentication.service.js 并添加如下代码:\r\n```js\r\n/**\r\n * @name login\r\n * @desc Try to log in with email `email` and password `password`\r\n * @param {string} email The email entered by the user\r\n * @param {string} password The password entered by the user\r\n * @returns {Promise}\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction login(email, password) {\r\n  return $http.post(\'/api/v1/auth/login/\', {\r\n    email: email, password: password\r\n  });\r\n}\r\n\r\nMake sure to expose it as part of the service:\r\n\r\nvar Authentication = {\r\n  login: login,\r\n  register: register\r\n};\r\n```\r\n\r\nMuch like the register() method from before, login() returns makes an AJAX request to our API and returns a promise.\r\n\r\nNow let\'s talk about a few utility methods we need for managing session information on the client.\r\n\r\nWe want to display information about the currently authenticated user in the navigation bar at the top of the page. This means we will need a way to store the response returned by login(). We will also need a way to retrieve the authenticated user. We need need a way to unauthenticate the user in the browser. Finally, it would be nice to have an easy way to check if the current user is authenticated.\r\n\r\n*NOTE: Unauthenticating is different from logging out. When a user logs out, we need a way to remove all remaining session data from the client.*\r\n\r\nGiven these requirements, I suggest three methods: getAuthenticatedAccount, isAuthenticated, setAuthenticatedAccount, and unauthenticate.\r\n\r\nLet\'s implement these now. Add each of the following functions to the Authentication service:\r\n```js\r\n/**\r\n * @name getAuthenticatedAccount\r\n * @desc Return the currently authenticated account\r\n * @returns {object|undefined} Account if authenticated, else `undefined`\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction getAuthenticatedAccount() {\r\n  if (!$cookies.authenticatedAccount) {\r\n    return;\r\n  }\r\n\r\n  return JSON.parse($cookies.authenticatedAccount);\r\n}\r\n```\r\nIf there is no authenticatedAccount cookie (set in setAuthenticatedAccount()), then return; otherwise return the parsed user object from the cookie.\r\n```js\r\n/**\r\n * @name isAuthenticated\r\n * @desc Check if the current user is authenticated\r\n * @returns {boolean} True is user is authenticated, else false.\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction isAuthenticated() {\r\n  return !!$cookies.authenticatedAccount;\r\n}\r\n```\r\nReturn the boolean value of the authenticatedAccount cookie.\r\n```js\r\n/**\r\n * @name setAuthenticatedAccount\r\n * @desc Stringify the account object and store it in a cookie\r\n * @param {Object} user The account object to be stored\r\n * @returns {undefined}\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction setAuthenticatedAccount(account) {\r\n  $cookies.authenticatedAccount = JSON.stringify(account);\r\n}\r\n```\r\nSet the authenticatedAccount cookie to a stringified version of the account object.\r\n```js\r\n/**\r\n * @name unauthenticate\r\n * @desc Delete the cookie where the user object is stored\r\n * @returns {undefined}\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction unauthenticate() {\r\n  delete $cookies.authenticatedAccount;\r\n}\r\n```\r\nRemove the authenticatedAccount cookie.\r\n\r\nAgain, don\'t forget to expose these methods as part of the service:\r\n```js\r\nvar Authentication = {\r\n  getAuthenticatedAccount: getAuthenticatedAccount,\r\n  isAuthenticated: isAuthenticated,\r\n  login: login,\r\n  register: register,\r\n  setAuthenticatedAccount: setAuthenticatedAccount,\r\n  unauthenticate: unauthenticate\r\n};\r\n```\r\n\r\nBefore we move on to the login interface, let\'s quickly update the login method of the Authentication service to use one of these new utility methods. Replace Authentication.login with the following:\r\n```js\r\n/**\r\n * @name login\r\n * @desc Try to log in with email `email` and password `password`\r\n * @param {string} email The email entered by the user\r\n * @param {string} password The password entered by the user\r\n * @returns {Promise}\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction login(email, password) {\r\n  return $http.post(\'/api/v1/auth/login/\', {\r\n    email: email, password: password\r\n  }).then(loginSuccessFn, loginErrorFn);\r\n\r\n  /**\r\n   * @name loginSuccessFn\r\n   * @desc Set the authenticated account and redirect to index\r\n   */\r\n  function loginSuccessFn(data, status, headers, config) {\r\n    Authentication.setAuthenticatedAccount(data.data);\r\n\r\n    window.location = \'/\';\r\n  }\r\n\r\n  /**\r\n   * @name loginErrorFn\r\n   * @desc Log \"Epic failure!\" to the console\r\n   */\r\n  function loginErrorFn(data, status, headers, config) {\r\n    console.error(\'Epic failure!\');\r\n  }\r\n}\r\n```\r\n\r\n###创建登陆前端\r\n\r\n我们现在已经有了 Authentication.login(). 打开文件 static/templates/authentication/login.html 并添加如下代码:\r\n```html\r\n<div class=\"row\">\r\n  <div class=\"col-md-4 col-md-offset-4\">\r\n    <h1>Login</h1>\r\n\r\n    <div class=\"well\">\r\n      <form role=\"form\" ng-submit=\"vm.login()\">\r\n        <div class=\"alert alert-danger\" ng-show=\"error\" ng-bind=\"error\"></div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"login__email\">Email</label>\r\n          <input type=\"text\" class=\"form-control\" id=\"login__email\" ng-model=\"vm.email\" placeholder=\"ex. john@example.com\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <label for=\"login__password\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"login__password\" ng-model=\"vm.password\" placeholder=\"ex. thisisnotgoogleplus\" />\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n###登陆控制器 LoginController\r\n\r\n创建文件 static/javascripts/authentication/controllers/login.controller.js 并添加如下代码:\r\n```js\r\n/**\r\n* LoginController\r\n* @namespace thinkster.authentication.controllers\r\n*/\r\n(function () {\r\n  \'use static\';\r\n\r\n  angular\r\n    .module(\'thinkster.authentication.controllers\')\r\n    .controller(\'LoginController\', LoginController);\r\n\r\n  LoginController.$inject = [\'$location\', \'$scope\', \'Authentication\'];\r\n\r\n  /**\r\n  * @namespace LoginController\r\n  */\r\n  function LoginController($location, $scope, Authentication) {\r\n    var vm = this;\r\n\r\n    vm.login = login;\r\n\r\n    activate();\r\n\r\n    /**\r\n    * @name activate\r\n    * @desc Actions to be performed when this controller is instantiated\r\n    * @memberOf thinkster.authentication.controllers.LoginController\r\n    */\r\n    function activate() {\r\n      // If the user is authenticated, they should not be here.\r\n      if (Authentication.isAuthenticated()) {\r\n        $location.url(\'/\');\r\n      }\r\n    }\r\n\r\n    /**\r\n    * @name login\r\n    * @desc Log the user in\r\n    * @memberOf thinkster.authentication.controllers.LoginController\r\n    */\r\n    function login() {\r\n      Authentication.login(vm.email, vm.password);\r\n    }\r\n  }\r\n})();\r\n```\r\nLet\'s look at the activate function.\r\n```js\r\nfunction activate() {\r\n  // If the user is authenticated, they should not be here.\r\n  if (Authentication.isAuthenticated()) {\r\n    $location.url(\'/\');\r\n  }\r\n}\r\n```\r\nYou will start to notice that we use a function called activate a lot throughout this tutorial. There is nothing inherently special about this name; we chose a standard name for the function that will be run when any given controller is instantiated.\r\n\r\nAs the comment suggests, if a user is already authenticated, they have no business on the login page. We solve this by redirecting the user to the index page.\r\n\r\nWe should do this on the registration page too. When we wrote the registration controller, we didn\'t have Authentication.isAuthenticated(). We will update RegisterController shortly.\r\n\r\n###返回注册控制器RegisterController\r\n\r\nTaking a step back, let\'s add a check to RegisterController and redirect the user if they are already authenticated.\r\n\r\n打开文件 static/javascripts/authentication/controllers/register.controller.js 并在controller中添加如下代码:\r\n```js\r\n/**\r\n * @name activate\r\n * @desc Actions to be performed when this controller is instantiated\r\n * @memberOf thinkster.authentication.controllers.RegisterController\r\n */\r\nfunction activate() {\r\n  // If the user is authenticated, they should not be here.\r\n  if (Authentication.isAuthenticated()) {\r\n    $location.url(\'/\');\r\n  }\r\n}\r\n```\r\n\r\nIf you remember, we also talked about logging a user in automatically when they register. Since we are already updating registration related content, let\'s update the register method in the Authentication service.\r\n\r\nReplace Authentication.register when the following:\r\n```js\r\n/**\r\n* @name register\r\n* @desc Try to register a new user\r\n* @param {string} email The email entered by the user\r\n* @param {string} password The password entered by the user\r\n* @param {string} username The username entered by the user\r\n* @returns {Promise}\r\n* @memberOf thinkster.authentication.services.Authentication\r\n*/\r\nfunction register(email, password, username) {\r\n  return $http.post(\'/api/v1/accounts/\', {\r\n    username: username,\r\n    password: password,\r\n    email: email\r\n  }).then(registerSuccessFn, registerErrorFn);\r\n\r\n  /**\r\n  * @name registerSuccessFn\r\n  * @desc Log the new user in\r\n  */\r\n  function registerSuccessFn(data, status, headers, config) {\r\n    Authentication.login(email, password);\r\n  }\r\n\r\n  /**\r\n  * @name registerErrorFn\r\n  * @desc Log \"Epic failure!\" to the console\r\n  */\r\n  function registerErrorFn(data, status, headers, config) {\r\n    console.error(\'Epic failure!\');\r\n  }\r\n}\r\n```\r\n\r\n###添加登陆路由信息\r\n\r\nThe next step is to create the client-side route for the login form.\r\n\r\n打开文件 static/javascripts/thinkster.routes.js 并添加如下代码:\r\n```js\r\n$routeProvider.when(\'/register\', {\r\n  controller: \'RegisterController\', \r\n  controllerAs: \'vm\',\r\n  templateUrl: \'/static/templates/authentication/register.html\'\r\n}).when(\'/login\', {\r\n  controller: \'LoginController\',\r\n  controllerAs: \'vm\',\r\n  templateUrl: \'/static/templates/authentication/login.html\'\r\n}).otherwise(\'/\');\r\n```\r\n\r\n###添加js文件\r\n\r\n在 javascripts.html 文件中添加login.controller.js.\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/authentication/controllers/login.controller.js\' %}\"></script>\r\n```\r\n\r\n###检查结果\r\n\r\n打开 http://localhost:8000/login . 正常情况下, 页面将跳转到 http://localhost:8000/ 但导航(就是url地址)会变化.\r\n\r\n##用户注销\r\n\r\n用户注册, 登陆都有了, 接下来应该就是注销了.\r\n\r\n###创建注销 API\r\n\r\n打开文件 authentication/views.py 并添加如下代码:\r\n```python\r\nfrom django.contrib.auth import logout\r\n\r\nfrom rest_framework import permissions\r\n\r\nclass LogoutView(views.APIView):\r\n    permission_classes = (permissions.IsAuthenticated,)\r\n\r\n    def post(self, request, format=None):\r\n        logout(request)\r\n\r\n        return Response({}, status=status.HTTP_204_NO_CONTENT)\r\n```\r\n\r\nThere are only a few new things to talk about this time.\r\n```python\r\npermission_classes = (permissions.IsAuthenticated,)\r\n```\r\nOnly authenticated users should be able to hit this endpoint. Django REST Framework\'s permissions.IsAuthenticated handles this for us. If you user is not authenticated, they will get a 403 error.\r\n```python\r\nlogout(request)\r\n```\r\nIf the user is authenticated, all we need to do is call Django\'s logout() method.\r\n```python\r\nreturn Response({}, status=status.HTTP_204_NO_CONTENT)\r\n```\r\nThere isn\'t anything reasonable to return when logging out, so we just return an empty response with a 200 status code.\r\n\r\nMoving on to the URLs.\r\n\r\n打开文件 urls.py 添加路由信息:\r\n```python\r\nfrom authentication.views import LogoutView\r\n\r\nurlpatterns = patterns(\r\n    # ...\r\n    url(r\'^api/v1/auth/logout/$\', LogoutView.as_view(), name=\'logout\'),\r\n    #...\r\n)\r\n```\r\n\r\n###注销: AngularJS Service\r\n\r\n最后我们需要在AngularJS中添加 logout() 方法.\r\n\r\n在 authentication.service.js 文件中添加如下代码:\r\n```js\r\n/**\r\n * @name logout\r\n * @desc Try to log the user out\r\n * @returns {Promise}\r\n * @memberOf thinkster.authentication.services.Authentication\r\n */\r\nfunction logout() {\r\n  return $http.post(\'/api/v1/auth/logout/\')\r\n    .then(logoutSuccessFn, logoutErrorFn);\r\n\r\n  /**\r\n   * @name logoutSuccessFn\r\n   * @desc Unauthenticate and redirect to index with page reload\r\n   */\r\n  function logoutSuccessFn(data, status, headers, config) {\r\n    Authentication.unauthenticate();\r\n\r\n    window.location = \'/\';\r\n  }\r\n\r\n  /**\r\n   * @name logoutErrorFn\r\n   * @desc Log \"Epic failure!\" to the console\r\n   */\r\n  function logoutErrorFn(data, status, headers, config) {\r\n    console.error(\'Epic failure!\');\r\n  }\r\n}\r\n```\r\nAs always, remember to expose logout as part of the Authentication service:\r\n```js\r\nvar Authentication = {\r\n  getAuthenticatedUser: getAuthenticatedUser,\r\n  isAuthenticated: isAuthenticated,\r\n  login: login,\r\n  logout: logout,\r\n  register: register,\r\n  setAuthenticatedUser: setAuthenticatedUser,\r\n  unauthenticate: unauthenticate\r\n};\r\n```\r\n\r\n###导航条控制器 NavbarController\r\n\r\nThere will not actually be a LogoutController or logout.html. Instead, the navigation bar already contains a logout link for authenticated users. We will create a NavbarController for handling the logout buttons onclick functionality and we will update the link itself with an ng-click attribute.\r\n\r\n创建文件 static/javascripts/layout/controllers/navbar.controller.js 并添加如下代码:\r\n```js\r\n/**\r\n* NavbarController\r\n* @namespace thinkster.layout.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.layout.controllers\')\r\n    .controller(\'NavbarController\', NavbarController);\r\n\r\n  NavbarController.$inject = [\'$scope\', \'Authentication\'];\r\n\r\n  /**\r\n  * @namespace NavbarController\r\n  */\r\n  function NavbarController($scope, Authentication) {\r\n    var vm = this;\r\n\r\n    vm.logout = logout;\r\n\r\n    /**\r\n    * @name logout\r\n    * @desc Log the user out\r\n    * @memberOf thinkster.layout.controllers.NavbarController\r\n    */\r\n    function logout() {\r\n      Authentication.logout();\r\n    }\r\n  }\r\n})();\r\n```\r\n打开文件 templates/navbar.html 并添加导航条:\r\n```html\r\n<nav class=\"navbar navbar-default\" role=\"navigation\" ng-controller=\"NavbarController as vm\">\r\n```\r\n同时打开文件 templates/navbar.html 找到 logout 添加 ng-click=\"vm.logout()\" :\r\n```html\r\n<li><a href=\"javascript:void(0)\" ng-click=\"vm.logout()\">Logout</a></li>\r\n```\r\n\r\n###布局 Module\r\n\r\n我们还需要添加一些新的modules.\r\n\r\n创建文件 static/javascripts/layout/layout.module.js 并添加如下代码:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.layout\', [\r\n      \'thinkster.layout.controllers\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.layout.controllers\', []);\r\n})();\r\n```\r\n同时不要忘记在 static/javascripts/thinkster.js 中添加依赖:\r\n```js\r\nangular\r\n  .module(\'thinkster\', [\r\n    \'thinkster.config\',\r\n    \'thinkster.routes\',\r\n    \'thinkster.authentication\',\r\n    \'thinkster.layout\'\r\n  ]);\r\n```\r\n\r\n###添加js文件\r\n\r\n我们新建了几个js文件, 需要在html中载入:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/layout/layout.module.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/layout/controllers/navbar.controller.js\' %}\"></script>\r\n```\r\n\r\n###查看结果\r\n\r\n访问 http://localhost:8000/ 页面, 此时应该是登陆状态, 如果不是, 请登陆.\r\n同时你也可以查看注销功能是否正常.\r\n\r\n***到此为止, 用户的认证功能基本完成了!***\r\n\r\n##创建日志模块(Post model)\r\n\r\nIn this section we will make a new app and create a Post model similar to a status on Facebook or a tweet on Twitter. After we create our model we will move on to serializing Posts and then we will create a few new endpoints for our API.\r\n\r\n###创建post app\r\n\r\n首先创建一个新的app名为posts.\r\n```python\r\n$ python manage.py startapp posts\r\n```\r\n注意在创建app后一定要在settings.py中的INSTALLED_APPS 添加对应的app:\r\n```python\r\nINSTALLED_APPS = (\r\n    # ...\r\n    \'posts\',\r\n)\r\n```\r\n###创建Post model\r\n\r\n打开文件 posts/models.py 并添加如下代码:\r\n```python\r\nfrom django.db import models\r\n\r\nfrom authentication.models import Account\r\n\r\nclass Post(models.Model):\r\n    author = models.ForeignKey(Account)\r\n    content = models.TextField()\r\n\r\n    created_at = models.DateTimeField(auto_now_add=True)\r\n    updated_at = models.DateTimeField(auto_now=True)\r\n\r\n    def __unicode__(self):\r\n        return \'{0}\'.format(self.content)\r\n```\r\n\r\nOur method of walking through the code line-by-line is working well so far. Why mess with a good thing? Let\'s do it.\r\n```python\r\nauthor = models.ForeignKey(Account)\r\n```\r\nBecause each Account can have many Post objects, we need to set up a many-to-one relation.\r\n\r\nThe way to do this in Django is with using a ForeignKey field to associate each Post with a Account.\r\n\r\nDjango is smart enough to know the foreign key we\'ve set up here should be reversible. That is to say, given a Account, you should be able to access that user\'s Posts. In Django these Post objects can be accessed through Account.post_set (not Account.posts).\r\n\r\nNow that the model exists, don\'t forget to migrate.\r\n```python\r\n$ python manage.py makemigrations\r\n$ python manage.py migrate\r\n```\r\n\r\n###序列化 Post model\r\n\r\n创建文件 posts/serializers.py 并添加如下代码:\r\n```python\r\nfrom rest_framework import serializers\r\n\r\nfrom authentication.serializers import Account\r\nfrom posts.models import Post\r\n\r\n\r\nclass PostSerializer(serializers.ModelSerializer):\r\n    author = AccountSerializer(read_only=True, required=False)\r\n\r\n    class Meta:\r\n        model = Post\r\n\r\n        fields = (\'id\', \'author\', \'content\', \'created_at\', \'updated_at\')\r\n        read_only_fields = (\'id\', \'created_at\', \'updated_at\')\r\n\r\n    def get_validation_exclusions(self, *args, **kwargs):\r\n        exclusions = super(PostSerializer, self).get_validation_exclusions()\r\n\r\n        return exclusions + [\'author\']\r\n```\r\n\r\n这段代码其实在Account应用中已经见过了, 但也有一些差别.\r\n```python\r\nauthor = AccountSerializer(read_only=True, required=False)\r\n```\r\nWe explicitly defined a number of fields in our AccountSerializer from before, but this definition is a little different.\r\n\r\n当序列化一个Post对象时, 我们希望它包含作者的相关信息. 在Django REST Framework中可以通过关系数据实现.\r\n\r\n我们添加了 read_only=True 属性是因为我们不希望在创建(更新)post时更新用户信息. 我们还设置了 required=False 因为我们会自动设置作者为当前登陆用户.\r\n```python\r\ndef get_validation_exclusions(self, *args, **kwargs):\r\n    exclusions = super(PostSerializer, self).get_validation_exclusions()\r\n\r\n    return exclusions + [\'author\']\r\n```\r\n基于同样的原因, 我们必须手工添加作者到**不验证**列表中.\r\n\r\n###创建Post API\r\n\r\nThe next step in creating Post objects is adding an API endpoint that will handle performing actions on the Post model such as create or update.\r\n\r\n打开文件 posts/views.py 并添加如下代码:\r\n```python\r\nfrom rest_framework import permissions, viewsets\r\nfrom rest_framework.response import Response\r\n\r\nfrom posts.models import Post\r\nfrom posts.permissions import IsAuthorOfPost\r\nfrom posts.serializers import PostSerializer\r\n\r\n\r\nclass PostViewSet(viewsets.ModelViewSet):\r\n    queryset = Post.objects.order_by(\'-created_at\')\r\n    serializer_class = PostSerializer\r\n\r\n    def get_permissions(self):\r\n        if self.request.method in permissions.SAFE_METHODS:\r\n            return (permissions.AllowAny(),)\r\n        return (permissions.IsAuthenticated(), IsAuthorOfPost(),)\r\n\r\ndef perform_create(self, serializer):\r\n    instance = serializer.save(author=self.request.user)\r\n\r\n    return super(PostViewSet, self).perform_create(serializer)\r\n\r\n\r\n\r\nclass AccountPostsViewSet(viewsets.ViewSet):\r\n    queryset = Post.objects.select_related(\'author\').all()\r\n    serializer_class = PostSerializer\r\n\r\n    def list(self, request, account_username=None):\r\n        queryset = self.queryset.filter(author__username=account_username)\r\n        serializer = self.serializer_class(queryset, many=True)\r\n\r\n        return Response(serializer.data)\r\n```\r\n\r\nDo these views look similar? They aren\'t that different than the ones we made to create User objects.\r\n```python\r\ndef perform_create(self, serializer):\r\n    instance = serializer.save(author=self.request.user)\r\n\r\n    return super(PostViewSet, self).perform_create(serializer)\r\n```\r\nperform_create is called before the model of this view is saved.\r\n\r\nWhen a Post object is created it has to be associated with an author. Making the author type in their own username or id when creating adding a post to the site would be a bad experience, so we handle this association for them with the perform_create hook. We simply grab the user associated with this request and make them the author of this Post.\r\n```python\r\ndef get_permissions(self):\r\n    if self.request.method in permissions.SAFE_METHODS:\r\n        return (permissions.AllowAny(),)\r\n    return (permissions.IsAuthenticated(), IsAuthorOfPost(),)\r\n```\r\nSimilar to the permissions we used for the Account viewset, dangerous HTTP methods require the user be authenticated and authorized to make changes to this Post. We will created the IsAuthorOfPost permission shortly. If the HTTP method is safe, we allow anyone to access this view.\r\n```python\r\nclass AccountPostsViewSet(viewsets.ViewSet):\r\n```\r\nThis viewset will be used to list the posts associated with a specific Account.\r\n```python\r\nqueryset = self.queryset.filter(author__username=account_username)\r\n```\r\nHere we filter our queryset based on the author\'s username. The account_username argument will be supplied by the router we will create in a few minutes.\r\n\r\n###创建认证用户之权限设置\r\n\r\n创建文件 posts/permissions.py 并添加如下代码:\r\n```python\r\nfrom rest_framework import permissions\r\n\r\n\r\nclass IsAuthorOfPost(permissions.BasePermission):\r\n    def has_object_permission(self, request, view, post):\r\n        if request.user:\r\n            return post.author == request.user\r\n        return False\r\n```\r\n这段代码就不做解释了, 和前面提到的权限代码基本一致.\r\n\r\n###添加Posts API 路由\r\n\r\nWith the views created, it\'s time to add the endpoints to our API.\r\n\r\n打开文件 urls.py 并添加路由信息:\r\n```python\r\nfrom posts.views import AccountPostsViewSet, PostViewSet\r\n```\r\nNow add these lines just above urlpatterns = patterns(:\r\n```python\r\nrouter.register(r\'posts\', PostViewSet)\r\n\r\naccounts_router = routers.NestedSimpleRouter(\r\n    router, r\'accounts\', lookup=\'account\'\r\n)\r\naccounts_router.register(r\'posts\', AccountPostsViewSet)\r\n```\r\naccounts_router provides the nested routing need to access the posts for a specific Account. You should also now add accounts_router to urlpatterns like so:\r\n```python\r\nurlpatterns = patterns(\r\n  # ...\r\n\r\n  url(r\'^api/v1/\', include(router.urls)),\r\n  url(r\'^api/v1/\', include(accounts_router.urls)),\r\n\r\n  # ...\r\n)\r\n```\r\n\r\n###查看结果\r\n\r\n在命令行键入 python manage.py shell 然后根据以下代码查看结果.\r\n```python\r\n>>> from authentication.models import Account\r\n>>> from posts.models import Post\r\n>>> from posts.serializers import PostSerializer\r\n>>> account = Account.objects.latest(\'created_at\')\r\n>>> post = Post.objects.create(author=account, content=\'I promise this is not Google Plus!\')\r\n>>> serialized_post = PostSerializer(post)\r\n>>> serialized_post.data\r\n```\r\n\r\nWe will confirm the views are working at the end of the next section.\r\n\r\n##Post前端实现\r\n\r\n到目前为止, 首页还是空页面. 现在我们已经有了用户认证和Post model, 是时候在首页显示Post信息了.\r\n\r\n###posts模块\r\n\r\n定义posts模块.\r\n\r\n创建文件 static/javascripts/posts/posts.module.js 并添加如下代码:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts\', [\r\n      \'thinkster.posts.controllers\',\r\n      \'thinkster.posts.directives\',\r\n      \'thinkster.posts.services\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.posts.controllers\', []);\r\n\r\n  angular\r\n    .module(\'thinkster.posts.directives\', [\'ngDialog\']);\r\n\r\n  angular\r\n    .module(\'thinkster.posts.services\', []);\r\n})();\r\n```\r\n记得在 thinkster.js 文件中添加依赖:\r\n```js\r\nangular\r\n  .module(\'thinkster\', [\r\n    \'thinkster.config\',\r\n    \'thinkster.routes\',\r\n    \'thinkster.authentication\',\r\n    \'thinkster.layout\',\r\n    \'thinkster.posts\'\r\n  ]);\r\n```\r\n\r\nThere are two things worth noting about this module.\r\n\r\nFirst, we have created a module named thinkster.posts.directives. As you probably guessed, this means we will introduce the concept of directives to our app in this chapter.\r\n\r\nSecondly, the thinkster.posts.directives module requires the ngDialog module. ngDialog is included in the boilerplate project and handles the display of modals. We will use a modal in the next chapter when we write the code for creating new posts.\r\n\r\n在 javascripts.html 文件中载入js文件:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/posts.module.js\' %}\"></script>\r\n```\r\n\r\n###创建Posts服务\r\n\r\n在渲染页面之前, 我们需要从服务端读取相应的数据.\r\n\r\n创建文件 static/javascripts/posts/services/posts.service.js 并添加如下代码:\r\n```js\r\n/**\r\n* Posts\r\n* @namespace thinkster.posts.services\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts.services\')\r\n    .factory(\'Posts\', Posts);\r\n\r\n  Posts.$inject = [\'$http\'];\r\n\r\n  /**\r\n  * @namespace Posts\r\n  * @returns {Factory}\r\n  */\r\n  function Posts($http) {\r\n    var Posts = {\r\n      all: all,\r\n      create: create,\r\n      get: get\r\n    };\r\n\r\n    return Posts;\r\n\r\n    ////////////////////\r\n\r\n    /**\r\n    * @name all\r\n    * @desc Get all Posts\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.posts.services.Posts\r\n    */\r\n    function all() {\r\n      return $http.get(\'/api/v1/posts/\');\r\n    }\r\n\r\n\r\n    /**\r\n    * @name create\r\n    * @desc Create a new Post\r\n    * @param {string} content The content of the new Post\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.posts.services.Posts\r\n    */\r\n    function create(content) {\r\n      return $http.post(\'/api/v1/posts/\', {\r\n        content: content\r\n      });\r\n    }\r\n\r\n    /**\r\n     * @name get\r\n     * @desc Get the Posts of a given user\r\n     * @param {string} username The username to get Posts for\r\n     * @returns {Promise}\r\n     * @memberOf thinkster.posts.services.Posts\r\n     */\r\n    function get(username) {\r\n      return $http.get(\'/api/v1/accounts/\' + username + \'/posts/\');\r\n    }\r\n  }\r\n})();\r\n```\r\n在 javascripts.html 文件中载入js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/services/posts.service.js\' %}\"></script>\r\n```\r\n\r\nThis code should look pretty familiar. It is very similar to the services we created before.\r\n\r\nThe Posts service only has two methods: all and create.\r\n\r\nOn the index page, we will use Posts.all() to get the list of objects we want to display. We will use Posts.create() to let users add their own posts.\r\n\r\n###创建首页页面\r\n\r\n创建文件 static/templates/layout/index.html:\r\n```html\r\n<posts posts=\"vm.posts\" ng-show=\"vm.posts && vm.posts.length\"></posts>\r\n```\r\n\r\nWe will add a little more later, but not much. Most of what we need will be in the template we create for the posts directive next.\r\n\r\n###创建 Snackbar 服务\r\n\r\nIn the boilerplate project for this tutorial, we\'ve included SnackbarJS. SnackbarJS is a small JavaScript library that makes showing snackbars (a concept from Google\'s Material Design) easy. Here, we will create a service to include this functionality in our AngularJS application.\r\n\r\n打开文件 static/javascripts/utils/services/snackbar.service.js 并添加如下代码:\r\n```js\r\n/**\r\n* Snackbar\r\n* @namespace thinkster.utils.services\r\n*/\r\n(function ($, _) {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.utils.services\')\r\n    .factory(\'Snackbar\', Snackbar);\r\n\r\n  /**\r\n  * @namespace Snackbar\r\n  */\r\n  function Snackbar() {\r\n    /**\r\n    * @name Snackbar\r\n    * @desc The factory to be returned\r\n    */\r\n    var Snackbar = {\r\n      error: error,\r\n      show: show\r\n    };\r\n\r\n    return Snackbar;\r\n\r\n    ////////////////////\r\n\r\n    /**\r\n    * @name _snackbar\r\n    * @desc Display a snackbar\r\n    * @param {string} content The content of the snackbar\r\n    * @param {Object} options Options for displaying the snackbar\r\n    */\r\n    function _snackbar(content, options) {\r\n      options = _.extend({ timeout: 3000 }, options);\r\n      options.content = content;\r\n\r\n      $.snackbar(options);\r\n    }\r\n\r\n\r\n    /**\r\n    * @name error\r\n    * @desc Display an error snackbar\r\n    * @param {string} content The content of the snackbar\r\n    * @param {Object} options Options for displaying the snackbar\r\n    * @memberOf thinkster.utils.services.Snackbar\r\n    */\r\n    function error(content, options) {\r\n      _snackbar(\'Error: \' + content, options);\r\n    }\r\n\r\n\r\n    /**\r\n    * @name show\r\n    * @desc Display a standard snackbar\r\n    * @param {string} content The content of the snackbar\r\n    * @param {Object} options Options for displaying the snackbar\r\n    * @memberOf thinkster.utils.services.Snackbar\r\n    */\r\n    function show(content, options) {\r\n      _snackbar(content, options);\r\n    }\r\n  }\r\n})($, _);\r\n```\r\n在 static/javascripts/utils/utils.module.js 中添加依赖:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.utils\', [\r\n      \'thinkster.utils.services\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.utils.services\', []);\r\n})();\r\n```\r\n在 static/javascripts/thinkster.js 中也添加依赖关系: \r\n```js\r\nangular\r\n  .module(\'thinkster\', [\r\n    // ...\r\n    \'thinkster.utils\',\r\n    // ...\r\n  ]);\r\n```\r\n最后在 javascripts.html 中载入新建的js文件:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/utils/utils.module.js\' %}\"></script>\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/utils/services/snackbar.service.js\' %}\"></script>\r\n```\r\n\r\n###首页控制器 IndexController\r\n\r\n创建文件 static/javascripts/layout/controllers/index.controller.js 并添加如下代码:\r\n```js\r\n/**\r\n* IndexController\r\n* @namespace thinkster.layout.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.layout.controllers\')\r\n    .controller(\'IndexController\', IndexController);\r\n\r\n  IndexController.$inject = [\'$scope\', \'Authentication\', \'Posts\', \'Snackbar\'];\r\n\r\n  /**\r\n  * @namespace IndexController\r\n  */\r\n  function IndexController($scope, Authentication, Posts, Snackbar) {\r\n    var vm = this;\r\n\r\n    vm.isAuthenticated = Authentication.isAuthenticated();\r\n    vm.posts = [];\r\n\r\n    activate();\r\n\r\n    /**\r\n    * @name activate\r\n    * @desc Actions to be performed when this controller is instantiated\r\n    * @memberOf thinkster.layout.controllers.IndexController\r\n    */\r\n    function activate() {\r\n      Posts.all().then(postsSuccessFn, postsErrorFn);\r\n\r\n      $scope.$on(\'post.created\', function (event, post) {\r\n        vm.posts.unshift(post);\r\n      });\r\n\r\n      $scope.$on(\'post.created.error\', function () {\r\n        vm.posts.shift();\r\n      });\r\n\r\n\r\n      /**\r\n      * @name postsSuccessFn\r\n      * @desc Update posts array on view\r\n      */\r\n      function postsSuccessFn(data, status, headers, config) {\r\n        vm.posts = data.data;\r\n      }\r\n\r\n\r\n      /**\r\n      * @name postsErrorFn\r\n      * @desc Show snackbar with error\r\n      */\r\n      function postsErrorFn(data, status, headers, config) {\r\n        Snackbar.error(data.error);\r\n      }\r\n    }\r\n  }\r\n})();\r\n```\r\n在 javascripts.html 中载入:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/layout/controllers/index.controller.js\' %}\"></script>\r\n```\r\n> Include index.controller.js in javascripts.html\r\n\r\nLet\'s touch on a couple of things here.\r\n```js\r\n$scope.$on(\'post.created\', function (event, post) {\r\n  vm.posts.unshift(post);\r\n});\r\n```\r\nLater, when we get around to creating a new post, we will fire off an event called post.created when the user creates a post. By catching this event here, we can add this new post to the front of the vm.posts array. This will prevent us from having to make an extra API request to the server for updated data. We will talk about this more shortly, but for now you should know that we do this to increase the perceived performance of our application.\r\n```js\r\n$scope.$on(\'post.created.error\', function () {\r\n  vm.posts.shift();\r\n});\r\n```\r\nAnalogous to the previous event listener, this one will remove the post at the front of vm.posts if the API request returns an error status code.\r\n\r\n###添加首页路由信息\r\n\r\nWith a controller and template in place, we need to set up a route for the index page.\r\n\r\n打开文件 static/javascripts/thinkster.routes.js 并添加如下路由: \r\n```js\r\n.when(\'/\', {\r\n  controller: \'IndexController\',\r\n  controllerAs: \'vm\',\r\n  templateUrl: \'/static/templates/layout/index.html\'\r\n})\r\n```\r\n\r\n###创建显示Posts的指令\r\n\r\n创建文件 static/javascripts/posts/directives/posts.directive.js 并添加如下代码:\r\n```js\r\n/**\r\n* Posts\r\n* @namespace thinkster.posts.directives\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts.directives\')\r\n    .directive(\'posts\', posts);\r\n\r\n  /**\r\n  * @namespace Posts\r\n  */\r\n  function posts() {\r\n    /**\r\n    * @name directive\r\n    * @desc The directive to be returned\r\n    * @memberOf thinkster.posts.directives.Posts\r\n    */\r\n    var directive = {\r\n      controller: \'PostsController\',\r\n      controllerAs: \'vm\',\r\n      restrict: \'E\',\r\n      scope: {\r\n        posts: \'=\'\r\n      },\r\n      templateUrl: \'/static/templates/posts/posts.html\'\r\n    };\r\n\r\n    return directive;\r\n  }\r\n})();\r\n```\r\njavascripts.html 中载入js文件:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/directives/posts.directive.js\' %}\"></script>\r\n```\r\n\r\nThere are two parts of the directives API that I want to touch on: scope and restrict.\r\n```js\r\nscope: {\r\n  posts: \'=\'\r\n},\r\n```\r\nscope defines the scope of this directive, similar to how $scope works for controllers. The difference is that, in a controller, a new scope is implicitly created. For a directive, we have the option of explicitly defining our scopes and that\'s what we do here.\r\n\r\nThe second line, posts: \'=\' simply means that we want to set $scope.posts to the value passed in through the posts attribute in the template that we made earlier.\r\n```js\r\nrestrict: \'E\',\r\n```\r\nrestrict tells Angular how we are allowed to use this directive. In our case, we set the value of restrict to E (for element) which means Angular should only match the name of our directive with the name of an element: <posts></posts>.\r\n\r\nAnother common option is A (for attribute), which tells Angular to only match the name of the directive with the name of an attribute. ngDialog uses this option, as we will see shortly.\r\n\r\n###Posts 控制器 PostsController\r\n\r\nThe directive we just created requires a controller called PostsController.\r\n\r\n创建文件 static/javascripts/posts/controllers/posts.controller.js 并添加如下代码:\r\n```js\r\n/**\r\n* PostsController\r\n* @namespace thinkster.posts.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts.controllers\')\r\n    .controller(\'PostsController\', PostsController);\r\n\r\n  PostsController.$inject = [\'$scope\'];\r\n\r\n  /**\r\n  * @namespace PostsController\r\n  */\r\n  function PostsController($scope) {\r\n    var vm = this;\r\n\r\n    vm.columns = [];\r\n\r\n    activate();\r\n\r\n\r\n    /**\r\n    * @name activate\r\n    * @desc Actions to be performed when this controller is instantiated\r\n    * @memberOf thinkster.posts.controllers.PostsController\r\n    */\r\n    function activate() {\r\n      $scope.$watchCollection(function () { return $scope.posts; }, render);\r\n      $scope.$watch(function () { return $(window).width(); }, render);\r\n    }\r\n\r\n\r\n    /**\r\n    * @name calculateNumberOfColumns\r\n    * @desc Calculate number of columns based on screen width\r\n    * @returns {Number} The number of columns containing Posts\r\n    * @memberOf thinkster.posts.controllers.PostsControllers\r\n    */\r\n    function calculateNumberOfColumns() {\r\n      var width = $(window).width();\r\n\r\n      if (width >= 1200) {\r\n        return 4;\r\n      } else if (width >= 992) {\r\n        return 3;\r\n      } else if (width >= 768) {\r\n        return 2;\r\n      } else {\r\n        return 1;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n    * @name approximateShortestColumn\r\n    * @desc An algorithm for approximating which column is shortest\r\n    * @returns The index of the shortest column\r\n    * @memberOf thinkster.posts.controllers.PostsController\r\n    */\r\n    function approximateShortestColumn() {\r\n      var scores = vm.columns.map(columnMapFn);\r\n\r\n      return scores.indexOf(Math.min.apply(this, scores));\r\n\r\n\r\n      /**\r\n      * @name columnMapFn\r\n      * @desc A map function for scoring column heights\r\n      * @returns The approximately normalized height of a given column\r\n      */\r\n      function columnMapFn(column) {\r\n        var lengths = column.map(function (element) {\r\n          return element.content.length;\r\n        });\r\n\r\n        return lengths.reduce(sum, 0) * column.length;\r\n      }\r\n\r\n\r\n      /**\r\n      * @name sum\r\n      * @desc Sums two numbers\r\n      * @params {Number} m The first number to be summed\r\n      * @params {Number} n The second number to be summed\r\n      * @returns The sum of two numbers\r\n      */\r\n      function sum(m, n) {\r\n        return m + n;\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n    * @name render\r\n    * @desc Renders Posts into columns of approximately equal height\r\n    * @param {Array} current The current value of `vm.posts`\r\n    * @param {Array} original The value of `vm.posts` before it was updated\r\n    * @memberOf thinkster.posts.controllers.PostsController\r\n    */\r\n    function render(current, original) {\r\n      if (current !== original) {\r\n        vm.columns = [];\r\n\r\n        for (var i = 0; i < calculateNumberOfColumns(); ++i) {\r\n          vm.columns.push([]);\r\n        }\r\n\r\n        for (var i = 0; i < current.length; ++i) {\r\n          var column = approximateShortestColumn();\r\n\r\n          vm.columns[column].push(current[i]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n})();\r\n```\r\njavascripts.html 中载入js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/controllers/posts.controller.js\' %}\"></script>\r\n```\r\n\r\nIt isn\'t worth taking the time to step through this controller line-by-line. Suffice it to say that this controller presents an algorithm for ensuring the columns of posts are of approximately equal height.\r\n\r\nThe only thing worth mentioning here is this line:\r\n```js\r\n$scope.$watchCollection(function () { return $scope.posts; }, render);\r\n```\r\nBecause we do not have direct access to the ViewModel that posts is stored on, we watch $scope.posts instead of vm.posts. Furthermore, we use $watchCollection here because $scope.posts is an array. $watch watches the object\'s reference, not it\'s actual value. $watchCollection watches the value of an array from changes. If we used $watch here instead of $watchCollection, the changes caused by $scope.posts.shift() and $scope.posts.unshift() would not trigger the watcher.\r\n\r\n###Posts指令的模板\r\n\r\nIn our directive we defined a templateUrl that doesn\'t match any of our existing templates. Let\'s go ahead and make a new one.\r\n\r\n创建文件 static/templates/posts/posts.html 并添加如下代码:\r\n```html\r\n<div class=\"row\" ng-cloak>\r\n  <div ng-repeat=\"column in vm.columns\">\r\n    <div class=\"col-xs-12 col-sm-6 col-md-4 col-lg-3\">\r\n      <div ng-repeat=\"post in column\">\r\n        <post post=\"post\"></post>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div ng-hide=\"vm.columns && vm.columns.length\">\r\n    <div class=\"col-sm-12 no-posts-here\">\r\n      <em>The are no posts here.</em>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\nA few things worth noting:\r\n\r\n1.     We use the ng-cloak directive to prevent flashing since this directive will be used on the first page loaded.\r\n2.     We will need to create a post directive for rendering each individual post.\r\n3.     If no posts are present, we render a message informing the user.\r\n\r\n###创建单日志显示指令\r\n\r\nIn the template for the posts directive, we use another directive called post. Let\'s create that.\r\n\r\n创建文件 static/javascripts/posts/directives/post.directive.js 并添加如下代码:\r\n```js\r\n/**\r\n* Post\r\n* @namespace thinkster.posts.directives\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts.directives\')\r\n    .directive(\'post\', post);\r\n\r\n  /**\r\n  * @namespace Post\r\n  */\r\n  function post() {\r\n    /**\r\n    * @name directive\r\n    * @desc The directive to be returned\r\n    * @memberOf thinkster.posts.directives.Post\r\n    */\r\n    var directive = {\r\n      restrict: \'E\',\r\n      scope: {\r\n        post: \'=\'\r\n      },\r\n      templateUrl: \'/static/templates/posts/post.html\'\r\n    };\r\n\r\n    return directive;\r\n  }\r\n})();\r\n```\r\njavascripts.html中载入js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/directives/post.directive.js\' %}\"></script>\r\n```\r\nThere is nothing new worth discussing here. This directive is almost identical to the previous one. The only difference is we use a different template.\r\n\r\n###日志详情模板\r\n\r\nLike we did for the posts directive, we now need to make a template for the post directive.\r\n\r\n创建文件 static/templates/posts/post.html 兵添加如下代码:\r\n```html\r\n<div class=\"row\">\r\n  <div class=\"col-sm-12\">\r\n    <div class=\"well\">\r\n      <div class=\"post\">\r\n        <div class=\"post__meta\">\r\n          <a href=\"/+{{ post.author.username }}\">\r\n            +{{ post.author.username }}\r\n          </a>\r\n        </div>\r\n\r\n        <div class=\"post__content\">\r\n          {{ post.content }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n```\r\n\r\n###基本css布局\r\n\r\n我们需要添加一些简单的css布局, 打开文件 static/stylesheets/styles.css 并添加:\r\n```css\r\n.no-posts-here {\r\n  text-align: center;\r\n}\r\n\r\n.post {}\r\n\r\n.post .post__meta {\r\n  font-weight: bold;\r\n  text-align: right;\r\n  padding-bottom: 19px;\r\n}\r\n\r\n.post .post__meta a:hover {\r\n  text-decoration: none;\r\n}\r\n```\r\n\r\n###查看结果\r\n\r\nAssuming all is well, you can confirm you\'re on the right track by loading http://localhost:8000/ in your browser. You should see the Post object you created at the end of the last section!\r\n访问 http://localhost:8000/ 页面. 我们可以看到Post信息了.\r\n\r\n##创建新日志(Post)\r\n\r\nGiven that we already have the necessary endpoints in place, the next thing we need to let users make new posts is an interface. We accomplish this by adding a button to the bottom-right corner of the screen. When this button is clicked, a modal shows up asking the user to type in their post.\r\n\r\n打开文件 static/templates/layout/index.html 并在末尾添加如下代码:\r\n```html\r\n<a class=\"btn btn-primary btn-fab btn-raised mdi-content-add btn-add-new-post\"\r\n  href=\"javascript:void(0)\"\r\n  ng-show=\"vm.isAuthenticated\"\r\n  ng-dialog=\"/static/templates/posts/new-post.html\"\r\n  ng-dialog-controller=\"NewPostController as vm\"></a>\r\n```\r\nThe anchor tag in this snippet uses the ngDialog directive we included as a dependency earlier to show a modal when the user wants to submit a new post.\r\n\r\nBecause we want the button to be fixed to the bottom-right corner of the screen, we also need to add a new CSS rule.\r\n\r\n打开文件 static/stylesheets/styles.css 并添加:\r\n```css\r\n.btn-add-new-post {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n}\r\n```\r\n\r\n###创建日志(Post)之提交\r\n\r\n打开文件 static/templates/posts/new-post.html 并在末尾添加如下代码:\r\n```html\r\n<form role=\"form\" ng-submit=\"vm.submit()\">\r\n  <div class=\"form-group\">\r\n    <label for=\"post__content\">New Post</label>\r\n    <textarea class=\"form-control\" \r\n              id=\"post__content\" \r\n              rows=\"3\" \r\n              placeholder=\"ex. This is my first time posting on Not Google Plus!\" \r\n              ng-model=\"vm.content\">\r\n    </textarea>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <button type=\"submit\" class=\"btn btn-primary\">\r\n      Submit\r\n    </button>\r\n  </div>\r\n</form>\r\n```\r\n\r\n###创建新日志控制器 NewPostController\r\n\r\n创建文件 static/javascripts/posts/controller/new-post.controller.js 兵添加如下代码:\r\n```js\r\n/**\r\n* NewPostController\r\n* @namespace thinkster.posts.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.posts.controllers\')\r\n    .controller(\'NewPostController\', NewPostController);\r\n\r\n  NewPostController.$inject = [\'$rootScope\', \'$scope\', \'Authentication\', \'Snackbar\', \'Posts\'];\r\n\r\n  /**\r\n  * @namespace NewPostController\r\n  */\r\n  function NewPostController($rootScope, $scope, Authentication, Snackbar, Posts) {\r\n    var vm = this;\r\n\r\n    vm.submit = submit;\r\n\r\n    /**\r\n    * @name submit\r\n    * @desc Create a new Post\r\n    * @memberOf thinkster.posts.controllers.NewPostController\r\n    */\r\n    function submit() {\r\n      $rootScope.$broadcast(\'post.created\', {\r\n        content: vm.content,\r\n        author: {\r\n          username: Authentication.getAuthenticatedAccount().username\r\n        }\r\n      });\r\n\r\n      $scope.closeThisDialog();\r\n\r\n      Posts.create(vm.content).then(createPostSuccessFn, createPostErrorFn);\r\n\r\n\r\n      /**\r\n      * @name createPostSuccessFn\r\n      * @desc Show snackbar with success message\r\n      */\r\n      function createPostSuccessFn(data, status, headers, config) {\r\n        Snackbar.show(\'Success! Post created.\');\r\n      }\r\n\r\n\r\n      /**\r\n      * @name createPostErrorFn\r\n      * @desc Propogate error event and show snackbar with error message\r\n      */\r\n      function createPostErrorFn(data, status, headers, config) {\r\n        $rootScope.$broadcast(\'post.created.error\');\r\n        Snackbar.error(data.error);\r\n      }\r\n    }\r\n  }\r\n})();\r\n```\r\n\r\nThere are a few things going on here that we should talk about.\r\n```js\r\n$rootScope.$broadcast(\'post.created\', {\r\n  content: $scope.content,\r\n  author: {\r\n    username: Authentication.getAuthenticatedAccount().username\r\n  }\r\n});\r\n```\r\nEarlier we set up an event listener in IndexController that listened for the post.created event and then pushed the new post onto the front of vm.posts. Let\'s look at this a little more closely, as this turns out to be an important feature of rich web applications.\r\n\r\nWhat we are doing here is being optimistic that the API response from Posts.create() will contain a 200 status code telling us everything went according to plan. This may seem like a bad idea at first. Something could go wrong during the request and then our data is stale. Why don\'t we just wait for the response?\r\n\r\nWhen I said we are increasing the perceived performance of our app, this is what I was talking about. We want the user to perceive the response as instant.\r\n\r\nThe fact of the matter is that this call will rarely fail. There are only two cases where this will reasonably fail: either the user is not authenticated or the server is down.\r\n\r\nIn the case where the user is not authenticated, they shouldn\'t be submitting new posts anyways. Consider the error to be a small punishment for the user doing things they shouldn\'t.\r\n\r\nIf the server is down, then there is nothing we can do. Unless the user already had the page loaded before the server crashed, they wouldn\'t be able to see this page anyways.\r\n\r\nOther things that could possibly go wrong make up such a small percentage that we are willing to allow a slightly worse experience to make the experience better for the 99.9% of cases where everything is working properly.\r\n\r\nFurthermore, the object we pass as the second argument is meant to emulate the response from the server. This is not the best design pattern because it assumes we know what the response will look like. If the response changes, we have to update this code. However, given what we have, this is an acceptable cost.\r\n\r\nSo what happens when the API call returns an error?\r\n```js\r\n$rootScope.$broadcast(\'post.created.error\');\r\n```\r\nIf the error callback is triggered, then we will broadcast a new event: post.created.error. The event listener we set up earlier will be trigger by this event and remove the post at the front of vm.posts. We will also show the error message to the user to let them know what happened.\r\n```js\r\n$scope.closeThisDialog();\r\n```\r\nThis is a method provided by ngDialog. All it does is close the model we have open. It\'s also worth nothing that closeThisDialog() is not stored on the ViewModel, so we must call $scope.closeThisDialog() instead of vm.closeThisDialog().\r\n\r\n在 javascripts.html 中载入new-post.controller.js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/posts/controllers/new-post.controller.js\' %}\"></script>\r\n```\r\n\r\n###查看结果\r\n\r\n访问 http://localhost:8000/ 并点击右下脚的 + 按钮. 填写post相关信息并提交, 新增日志将会在首页上显示.\r\n\r\n##显示用户资料\r\n\r\nWe already have the Django views and routes necessary to display a profile for each user. From here we can jump into making an AngularJS service and then move on to the template and controllers.\r\n\r\n###创建用户资料模块\r\n\r\nWe will be creating a service and a couple of controllers relating to user profiles, so let\'s go ahead and define the modules we will need.\r\n\r\n创建文件 static/javascripts/profiles/profiles.module.js 并添加代码:\r\n```js\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.profiles\', [\r\n      \'thinkster.profiles.controllers\',\r\n      \'thinkster.profiles.services\'\r\n    ]);\r\n\r\n  angular\r\n    .module(\'thinkster.profiles.controllers\', []);\r\n\r\n  angular\r\n    .module(\'thinkster.profiles.services\', []);\r\n})();\r\n```\r\n在 thinkster.js 中添加thinkster.profiles依赖 :\r\n```js\r\nangular\r\n  .module(\'thinkster\', [\r\n    \'thinkster.config\',\r\n    \'thinkster.routes\',\r\n    \'thinkster.authentication\',\r\n    \'thinkster.layout\',\r\n    \'thinkster.posts\',\r\n    \'thinkster.profiles\'\r\n  ]);\r\n```\r\n载入js文件:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/profiles/profiles.module.js\' %}\"></script>\r\n```\r\n\r\n###创建Profile factory\r\n\r\nWith the module definitions in place, we are ready to create the Profile service that will communicate with our API.\r\n\r\n创建文件 static/javascripts/profiles/services/profile.service.js 并添加:\r\n```js\r\n/**\r\n* Profile\r\n* @namespace thinkster.profiles.services\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.profiles.services\')\r\n    .factory(\'Profile\', Profile);\r\n\r\n  Profile.$inject = [\'$http\'];\r\n\r\n  /**\r\n  * @namespace Profile\r\n  */\r\n  function Profile($http) {\r\n    /**\r\n    * @name Profile\r\n    * @desc The factory to be returned\r\n    * @memberOf thinkster.profiles.services.Profile\r\n    */\r\n    var Profile = {\r\n      destroy: destroy,\r\n      get: get,\r\n      update: update\r\n    };\r\n\r\n    return Profile;\r\n\r\n    /////////////////////\r\n\r\n    /**\r\n    * @name destroy\r\n    * @desc Destroys the given profile\r\n    * @param {Object} profile The profile to be destroyed\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.profiles.services.Profile\r\n    */\r\n    function destroy(profile) {\r\n      return $http.delete(\'/api/v1/accounts/\' + profile.id + \'/\');\r\n    }\r\n\r\n\r\n    /**\r\n    * @name get\r\n    * @desc Gets the profile for user with username `username`\r\n    * @param {string} username The username of the user to fetch\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.profiles.services.Profile\r\n    */\r\n    function get(username) {\r\n      return $http.get(\'/api/v1/accounts/\' + username + \'/\');\r\n    }\r\n\r\n\r\n    /**\r\n    * @name update\r\n    * @desc Update the given profile\r\n    * @param {Object} profile The profile to be updated\r\n    * @returns {Promise}\r\n    * @memberOf thinkster.profiles.services.Profile\r\n    */\r\n    function update(profile) {\r\n      return $http.put(\'/api/v1/accounts/\' + profile.username + \'/\', profile);\r\n    }\r\n  }\r\n})();\r\n```\r\n\r\nWe aren\'t doing anything special here. Each of these API calls is a basic CRUD operation, so we get away with not having much code.\r\n\r\n加载js文件:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/profiles/services/profile.service.js\' %}\"></script>\r\n```\r\n###创建User Profiles前端页面\r\n\r\n创建文件 static/templates/profiles/profile.html 并添加:\r\n```html\r\n<div class=\"profile\" ng-show=\"vm.profile\">\r\n  <div class=\"jumbotron profile__header\">\r\n    <h1 class=\"profile__username\">+{{ vm.profile.username }}</h1>\r\n    <p class=\"profile__tagline\">{{ vm.profile.tagline }}</p>\r\n  </div>\r\n  <posts posts=\"vm.posts\"></posts>\r\n</div>\r\n```\r\n\r\nThis will render a header with the username and tagline of the profile owner, followed by a list of their posts. The posts are rendered using the directive we created earlier for the index page.\r\n\r\n###Profile控制器 ProfileController\r\n\r\nThe next step is to create the controller that will use the service we just created, along with the Post service, to retrieve the data we want to display.\r\n\r\n创建文件 static/javascripts/profiles/controllers/profile.controller.js 并添加:\r\n```js\r\n/**\r\n* ProfileController\r\n* @namespace thinkster.profiles.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.profiles.controllers\')\r\n    .controller(\'ProfileController\', ProfileController);\r\n\r\n  ProfileController.$inject = [\'$location\', \'$routeParams\', \'Posts\', \'Profile\', \'Snackbar\'];\r\n\r\n  /**\r\n  * @namespace ProfileController\r\n  */\r\n  function ProfileController($location, $routeParams, Posts, Profile, Snackbar) {\r\n    var vm = this;\r\n\r\n    vm.profile = undefined;\r\n    vm.posts = [];\r\n\r\n    activate();\r\n\r\n    /**\r\n    * @name activate\r\n    * @desc Actions to be performed when this controller is instantiated\r\n    * @memberOf thinkster.profiles.controllers.ProfileController\r\n    */\r\n    function activate() {\r\n      var username = $routeParams.username.substr(1);\r\n\r\n      Profile.get(username).then(profileSuccessFn, profileErrorFn);\r\n      Posts.get(username).then(postsSuccessFn, postsErrorFn);\r\n\r\n      /**\r\n      * @name profileSuccessProfile\r\n      * @desc Update `profile` on viewmodel\r\n      */\r\n      function profileSuccessFn(data, status, headers, config) {\r\n        vm.profile = data.data;\r\n      }\r\n\r\n\r\n      /**\r\n      * @name profileErrorFn\r\n      * @desc Redirect to index and show error Snackbar\r\n      */\r\n      function profileErrorFn(data, status, headers, config) {\r\n        $location.url(\'/\');\r\n        Snackbar.error(\'That user does not exist.\');\r\n      }\r\n\r\n\r\n      /**\r\n        * @name postsSucessFn\r\n        * @desc Update `posts` on viewmodel\r\n        */\r\n      function postsSuccessFn(data, status, headers, config) {\r\n        vm.posts = data.data;\r\n      }\r\n\r\n\r\n      /**\r\n        * @name postsErrorFn\r\n        * @desc Show error snackbar\r\n        */\r\n      function postsErrorFn(data, status, headers, config) {\r\n        Snackbar.error(data.data.error);\r\n      }\r\n    }\r\n  }\r\n})();\r\n```\r\n\r\n加载js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/profiles/controllers/profile.controller.js\' %}\"></script>\r\n```\r\n\r\n###User Profiles路由信息\r\n\r\n打开文件 static/javascripts/thinkster.routes.js 兵添加路由信息:\r\n```js\r\n.when(\'/+:username\', {\r\n  controller: \'ProfileController\',\r\n  controllerAs: \'vm\',\r\n  templateUrl: \'/static/templates/profiles/profile.html\'\r\n})\r\n```\r\n\r\n###查看结果\r\n\r\n访问 http://localhost:8000/+ *username*. 如果页面显示正常, 则一切正常!\r\n\r\n##更新User Profiles\r\n\r\nThe last feature we will implement in this tutorial is the ability for a user to update their profile. The updates we offer will be minimal, including updating the user\'s first name, last name, email, and tagline, but you will get the gist of it and can add more options at will.\r\n\r\n###ProfileSettingsController\r\n\r\n创建文件 static/javascripts/profiles/controllers/profile-settings.controller.js 并添加代码:\r\n```js\r\n/**\r\n* ProfileSettingsController\r\n* @namespace thinkster.profiles.controllers\r\n*/\r\n(function () {\r\n  \'use strict\';\r\n\r\n  angular\r\n    .module(\'thinkster.profiles.controllers\')\r\n    .controller(\'ProfileSettingsController\', ProfileSettingsController);\r\n\r\n  ProfileSettingsController.$inject = [\r\n    \'$location\', \'$routeParams\', \'Authentication\', \'Profile\', \'Snackbar\'\r\n  ];\r\n\r\n  /**\r\n  * @namespace ProfileSettingsController\r\n  */\r\n  function ProfileSettingsController($location, $routeParams, Authentication, Profile, Snackbar) {\r\n    var vm = this;\r\n\r\n    vm.destroy = destroy;\r\n    vm.update = update;\r\n\r\n    activate();\r\n\r\n\r\n    /**\r\n    * @name activate\r\n    * @desc Actions to be performed when this controller is instantiated.\r\n    * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n    */\r\n    function activate() {\r\n      var authenticatedAccount = Authentication.getAuthenticatedAccount();\r\n      var username = $routeParams.username.substr(1);\r\n\r\n      // Redirect if not logged in\r\n      if (!authenticatedAccount) {\r\n        $location.url(\'/\');\r\n        Snackbar.error(\'You are not authorized to view this page.\');\r\n      } else {\r\n        // Redirect if logged in, but not the owner of this profile.\r\n        if (authenticatedAccount.username !== username) {\r\n          $location.url(\'/\');\r\n          Snackbar.error(\'You are not authorized to view this page.\');\r\n        }\r\n      }\r\n\r\n      Profile.get(username).then(profileSuccessFn, profileErrorFn);\r\n\r\n      /**\r\n      * @name profileSuccessFn\r\n      * @desc Update `profile` for view\r\n      */\r\n      function profileSuccessFn(data, status, headers, config) {\r\n        vm.profile = data.data;\r\n      }\r\n\r\n      /**\r\n      * @name profileErrorFn\r\n      * @desc Redirect to index\r\n      */\r\n      function profileErrorFn(data, status, headers, config) {\r\n        $location.url(\'/\');\r\n        Snackbar.error(\'That user does not exist.\');\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n    * @name destroy\r\n    * @desc Destroy this user\'s profile\r\n    * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n    */\r\n    function destroy() {\r\n      Profile.destroy(vm.profile.username).then(profileSuccessFn, profileErrorFn);\r\n\r\n      /**\r\n      * @name profileSuccessFn\r\n      * @desc Redirect to index and display success snackbar\r\n      */\r\n      function profileSuccessFn(data, status, headers, config) {\r\n        Authentication.unauthenticate();\r\n        window.location = \'/\';\r\n\r\n        Snackbar.show(\'Your account has been deleted.\');\r\n      }\r\n\r\n\r\n      /**\r\n      * @name profileErrorFn\r\n      * @desc Display error snackbar\r\n      */\r\n      function profileErrorFn(data, status, headers, config) {\r\n        Snackbar.error(data.error);\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n    * @name update\r\n    * @desc Update this user\'s profile\r\n    * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n    */\r\n    function update() {\r\n      Profile.update(vm.profile).then(profileSuccessFn, profileErrorFn);\r\n\r\n      /**\r\n      * @name profileSuccessFn\r\n      * @desc Show success snackbar\r\n      */\r\n      function profileSuccessFn(data, status, headers, config) {\r\n        Snackbar.show(\'Your profile has been updated.\');\r\n      }\r\n\r\n\r\n      /**\r\n      * @name profileErrorFn\r\n      * @desc Show error snackbar\r\n      */\r\n      function profileErrorFn(data, status, headers, config) {\r\n        Snackbar.error(data.error);\r\n      }\r\n    }\r\n  }\r\n})();\r\n```\r\n\r\n在javascripts.html中载入js:\r\n```html\r\n<script type=\"text/javascript\" src=\"{% static \'javascripts/profiles/controllers/profile-settings.controller.js\' %}\"></script>\r\n```\r\n\r\nHere we have created two methods that will be available to the view: update and destroy. As their names suggest, update will allow the user to update their profile and destroy will destroy the user\'s account.\r\n\r\nMost of this controller should look familiar, but let\'s go over the methods we\'ve created for clarity.\r\n```js\r\n/**\r\n * @name activate\r\n * @desc Actions to be performed when this controller is instantiated.\r\n * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n */\r\nfunction activate() {\r\n  var authenticatedAccount = Authentication.getAuthenticatedAccount();\r\n  var username = $routeParams.username.substr(1);\r\n\r\n  // Redirect if not logged in\r\n  if (!authenticatedAccount) {\r\n    $location.url(\'/\');\r\n    Snackbar.error(\'You are not authorized to view this page.\');\r\n  } else {\r\n    // Redirect if logged in, but not the owner of this profile.\r\n    if (authenticatedAccount.username !== username) {\r\n      $location.url(\'/\');\r\n      Snackbar.error(\'You are not authorized to view this page.\');\r\n    }\r\n  }\r\n\r\n  Profile.get(username).then(profileSuccessFn, profileErrorFn);\r\n\r\n  /**\r\n   * @name profileSuccessFn\r\n   * @desc Update `profile` for view\r\n   */\r\n  function profileSuccessFn(data, status, headers, config) {\r\n    vm.profile = data.data;\r\n  }\r\n\r\n  /**\r\n   * @name profileErrorFn\r\n   * @desc Redirec to index\r\n   */\r\n  function profileErrorFn(data, status, headers, config) {\r\n    $location.url(\'/\');\r\n    Snackbar.error(\'That user does not exist.\');\r\n  }\r\n}\r\n```\r\nIn activate, we follow a familiar pattern. Because this page allows for dangerous operations to be performed, we must make sure the current user is authorized to see this page. We do this by first checking if the user is authenticated and then checking if the authenticated user owns the profile. If either case is false, then we redirect to the index page with a snackbar error stating that the user is not authorized to view this page.\r\n\r\nIf the authorization process succeeds, we simply grab the user\'s profile from the server and allow the user to do as they wish.\r\n```js\r\n/**\r\n * @name destroy\r\n * @desc Destroy this user\'s profile\r\n * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n */\r\nfunction destroy() {\r\n  Profile.destroy(vm.profile).then(profileSuccessFn, profileErrorFn);\r\n\r\n  /**\r\n   * @name profileSuccessFn\r\n   * @desc Redirect to index and display success snackbar\r\n   */\r\n  function profileSuccessFn(data, status, headers, config) {\r\n    Authentication.unauthenticate();\r\n    window.location = \'/\';\r\n\r\n    Snackbar.show(\'Your account has been deleted.\');\r\n  }\r\n\r\n\r\n  /**\r\n   * @name profileErrorFn\r\n   * @desc Display error snackbar\r\n   */\r\n  function profileErrorFn(data, status, headers, config) {\r\n    Snackbar.error(data.error);\r\n  }\r\n}\r\n```\r\nWhen a user wishes to destroy their profile, we must unauthenticate them and redirect to the index page, performing a page refresh in the process. This will make the navigation bar re-render with the logged out view.\r\n\r\nIf for some reason destroying the user\'s profile returns an error status code, we simply display an error snackbar with the error message returned by the server. We do not perform any other actions because we see no reason why this call should fail unless the user is not authorized to delete this profile, but we have already accounted for this scenario in the activate method.\r\n```js\r\n/**\r\n * @name update\r\n * @desc Update this user\'s profile\r\n * @memberOf thinkster.profiles.controllers.ProfileSettingsController\r\n */\r\nfunction update() {\r\n  Profile.update(vm.profile).then(profileSuccessFn, profileErrorFn);\r\n\r\n  /**\r\n   * @name profileSuccessFn\r\n   * @desc Show success snackbar\r\n   */\r\n  function profileSuccessFn(data, status, headers, config) {\r\n    Snackbar.show(\'Your profile has been updated.\');\r\n  }\r\n\r\n\r\n  /**\r\n   * @name profileErrorFn\r\n   * @desc Show error snackbar\r\n   */\r\n  function profileErrorFn(data, status, headers, config) {\r\n    Snackbar.error(data.error);\r\n  }\r\n}\r\n```\r\n\r\n###前端模板\r\n\r\nAs usual, now that we have the controller we need to make a corresponding template.\r\n\r\n创建文件 static/templates/profiles/settings.html 兵添加如下代码:\r\n```html\r\n<div class=\"col-md-4 col-md-offset-4\">\r\n  <div class=\"well\" ng-show=\"vm.profile\">\r\n    <form role=\"form\" class=\"settings\" ng-submit=\"vm.update()\">\r\n      <div class=\"form-group\">\r\n        <label for=\"settings__email\">Email</label>\r\n        <input type=\"text\" class=\"form-control\" id=\"settings__email\" ng-model=\"vm.profile.email\" placeholder=\"ex. john@example.com\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"settings__password\">New Password</label>\r\n        <input type=\"password\" class=\"form-control\" id=\"settings__password\" ng-model=\"vm.profile.password\" placeholder=\"ex. notgoogleplus\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"settings__confirm-password\">Confirm Password</label>\r\n        <input type=\"password\" class=\"form-control\" id=\"settings__confirm-password\" ng-model=\"vm.profile.confirm_password\" placeholder=\"ex. notgoogleplus\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"settings__username\">Username</label>\r\n        <input type=\"text\" class=\"form-control\" id=\"settings__username\" ng-model=\"vm.profile.username\" placeholder=\"ex. notgoogleplus\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"settings__tagline\">Tagline</label>\r\n        <textarea class=\"form-control\" id=\"settings__tagline\" ng-model=\"vm.profile.tagline\" placeholder=\"ex. This is Not Google Plus.\" />\r\n      </div>\r\n\r\n      <div class=\"form-group\">\r\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n        <button type=\"button\" class=\"btn btn-danger pull-right\" ng-click=\"vm.destroy()\">Delete Account</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n```\r\n\r\nThis template is similar to the forms we created for registering and logging in. There is nothing here worth discussing.\r\n\r\n###Profile settings路由信息\r\n\r\n打开文件 static/javascripts/thinkster.routes.js 并添加路由信息:\r\n```js\r\n// ...\r\n.when(\'/+:username/settings\', {\r\n  controller: \'ProfileSettingsController\',\r\n  controllerAs: \'vm\',\r\n  templateUrl: \'/static/templates/profiles/settings.html\'\r\n})\r\n// ...\r\n```\r\n###查看结果\r\n现在你应该可以通过访问 http://localhost:8000/+:username/settings 来更新自己的相关信息了.\r\n试试更新信息并提交吧!\r\n\r\n##恭喜, 完成了全部工作!\r\n\r\nDuring this tutorial you accomplished a lot.\r\n\r\nFor starters, you build an entire authentication system by yourself! You extended Django\'s built-in User model and added various attributes and did so in a way that makes adding other information an easy feat when it becomes necessary. You went on to built both the front and back ends for registration, logging in, logging out, and updating the user\'s profile.\r\n\r\nIn addition to building the authentication system you also create a way for users to add their posts to our application and view other users\' posts.\r\n\r\nThis is the stuff that we do as engineers of the web. There will be times when you will need skills learned outside this tutorial and there are certainly best practices that we did not touch on, but what you\'ve done here is the gist of web development!\r\n\r\nBe proud of what you\'ve accomplished here and tell you friends by tweeting about it. We hope that you enjoyed this tutorial and will come back when you want to learn more. As always, our inbox is open to your comments, suggestions, and feedback.\r\n\r\nHappy hacking!','<p>这篇文章很长很长, 讲了如何结合<a href=\"http://django-rest-framework.com\">django-rest-framework</a> 和 <a href=\"http://angularjs.org\">angularjs</a> 开发单页免应用. 先保存下来, 有空了翻译一下, 加深印象.</p>\n<p>本教程将带你进入 <a href=\"https://djangoproject.com\">django</a> 和 <a href=\"https://angularjs.org\">angular</a> 的世界, 用它们构建一个类似Google+的应用, 我们暂且叫它\"Not Google Plus\";</p>\n<p>在开始本教程之前, 我们先来搞清楚通过本文你能学到些什么东东.</p>\n<h3>目标</h3>\n<p>Here at Thinkster, we strive to create high value, in depth content while maintaining a low barrier to entry. We release this content for free with the...</p>',0,2,'2015-01-15 16:39:54.000000','2015-02-02 13:02:43.000000',1),(20,'python lambda教程','有很多Python的 [lambda](http://docs.python.org/tutorial/controlflow.html#lambda-forms) 教程. 最近我偶然发现一个, 真挺有用的. 是 Mike Driscoll 在 [Mouse VS Python](http://www.blog.pythonlibrary.org/) 博客上的关于 [lambda](http://www.blog.pythonlibrary.org/2010/07/19/the-python-lambda/) 的讨论 . \r\n\r\n> When I first started learning Python, one of the most confusing concepts to get my head around was the lambda statement. I’m sure other new programmers get confused by it as well…\r\n\r\n> 当我刚开始学习Python, 最容易困惑的概念之一, 是lambda声明. 我敢肯定, 其他新的程序员也对它很困惑, 以及...\r\n\r\nMike的讨论非常好：清晰, 直接, 有实用的示例. 它帮助我终于领会了lambda, 并导致我写的另一篇lambda教程. \r\n\r\nlambda：一个用来构造函数的工具\r\n\r\n基本上, Python的lambda是用于构造函数（或更精确地说, 函数对象）的工具. 这意味着, Python有两个构造函数的工具：def和lambda. \r\n\r\n下面是一个例子. 您可以以正常的方式用def构造一个函数, 就像这样：\r\n\r\n```python\r\ndef square_root(x): return math.sqrt(x)\r\n```\r\n或者你可以用lambda\r\n\r\n```python\r\nsquare_root = lambda x: math.sqrt(x)\r\n```\r\n下面是lambda的其他的一些有趣的例子：\r\n```python\r\nsum = lambda x, y:   x + y   #  def sum(x,y): return x + y\r\nout = lambda   *x:   sys.stdout.write(\" \".join(map(str,x)))\r\nlambda event, name=button8.getLabel(): self.onButton(event, name)\r\n```\r\nlambda的好处在哪里?\r\n\r\n已经困扰我有很长一段时间的一个问题是：lambda的好处在哪里?为什么我们需要lambda?\r\n\r\n答案是：\r\n\r\n我们并不需要lambda, 我们不用它一样可以做所有的事情. 但是… 在一定的情况下, 很是方便 - 它让编写代码更容易一些, 而且编写的代码更整洁. \r\n\r\n什么样的情况?\r\n\r\n好, 其中一个情况是, 我们需要一个简单的一次性功能：将被只使用一次函数. \r\n\r\n通常, 写函数有两个目的：(a)以减少代码重复（b）模块化代码. \r\n\r\n*     如果你的应用程序在不同的地方包含重复的代码块, 那么你就可以把代码拷贝到一个函数, 给函数名, 然后 - 使用该函数名 - 在代码中的不同位置调用它. \r\n*     如果你有一个代码块执行一个明确的操作 - 但真的是冗长、粗糙、破坏程序的可读性, 那么你可以把那么长的粗糙的所有代码变成一个函数. \r\n\r\n但是, 假设你需要创建一个函数, 将只被使用一次 - 只从应用程序中的一个地方调用. 好吧, 首先, 你不需要给函数的名称. 它可以是“匿名的”. 而且你可以把它定义在你想使用它的地方. 这就是lambda是非常有用的时候. \r\n\r\n但是, 但是, 但是…你会说. \r\n\r\n*     首先是, 为什么你想要一个只调用一次函数?排除原因（a）. \r\n*     一个lambda的函数体只能包含单个表达式. 这意味着, lambda表达式必须很短. 排除了原因（b）. \r\n\r\n创造一个短的匿名函数可能的原因是什么?\r\n\r\n那么, 考虑一下代码片段, 使用lambda来定义一个Tkinter的GUI界面按钮的行为.  （这个例子是来自Mike的教程. ）\r\n```python\r\nframe = tk.Frame(parent)\r\nframe.pack()\r\n\r\nbtn22 = tk.Button(frame, \r\n        text=\"22\", command=lambda: self.printNum(22))\r\nbtn22.pack(side=tk.LEFT)\r\n\r\nbtn44 = tk.Button(frame, \r\n        text=\"44\", command=lambda: self.printNum(44))\r\nbtn44.pack(side=tk.LEFT)\r\n```\r\n这里要记住的一点是, tk.Button需要一个函数对象作为参数传递给该函数的参数. 该函数对象将是它（按钮）点击按钮时调用的函数. 基本上, 该函数指定了点击该按钮时, GUI会做什么. \r\n\r\n因此, 我们必须通过函数参数传递一个函数对象到一个按钮. 并注意 - 因为不同的按钮做不同的事情 - 我们需要为每个按钮对象提供不同的函数对象. 每个函数将只使用一次. \r\n\r\n所以, 尽管我们可以这样写\r\n```python\r\ndef __init__(self, parent):\r\n    \"\"\"Constructor\"\"\"\r\n    frame = tk.Frame(parent)\r\n    frame.pack()\r\n\r\n    btn22 = tk.Button(frame, \r\n        text=\"22\", command=self.buttonCmd22)\r\n    btn22.pack(side=tk.LEFT)\r\n\r\n    btn44 = tk.Button(frame, \r\n        text=\"44\", command=self.buttonCmd44)\r\n    btn44.pack(side=tk.LEFT)\r\n\r\ndef buttonCmd22(self):\r\n    self.printNum(22)\r\n\r\ndef buttonCmd44(self):\r\n    self.printNum(44)\r\n```\r\n这样写更容易（和更清楚）\r\n```python\r\ndef __init__(self, parent):\r\n    \"\"\"Constructor\"\"\"\r\n    frame = tk.Frame(parent)\r\n    frame.pack()\r\n\r\n    btn22 = tk.Button(frame, \r\n        text=\"22\", command=lambda: self.printNum(22))\r\n    btn22.pack(side=tk.LEFT)\r\n\r\n    btn44 = tk.Button(frame, \r\n        text=\"44\", command=lambda: self.printNum(44))\r\n    btn44.pack(side=tk.LEFT)\r\n```\r\n当一个GUI程序有这样的代码, 该按钮对象需要“call back”到被提供给作为其命令函数对象. \r\n\r\n因此, 我们可以说, lambda的最常见的用途之一是在写“call back”, 以GUI框架, 如Tkinter和wxPython. \r\n\r\n这一切似乎很简单. 所以…\r\n\r\n为什么拉姆达如此难以理解?\r\n\r\n我能想到四个原因:\r\n\r\n**第一**\r\nLambda难以理解, 因为：一个lambda只能用一个表达式：什么是表达式?\r\n\r\n很多人想知道这个问题的答案. 如果你在Google上搜索了一下, 你会看到很多的帖子, “在Python中, 一个表达和语句之间的区别是什么?”\r\n\r\n一个很好的答案是, 一个表达式返回（或计算结果为）值, 而声明则没有. 不幸的是, 在Python中表达式也可以是一个语句, 这种情况很容易造成糊涂.  - 赋值语句就像 A = B = 0, Python支持链式赋值.  （Python不是C）[2]\r\n\r\n很多情况下在当人们问这个问题时, 他们真正想知道的是：什么样的情况下我可以或者我不可以, 放入lambda? 而对于这个问题, 我觉得遵循一些简单的规则就足够了. \r\n\r\n*     如果它不返回一个值, 它不是一个表达式, 不能放入一个lambda. \r\n*     如果你能想象它在赋值语句中放在等号的右边, 那它是一个表达式, 可以放进一个lambda. \r\n\r\n利用这些规则意味着：\r\n\r\n1.     赋值语句不能在lambda中使用. 在Python中, 赋值语句不返回任何东西, 甚至没有None（null）. \r\n2.     如数学运算, 字符串操作, 列表解析等都是一个lambda. \r\n3.     函数调用是表达式. 它可以把一个函数调用放去lambda, 并且将参数传递给该函数. 这样包装函数调用（参数和所有）到一个新的匿名函数里面. \r\n4.     在Python3, print成了一个函数, 所以在Python3+, print（…）可以在lambda中使用. \r\n5.     即使函数是返回None, 就像在Python3print函数, 可以在一个lambda中使用. \r\n6.     [条件表达式], 它是在Python2.5中引入, 是表达式（而不是仅仅是一个语法不同的if / else语句）. 它们返回一个值, 并且可以在一个lambda使用. \r\n\r\n```python\r\nlambda: a if some_condition() else b\r\nlambda x: ‘big’ if x > 100 else ‘small’\r\n```\r\n**第二**\r\nLambda难以理解, 因为：一个lambda只有一个表达式：为什么?为什么只有一个?为什么不能多表达式?为什么不能是语句?\r\n\r\n对于一些开发人员来说, 这个问题的意思是为什么Python的lambda语法如此怪异?对于其他人, 尤其是那些有Lisp的背景的, 这个问题是指为什么Python的lambda这么残废?为什么不像Lisp的lambda那么强大?\r\n\r\n答案是很复杂, 它涉及Python语法的“pythonicity”. lambda是一个相对较晚加入Python的. 它加入的时候, Python语法已经成为公认的. 在这种情况下, 语法的lambda必须用“Pythonic”的方式硬塞进一个已经建立好的Python语法中. 导致可以在lambda表达式上来完成一些事情有一定的局限性. \r\n\r\n坦率地说, 我仍然认为lambda语法看起来有点怪异. 尽管那样, 但是Guido解释了为什么lambda的语法是不会改变的.  Python不会成为Lisp.\r\n\r\n**第三**\r\nLambda难以理解, 因为：在lambda教程中通常会用作为创建匿名函数来引入lambda, 其实最常见的lambda用途是用于创建匿名过程. \r\n\r\n我们公认的两种不同的子程序：过程和函数. 过程是用来做事情的, 并没有返回任何东西. 函数是用于计算和返回值. 函数和过程之间的差异内置在一些编程语言. 在Pascal, 例如, 程序和函数是不同的关键字. \r\n\r\n在大多数现代语言中, 过程和函数的区别在语言语法不再提供.  例如Python的函数, 可以像过程, 函数, 或两者兼而有之. （不是完全理想的）结果是一个Python函数总是被称为“函数”, 即使它是本质上充当过程. \r\n\r\n虽然过程和函数之间的区别已经基本消失的语言结构中, 当思考有关程序如何工作的时候我, 们仍然时常用它. 例如, 当我读一个程序的源代码, 并看到一些函数F, 我揣摩F是做什么的. 我经常可以把它归类到一个过程或函数 - 我会对自己说“F的目的是做这个的”, 或“F的目的是计算和返回等这个和这个的”. \r\n\r\n所以现在我想我们可以明白为什么lambda的许多解释是难以理解. \r\n\r\n**第一**\r\nPython语言本身模糊了函数和过程的区别. \r\n\r\n**第二**\r\n大多数教程介绍把lambda作为创建匿名函数的工具来介绍, 其主要目的是要计算并返回结果. 在大多数教程看到（这个包含）的第一个例子展示了如何编写一个lambda来返回值, x的平方根. \r\n但是, 这不是lambda最常用的方式, 不是当他们在Google上搜索“python lambda教程”的时候要找的. 对于lambda最常见的用途是创建匿名的过程, 在GUI回调中使用. 在这些用例中, 我们不关心什么lambda返回什么, 我们关心它做了什么. \r\n这就解释了为什么典型的Python程序员难以理解大多数的lambda说明. 因为他尝试学习如何编写一些GUI框架的代码：Tkinter, wxPython. 运行这些lambda, 想理解他们. Google“python lambda教程”. 他发现那些以例子开始的教程是完全不适合他. \r\n所以, 如果你是这样的程序员 - 本教程是给你写的. 我希望它能帮助到你. 对不起, 我们在本教程的结尾看到了这点, 而不是开头. 我们希望有一天, 有人会写一个lambda教程, 而不是以这种方式开头\r\n\r\n*     lambda是一个用来构造匿名函数的工具\r\n\r\n而以这样的句子开始：\r\n\r\n*     lambda是一个用来构造回调的工具\r\n\r\n所以你需要有它. 另一个lambda教程.\r\n','<p>有很多Python的 <a href=\"http://docs.python.org/tutorial/controlflow.html#lambda-forms\">lambda</a> 教程. 最近我偶然发现一个, 真挺有用的. 是 Mike Driscoll 在 <a href=\"http://www.blog.pythonlibrary.org/\">Mouse VS Python</a> 博客上的关于 <a href=\"http://www.blog.pythonlibrary.org/2010/07/19/the-python-lambda/\">lambda</a> 的讨论 . </p>\n<blockquote>\n<p>When I first started learning Python, one of the most confusing concepts to get my head around was the lambda statement. I’m sure other new programmers get confused by it as well…</p>\n<p>当我刚开始学习Python, 最容易困惑的概念之一...</p></blockquote>',0,2,'2015-01-29 10:13:01.000000','2015-01-29 17:58:38.000000',1),(21,'ECMAScript 6 Features 中文版','# ECMAScript 6 Features 中文版\r\n\r\n第一遍粗译，词不达意，欢迎提 issue\r\n\r\n采用中英混排的方式进行译制，如不解请查看对应原文\r\n\r\n**本文档将与原作者的 [文档](https://github.com/lukehoban/es6features) 保持同步更新，欢迎关注**\r\n\r\n## Introduction 简介\r\nECMAScript 6 is the upcoming version of the ECMAScript standard. This standard is targeting ratification in June 2015. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is [underway now](http://kangax.github.io/es5-compat-table/es6/).\r\n\r\nECMAScript 6 是 ECMAScript 的下一代标准，预计将在 2015年6月 正式发布。ES6 的发布将是是这门语言自 2009 年 ES5 正式发布以来的首次更新，是一次富有意义的更新。Javascript核心引擎的[新特性](http://kangax.github.io/es5-compat-table/es6/)仍然在快速开发中。\r\n\r\nSee the [draft ES6 standard](https://people.mozilla.org/~jorendorff/es6-draft.html) for full specification of the ECMAScript 6 language.\r\n\r\n这里有[ES6标准草案](https://people.mozilla.org/~jorendorff/es6-draft.html)的所有细节可以参考\r\n\r\nES6 includes the following new features:\r\n\r\nES6 的具体特性如下：\r\n\r\n- [Arrows 箭头函数](#arrows-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0)\r\n- [classes 类](#classes-%E7%B1%BB)\r\n- [enhanced object literals 增强的对象字面量](#enhanced-object-literals-%E5%A2%9E%E5%BC%BA%E7%9A%84object%E5%AD%97%E9%9D%A2%E9%87%8F)\r\n- [template strings 模板字符串](#template-strings-%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2)\r\n- [destructuring 解构](#destructuring-%E8%A7%A3%E6%9E%84)\r\n- [default + rest + spread 默认值+多余参数组合+参数伸展](#default--rest--spread--%E9%BB%98%E8%AE%A4%E5%80%BC%E5%A4%9A%E4%BD%99%E5%8F%82%E6%95%B0%E7%BB%84%E5%90%88%E5%8F%82%E6%95%B0%E4%BC%B8%E5%B1%95)\r\n- [let + const let + const 操作符](#let--const-%E6%93%8D%E4%BD%9C%E7%AC%A6)\r\n- [iterators + for..of 迭代器 + for...of](#iterators--forof-%E8%BF%AD%E4%BB%A3%E5%99%A8--forof-%E5%BE%AA%E7%8E%AF)\r\n- [generators 生成器](#generators-%E7%94%9F%E6%88%90%E5%99%A8)\r\n- [unicode 统一码](#unicode-%E7%BB%9F%E4%B8%80%E7%A0%81)\r\n- [modules 模块](#modules-%E6%A8%A1%E5%9D%97)\r\n- [module loaders 模块加载器](#module-loaders-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8)\r\n- [map + set + weakmap + weakset 数据结构](#map--set--weakmap--weakset-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84)\r\n- [proxies 代理](#proxies-%E4%BB%A3%E7%90%86)\r\n- [symbols 符号](#symbols-%E7%AC%A6%E5%8F%B7)\r\n- [subclassable built-ins 可子类化内建对象](#subclassable-built-ins-%E5%8F%AF%E5%AD%90%E7%B1%BB%E5%8C%96%E7%9A%84%E5%86%85%E5%BB%BA%E5%AF%B9%E8%B1%A1)\r\n- [promises 对象](#promises-%E5%AF%B9%E8%B1%A1)\r\n- [math + number + string + object APIs](#math--number--string--object-apis-%E6%89%A9%E5%B1%95)\r\n- [binary and octal literals 二进制和八进制字面量](#binary-and-octal-literals-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%92%8C%E5%85%AB%E8%BF%9B%E5%88%B6%E5%AD%97%E9%9D%A2%E9%87%8F)\r\n- [reflect api 反射API](#reflect-api-%E5%8F%8D%E5%B0%84api)\r\n- [tail calls 尾调用](#tail-calls-%E5%B0%BE%E8%B0%83%E7%94%A8)\r\n\r\n## ECMAScript 6 Features 特性\r\n\r\n### Arrows 箭头函数\r\nArrows are a function shorthand using the `=>` syntax. They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript. They support both expression and statement bodies. Unlike functions, arrows share the same lexical this as their surrounding code.\r\n\r\n箭头函数是形如`=>`的函数简写形式，在语法上与 C#、Java 8 和 CoffeScript 非常相似，它们同时支持表达式和语句体，与function定义的函数所不同的是，箭头函数在上下文中共享相同的关键字`this`\r\n\r\n```JavaScript\r\n// Expression bodies\r\n// 表达式\r\nvar odds = evens.map(v => v + 1);\r\nvar nums = evens.map((v, i) => v + i);\r\nvar pairs = evens.map(v => ({even: v, odd: v + 1}));\r\n\r\n// Statement bodies\r\n// 语句体\r\nnums.forEach(v => {\r\n  if (v % 5 === 0)\r\n    fives.push(v);\r\n});\r\n\r\n// Lexical this\r\n// this 关键字\r\nvar bob = {\r\n  _name: \"Bob\",\r\n  _friends: [\"Amy\", \"Bob\", \"Cinne\", \"Dylan\", \"Ellen\"],\r\n  printFriends() {\r\n    this._friends.forEach(f =>\r\n      console.log(this._name + \" knows \" + f));\r\n  }\r\n}\r\n```\r\n\r\n### Classes 类\r\nES6 classes are a simple sugar over the prototype-based OO pattern. Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability. Classes support prototype-based inheritance, super calls, instance and static methods and constructors.\r\n\r\nES6 的类是基于原型的面向对象模式的一个简单的语法糖，它有一个便捷的声明形式，并鼓励互操作性，这使得类模式更容易使用。class定义的类支持基于原型的继承、[SuperCalls](http://en.wikipedia.org/wiki/Call_super)、实例和静态方法以及构造函数。\r\n\r\n```JavaScript\r\nclass SkinnedMesh extends THREE.Mesh {\r\n  constructor(geometry, materials) {\r\n    super(geometry, materials);\r\n\r\n    this.idMatrix = SkinnedMesh.defaultMatrix();\r\n    this.bones = [];\r\n    this.boneMatrices = [];\r\n    //...\r\n  }\r\n  update(camera) {\r\n    //...\r\n    super.update();\r\n  }\r\n  static defaultMatrix() {\r\n    return new THREE.Matrix4();\r\n  }\r\n}\r\n```\r\n\r\n### Enhanced Object Literals 增强的Object字面量\r\nObject literals are extended to support setting the prototype at construction, shorthand for foo: foo assignments, defining methods, making super calls, and computing property names with expressions. Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.\r\n\r\nObject字面量被扩展以支持以下特性：在构建的时候设置原型、`foo: foo`的简写形式赋值、定义方法、调用[Super Calls](http://en.wikipedia.org/wiki/Call_super)、计算表达式的属性名称等。这样就使得Object字面量和类的声明的联系更加紧密，使得基于对象的设计更加便利\r\n\r\n```JavaScript\r\nvar obj = {\r\n    // __proto__\r\n    __proto__: theProtoObj,\r\n    // Shorthand for ‘handler: handler’\r\n    // ‘handler: handler’ 的简写形式\r\n    handler,\r\n    // Methods\r\n    toString() {\r\n      // Super calls\r\n      return \"d \" + super.toString();\r\n    },\r\n    // Computed (dynamic) property names\r\n    // 动态计算属性名称\r\n    [ \'prop_\' + (() => 42)() ]: 42\r\n};\r\n```\r\n\r\n### Template Strings 模板字符串\r\nTemplate strings provide syntactic sugar for constructing strings. This is similar to string interpolation features in Perl, Python and more. Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.\r\n\r\n模板字符串提供构造字符串的语法糖，这与Perl、Python等许多语言中的字符串插值功能非常相似，你也可以通过添加标签(tag)来自定义构造字符串，避免注入攻击，或者基于字符串构建更高层次的数据结构。\r\n\r\n```JavaScript\r\n// Basic literal string creation\r\n// 基础字符串字面量的创建\r\n`In JavaScript \'\\n\' is a line-feed.`\r\n\r\n// Multiline strings\r\n// 多行字符串\r\n`In JavaScript this is\r\n not legal.`\r\n\r\n // String interpolation\r\n// 字符串插值\r\nvar name = \"Bob\", time = \"today\";\r\n`Hello ${name}, how are you ${time}?`\r\n\r\n// Construct an HTTP request prefix is used to interpret the replacements and construction\r\n// 构造一个HTTP请求前缀用来解释替换和构造，大意就是可以构造一个通用的HTTP prefix并通过赋值生成最终的HTTP请求\r\nGET`http://foo.org/bar?a=${a}&b=${b}\r\n    Content-Type: application/json\r\n    X-Credentials: ${credentials}\r\n    { \"foo\": ${foo},\r\n      \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\r\n```\r\n\r\n### Destructuring 解构\r\nDestructuring allows binding using pattern matching, with support for matching arrays and objects.  Destructuring is fail-soft, similar to standard object lookup `foo[\"bar\"]`, producing `undefined` values when not found.\r\n\r\n解构允许结合使用模式匹配，支持匹配数组和对象，解构支持[失效弱化](http://www.computerhope.com/jargon/f/failsoft.htm)，与标准的对象查询`foo[\"bar\"]`相似，当查询无结果时生成`undefined`值\r\n\r\n```JavaScript\r\n// list matching\r\n// 列表匹配\r\nvar [a, , b] = [1,2,3];\r\n\r\n// object matching\r\n// 对象匹配\r\nvar { op: a, lhs: { op: b }, rhs: c }\r\n       = getASTNode()\r\n\r\n// object matching shorthand\r\n// binds `op`, `lhs` and `rhs` in scope\r\n// 对象匹配简写形式\r\nvar {op, lhs, rhs} = getASTNode()\r\n\r\n// 上面作者给的示例看得云里雾里的，这里我再给出一个\r\nfunction today() { return { d: 2, m: 3, y: 2015 }; }\r\nvar { m: month, y: year } = today(); // month = 3, year = 2015\r\n\r\n// Can be used in parameter position\r\n// 也可以作为参数使用\r\nfunction g({name: x}) {\r\n  console.log(x);\r\n}\r\ng({name: 5})\r\n\r\n// Fail-soft destructuring\r\n// 失效弱化解构，结果查询不到时定义为 undefined\r\nvar [a] = [];\r\na === undefined;\r\n\r\n// Fail-soft destructuring with defaults\r\n// 具备默认值的失效弱化解构\r\nvar [a = 1] = [];\r\na === 1;\r\n```\r\n\r\n### Default + Rest + Spread  默认值+多余参数组合+参数伸展\r\nCallee-evaluated default parameter values.  Turn an array into consecutive arguments in a function call.  Bind trailing parameters to an array.  Rest replaces the need for `arguments` and addresses common cases more directly.\r\n\r\n本人英语烂，直译出来惨不忍睹，尝试意译一下，欢迎issue里给出直译参考（泪目\r\n\r\n1. 首先，参数可以指定默认值\r\n2. 其次，可以通过...运算符将尾随参数转换为一个数组\r\n3. 最后，同样通过...运算符将作为参数的数组拆解为相应参数变量\r\n\r\n果真只能靠自己~早已被作者虐哭\r\n\r\n```JavaScript\r\nfunction f(x, y=12) {\r\n  // y is 12 if not passed (or passed as undefined)\r\n  return x + y;\r\n}\r\nf(3) == 15\r\n```\r\n```JavaScript\r\nfunction f(x, ...y) {\r\n  // y is an Array\r\n  return x * y.length;\r\n}\r\nf(3, \"hello\", true) == 6\r\n```\r\n```JavaScript\r\nfunction f(x, y, z) {\r\n  return x + y + z;\r\n}\r\n// Pass each elem of array as argument\r\nf(...[1,2,3]) == 6\r\n```\r\n\r\n### Let + Const 操作符\r\nBlock-scoped binding constructs.  `let` is the new `var`.  `const` is single-assignment.  Static restrictions prevent use before assignment.\r\n\r\nlet 和 const 属于块级作用域的绑定构造，`let` 是新的 `var`，只在块级作用域内有效，`const` 是[单赋值](http://zh.wikipedia.org/zh-cn/%E9%9D%99%E6%80%81%E5%8D%95%E8%B5%8B%E5%80%BC%E5%BD%A2%E5%BC%8F)，声明的是块级作用域的常量，静态限制在赋值之前禁止使用\r\n\r\n\r\n```JavaScript\r\nfunction f() {\r\n  {\r\n    let x;\r\n    {\r\n      // okay, block scoped name\r\n      const x = \"sneaky\";\r\n      // error, const\r\n      x = \"foo\";\r\n    }\r\n    // error, already declared in block\r\n    let x = \"inner\";\r\n  }\r\n}\r\n```\r\n\r\n### Iterators + For..Of 迭代器 + For..of 循环\r\nIterator objects enable custom iteration like CLR IEnumerable or Java Iterable.  Generalize `for..in` to custom iterator-based iteration with `for..of`.  Don’t require realizing an array, enabling lazy design patterns like LINQ.\r\n\r\n迭代器对象允许像 [CLI IEnumerable](https://msdn.microsoft.com/zh-cn/library/system.collections.ienumerable(v=vs.110).aspx) 或者 [Java Iterable](http://docs.oracle.com/javase/7/docs/api/java/lang/Iterable.html) 一样自定义迭代器。将`for..in`转换为自定义的基于迭代器的形如`for..of`的迭代，不需要实现一个数组，支持像 [LINQ](https://msdn.microsoft.com/zh-cn/library/bb397926.aspx) 一样的惰性设计模式\r\n```JavaScript\r\nlet fibonacci = {\r\n  [Symbol.iterator]() {\r\n    let pre = 0, cur = 1;\r\n    return {\r\n      next() {\r\n        [pre, cur] = [cur, pre + cur];\r\n        return { done: false, value: cur }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfor (var n of fibonacci) {\r\n  // truncate the sequence at 1000\r\n  if (n > 1000)\r\n    break;\r\n  console.log(n);\r\n}\r\n```\r\n\r\nIteration is based on these duck-typed interfaces (using [TypeScript](http://typescriptlang.org) type syntax for exposition only):\r\n\r\n迭代器基于这些[鸭子类型的接口](http://zh.wikipedia.org/zh/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B) (仅使用[TypeScript](http://typescriptlang.org) 类型的句法阐述问题)：\r\n```TypeScript\r\ninterface IteratorResult {\r\n  done: boolean;\r\n  value: any;\r\n}\r\ninterface Iterator {\r\n  next(): IteratorResult;\r\n}\r\ninterface Iterable {\r\n  [Symbol.iterator](): Iterator\r\n}\r\n```\r\n\r\n### Generators 生成器\r\nGenerators simplify iterator-authoring using `function*` and `yield`.  A function declared as function* returns a Generator instance.  Generators are subtypes of iterators which include additional  `next` and `throw`.  These enable values to flow back into the generator, so `yield` is an expression form which returns a value (or throws).\r\n\r\n生成器通过使用`function*`和`yield`简化迭代器的编写， 形如function*的函数声明返回一个生成器实例，生成器是迭代器的子类型，迭代器包括附加的`next`和`throw`，这使得值可以回流到生成器中，`yield`是一个返回或抛出一个值的表达式形式  。\r\n\r\nNote: Can also be used to enable ‘await’-like async programming, see also ES7 `await` proposal.\r\n注意：也可以被用作类似‘await’一样的异步编程中，具体细节查看[ES7的`await`提案](http://wiki.ecmascript.org/doku.php?id=strawman:async_functions)\r\n\r\n```JavaScript\r\nvar fibonacci = {\r\n  [Symbol.iterator]: function*() {\r\n    var pre = 0, cur = 1;\r\n    for (;;) {\r\n      var temp = pre;\r\n      pre = cur;\r\n      cur += temp;\r\n      yield cur;\r\n    }\r\n  }\r\n}\r\n\r\nfor (var n of fibonacci) {\r\n  // truncate the sequence at 1000\r\n  if (n > 1000)\r\n    break;\r\n  console.log(n);\r\n}\r\n```\r\n\r\nThe generator interface is (using [TypeScript](http://typescriptlang.org) type syntax for exposition only):\r\n生成器接口如下(仅使用[TypeScript](http://typescriptlang.org) 类型的句法阐述问题)：\r\n\r\n```TypeScript\r\ninterface Generator extends Iterator {\r\n    next(value?: any): IteratorResult;\r\n    throw(exception: any);\r\n}\r\n```\r\n\r\n### Unicode 统一码\r\nNon-breaking additions to support full Unicode, including new Unicode literal form in strings and new RegExp `u` mode to handle code points, as well as new APIs to process strings at the 21bit code points level.  These additions support building global apps in JavaScript.\r\n\r\n> Non-breaking additions to support full Unicode\r\n\r\n这句看了半天不知道作者想要表达什么，我就查了下资料，有一种可能是： 增加[不换行空格](http://zh.wikipedia.org/wiki/%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%A9%BA%E6%A0%BC)的特性以全面支持Unicode，还有一种可能是：渐进增强地、非破坏性地全面支持Unicode，也就是说，新加入的特性并不影响老的代码的使用。我个人比较倾向于第二种解读。[@sumhat](https://github.com/sumhat)提示说第二种解读是正确的\r\n\r\n（续）字符串支持新的Unicode文本形式，也增加了新的正则表达式修饰符`u`来处理代码点，同时，新的API可以在[21bit代码点级别](http://zh.wikipedia.org/wiki/Unicode#.E7.BC.96.E7.A0.81.E6.96.B9.E5.BC.8F)上处理字符串，增加这些支持后可以使用 Javascript 构建全球化的应用。\r\n注：关于Unicode推荐阅读[复杂的Unicode，疑惑的Python](http://www.blogjava.net/pts/archive/2009/07/20/287506.html)\r\n\r\n```JavaScript\r\n// same as ES5.1\r\n// 与 ES5.1 相同\r\n\"','<h1>ECMAScript 6 Features 中文版</h1>\n<p>第一遍粗译，词不达意，欢迎提 issue</p>\n<p>采用中英混排的方式进行译制，如不解请查看对应原文</p>\n<p><strong>本文档将与原作者的 <a href=\"https://github.com/lukehoban/es6features\">文档</a> 保持同步更新，欢迎关注</strong></p>\n<h2>Introduction 简介</h2>\n<p>ECMAScript 6 is the upcoming version of the ECMAScript standard. This standard is targeting ratification in June 2015. ES6 is a significant update to the language, and the first update to the language since...</p>',0,2,'2015-01-29 10:19:10.000000','2015-03-04 10:19:28.000000',1),(22,'不要在setting中import太多东西','这篇文章讲了一个挺有意思的问题, 结合south和django使用时要注意下.(还好django1.7以上的版本似乎用不到south了)\r\n\r\nOne of our production Django sites broke this afternoon with a database error “relation xyz doesn’t exist”. So: a missing table.\r\n\r\n###Why 1\r\n\r\nI helped debugging it and eventually found the cause by doing a select * from south_migrationhistory. This lists the south migrations and lo and behold, a migration had just been applied 25 minutes earlier. The migration name suggested a rename of tables, which of course matches the “missing table” error.\r\n\r\n###Why 2\r\n\r\nCause found. But you have to ask yourself “why” again. So: “why was this migration applied?”.\r\n\r\nWell, someone was working on a bit of database cleanup and refactoring. Naming consistency, proper use of permissions, that sort of thing. Of course, locally in a branch. And on a development database. Now why did the local command result in a migration on the production database?\r\n\r\n###Why 3\r\n\r\nSo, effectively, “why don’t the development settings work as intended”? We normally use settings.py as the production settings and a developmentsettings.py that is used in development. It imports from settings.py and sets the debug mode and development database and so.\r\n\r\nThis project is a bit different in that there’s only a settings.py. It does however try to import localsettings.py. This is generated for you when you set up your project environment with ansible. A bit less clear (in my opinion) than a real .py file in your github repository, but it works. We saw the generated localsettings file with development database and DEBUG = True. This wasn’t the cause. What then?\r\n\r\nNormally, calling django’s diffsettings command (see the django documentation) shows you any settings errors by printing all the settings in your config that are different from Django’s defaults. In this case, nothing was wrong. The DATABASES setting was the right one with the local development database. Huh?\r\n\r\nThe developer mentioned one other thing he changed recently: importing some django signal registration module in the **settings.py**. Ah! Django’s signals often work on the database. Yes, the signals in this module did database work, too.\r\n\r\nSo the settings.py effectively looked like this:\r\n```python\r\nDATABASES = { .... \'server\': \'productiondatabase\' ....}\r\nimport my_project.signal_stuff_that_works_on_the_database\r\ntry:\r\n    from .localsettings import *\r\n    # This normally sets DATABASES = { .... \'server\': \'developmentdatabase\' ....}\r\nexcept ImportError:\r\n    pass\r\n```\r\nThe import of the signal registration module apparently triggered something in Django’s database layer so that the database connection was already active. The subsequent change of the DATABASES config to the local development database didn’t have any effect anymore.\r\n\r\ndiffsettings just shows you what the settings are and doesn’t catch the fact that the DATABASES isn’t really used in the form that comes out of diffsettings.\r\n\r\n###Why 4\r\n\r\nWhy the import, then?\r\n\r\nWell, it has to be executed when django starts up. The settings file looked like a good spot. It isn’t, though.\r\n\r\nThe traditional location to place imports like this is the urls.py or models.py file. That’s why the admin.autodiscover() line is often in your urls.py, for instance.\r\n\r\nSo... put imports like this in models.py or urls.py instead of in your settings file.\r\n\r\n###Why 5\r\n\r\nDigging even deeper... isn’t this sort of weird and ugly? Why isn’t there a more obvious place for initialization code like this? Now you have to have the arcane knowledge to somehow know where you can import and where not, right?\r\n\r\nThe answer: there is a good spot, in django 1.7. The [AppConfig.ready()](https://docs.djangoproject.com/en/1.7/ref/applications/#django.apps.AppConfig.ready) method! Quote from the documentation: Subclasses can override this method to perform initialization tasks such as registering signals. Bingo!\r\n','<p>这篇文章讲了一个挺有意思的问题, 结合south和django使用时要注意下.(还好django1.7以上的版本似乎用不到south了)</p>\n<p>One of our production Django sites broke this afternoon with a database error “relation xyz doesn’t exist”. So: a missing table.</p>\n<h3>Why 1</h3>\n<p>I helped debugging it and eventually found the cause by doing a select * from south_migrationhistory. This lists the south migrations and lo...</p>',0,2,'2015-02-12 17:00:54.000000','2015-02-12 17:06:22.000000',1),(23,'用Tornado试玩新浪微博开放平台 API','Tornado 作为一个 Python 的异步非阻塞服务器与轻量级 Web 框架, 相当令人着迷. 为了体验一把 OAuth2.0 认证, 我用 Tornado 搭建了一个网站, 调用新浪微博 API. 新浪微博的 OAuth2.0 认证的顺序如下:\r\n\r\n*     用户访问客户端, 客户端把用户带到新浪认证服务器去输用户名密码;\r\n*     新浪认证服务器认证完毕后, 将用户带到客户端某指定页面, 给这个页面传递一个 GET 参数 code;\r\n*     客户端某指定页面接收到 code 之后, 后台发起对新浪API服务器的POST请求, 用 code 换取 access_token;\r\n*     得到 access_token 后, 就可以用来调用各种需要用户登录之后才能调用的 API 了.\r\n\r\n下面简单说明在 Python 3 下用 Tornado 如何完成上述四个步骤.\r\n\r\n \r\n###将用户带到新浪认证页面\r\n\r\n假定我们要开发的客户端的域名是 dropthej.com , 在新浪新建一个应用, 在设置里填好这个安全域名, 这样才能跨站请求 XMLRequests.\r\n\r\n这一步就是写 html 页面, 在 Tornado 中就是写模板. 假设我们在客户端中放置一个按钮叫做 \"用新浪微博登陆\", 代码如下:\r\n```html\r\n<form class=\"form\" method=\"GET\" action=\"https://api.weibo.com/oauth2/authorize\">\r\n	<input type=\"hidden\" name=\"client_id\" value=\"这里填你的App Key\"/>\r\n    <input type=\"hidden\" name=\"redirect_uri\" value=\"http://dropthej.com/auth_code\"/>\r\n    <button type=\"submit\" class=\"btn btn-info form-control\">Login</button>\r\n</form>\r\n```\r\n\r\n这样只要一点这个按钮就跑到新浪的认证页面去了, 用户认证好了之后, 新浪会将用户带到你提供的 redirect_uri 地址, 这里就是\r\n\r\n    http://dropthej.com/auth_code?code=xxxxxxxxxxxxxxxxxxxxxx\r\n\r\n所以我们要用 Tornado 来处理这个认证服务器发给我们的 code.\r\n\r\n \r\n###Tornado 后台用 code 去换取 access_token\r\n\r\n这一部分有两步工作:\r\n\r\n*     得到 code\r\n*     用 code 换 access_token\r\n\r\n配置一下 Tornado 的路由表, 让 r\'/auth_code\' 路由到 AuthCodeHandler 这个 Handler. 这样我们重写这个 handler 的 get 方法就能获取到 code. 然后我们用 POST 方法把 code 发给新浪, 这里就能体现 Tornado 的异步非阻塞的强大了, Tornado 的 AsyncHTTPClient 能发起异步请求, 用 @gen.coroutine 装饰器可以把异步写得像同步的样子. 代码如下:\r\n```python\r\nfrom urllib.parse import urlencode\r\nimport json\r\nimport tornado.web\r\nfrom tornado import gen\r\nfrom tornado.httpclient import AsyncHTTPClient\r\nfrom handlers.token import TokenBaseHandler\r\n \r\n \r\nclass AuthCodeHandler(TokenBaseHandler):\r\n    \"\"\"\r\n        已经获得用户授权, 向API服务器获取Token\r\n    \"\"\"\r\n    @gen.coroutine\r\n    def get(self):\r\n        auth_code = self.get_argument(\"code\", \"No code\")\r\n        post_data = {\r\n            \"client_id\": \"你的App Key\",\r\n            \"client_secret\": \"你的App Secret\",\r\n            \"grant_type\": \"authorization_code\",\r\n            \"code\": auth_code,\r\n            \"redirect_uri\": \"http://dropthej.com\"\r\n        }\r\n        http_client = AsyncHTTPClient()\r\n        response = \"init\"\r\n        body = urlencode(post_data)\r\n        try:\r\n            response = yield http_client.fetch(\r\n                \"https://api.weibo.com/oauth2/access_token\",\r\n                method=\"POST\",\r\n                body=body\r\n            )\r\n        except Exception as e:\r\n            self.write(str(e))\r\n            return;\r\n        \r\n        token_json = json.loads(str(response.body, encoding=\'utf-8\'))\r\n \r\n        # set token_json\r\n        self.application.token_json = token_json\r\n        self.write(\"<br/><br>\" + str(token_json[\'access_token\']))\r\n        url = \"http://dropthej.com/?tk=\" + token_json[\'access_token\']\r\n        self.redirect(url)\r\n```\r\n由于我们仅仅用来玩一玩他的 API, 所以这个得到的 access_token 我们就不写到 cookies 里面去了, 而是采用放在 URL 里面的简单方法. 这样应用的每一个页面都带上 tk 参数, 就能保持用户的登录状态. 这里我们返回到了 http://dropthej.com/?tk=access_token 这个页面, 所以我们在 html 里面接收这个 tk 然后用来调用新浪 API 就可以了.\r\n\r\n为什么都是发送 GET 和 POST 请求, 这个要用 Tornado 在后台来发送呢? 在前端用 javascript 来完成不行嘛? 因为这里要把 App Secret 发出去, 人家都叫 Secret 了你还传到前端去经过用户的电脑, 那是相当的不安全. Secret 就是设计来验证这是真正的客户端发出的请求, 所以要在后台发, 要有客户端而不是用户来完成.\r\n\r\n \r\n使用 jQuery 来调用新浪 API 获取用户最新的首页微博\r\n\r\n这不是重点就不多说了, 效果很好很让人开心, 主要代码如下:\r\n```js\r\nvar xyz;\r\n$(function() {\r\n  $.ajax({\r\n    url: \"https://api.weibo.com/2/statuses/home_timeline.json\",\r\n    type: \"GET\",\r\n    dataType: \"jsonp\",\r\n    data: {\r\n      \"access_token\": ac_tk\r\n    },\r\n    success: function(result) {\r\n      xyz = result.data.statuses;\r\n      for (x in xyz) {\r\n        $(\"#tbody\").append(\"<tr><td>\" + xyz[x].user.name + \"</td><td>\" + xyz[x].text + \"</td></tr>\");\r\n      }\r\n    }\r\n  });\r\n});\r\n```\r\n效果如图所示:\r\n\r\n![](http://jecvay.com/wp-content/uploads/2015/02/weiboapi.png)\r\n\r\n\r\n( 本文转自: [Jecvay Notes](http://jecvay.com/2015/02/tornado-sina-weibo-api.html))','<p>Tornado 作为一个 Python 的异步非阻塞服务器与轻量级 Web 框架, 相当令人着迷. 为了体验一把 OAuth2.0 认证, 我用 Tornado 搭建了一个网站, 调用新浪微博 API. 新浪微博的 OAuth2.0 认证的顺序如下:</p>\n<ul>\n<li>用户访问客户端, 客户端把用户带到新浪认证服务器去输用户名密码;</li>\n<li>新浪认证服务器认证完毕后, 将用户带到客户端某指定页面, 给这个页面传递一个 GET 参数 code;</li>\n<li>客户端某指定页面接收到 code 之后, 后台发起对新浪API服务器的POST请求, 用 code 换取 access_token;</li>\n<li>得到 access_token 后, 就可以用来调用各种需要用户登录之后才能调用的 API 了.</li>\n</ul>\n<p>下面简单说明在 Python 3 下用 Tornado 如何完成上述四个步骤.</p>\n<h3>将用户带到新浪认证页面</h3>\n<p>假定我们要开发的客户端的域名是...</p>',0,2,'2015-03-06 10:36:20.000000','2015-03-06 10:44:19.000000',1),(24,'程序员如何提高影响力？','> 影响力，让梦想离你更近。\r\n\r\n试想一下，有一天你开发了一个新的语言。它比现有的某某主流软件，运行效率将提高了50%，开发效率提高了100%。接着，你在github上release了0.1，但是由于出现某个开发难题，你需要别人的帮助。而这时，你找不到有效的途径去找到那些真正会用它的人。接着出现了一个新的语言可以达到一样的效果，而这个项目就死于腹中，我记得[mruby](https://github.com/mruby/mruby)刚刚只写了一个``README.md``的时候，就获得了上千个star。\r\n\r\n#[如何提高影响力，为自己代言](http://www.phodal.com/blog/how-to-improve-impact/)\r\n\r\n![impact][1]\r\n\r\n每个人都可以是一个品牌，对于一个程序员来说，我们的ID就是我们的品牌。而构成品牌的有多个要素:\r\n\r\n- 博客\r\n- Github\r\n- Weibo(or Twitter)\r\n- StackOverflow(or SegmentFault, Zhihu)\r\n\r\n等等。\r\n\r\n###搭建一个跨平台的平台\r\n\r\n> 连接各个平台的核心是我们的ID。\r\n\r\n第一个平台指的是不同的网站，如我们的博客、Github、知乎等等，第二个平台指的是我们的影响力。\r\n\r\nSo，在开始的时候我们需要有一个统一的ID，来标识我们的身份:我是谁，你在xx网站上看到的那个xx就是我。刚开始的时候，我在CSDN、Github上的ID(gmszone)和我的博客的域名(Phodal)是不一样的，因为当时的域名(gmszone.com)握在别人的手上，于是我便想办法将两个ID改了过来（ps: github提供迁移)。后来，Phodal就成了我的发声平台:\r\n\r\n- [http://www.phodal.com/](http://www.phodal.com/)\r\n- [http://weibo.com/phodal](http://weibo.com/phodal)\r\n- [http://www.zhihu.com/people/phodal](http://www.zhihu.com/people/phodal)\r\n- [http://github.com/phodal](http://github.com/phodal)\r\n- [http://segmentfault.com/u/phodal](http://segmentfault.com/u/phodal)\r\n- [http://www.douban.com/people/phodal/](http://www.douban.com/people/phodal/)\r\n- ...\r\n\r\n于是，这时就可以开始使用跨平台的平台了。\r\n\r\n##构建平台\r\n\r\n> 小博客也会有成长的一天。\r\n\r\n对于像我这样一个个默默无闻地人来说，用户可能会有下面几种不同的方法来知道我: \r\n\r\n![live example][2]\r\n\r\n- 用户 -> 搜索{谷歌,百度,必应} -> 博客 -> {Weibo,Github}\r\n- 用户 -> 微博 -> {Github, 博客}\r\n- 用户 —> Github -> 博客\r\n- 用户 -> {知乎, SegmentFault} -> {Weibo,Github,博客}\r\n\r\n###博客\r\n\r\n刚开始在CSDN上写博客的时候，一开始的访问量很少，慢慢地就多了。有一天发现这样的博客不是自己想要的，于是建了自己的博客，一开始的流量是0。像CSDN这样的网站推荐一些文章到首页，如果能这样便是幸运的。在经历大半年的几乎零流量之后，开始慢慢增长了。到了今天，一共有470篇博客(有一些是出于测试SEO目的写成多篇文章)。一天的PageView大平均有五百左右，主要来源是搜索引擎，百度200左右，谷歌50左右，必应10左右。\r\n\r\n####用户故事\r\n\r\n对于一个程序员来说，必须在某种程度上熟悉怎么搜索自己想要的内容，即**关键字**。如我们想要知道如何在OpenWRT OS上用Python，那么我们会搜索``OpenWRT Python``。于是，这个时候我们博客的标题带有OpenWRT Python，那么我们可能就中奖了。\r\n\r\n故事，告诉我们**好的标题很重要**。**重复这个主题**也很重要，会有一个更好的排名。至于，如何更好地排到第一，就是SEO(搜索引擎优化)的话题了。\r\n\r\n####笔记\r\n\r\n一开始要写一个博客是比较难的，没有流量、没有评论。所以，一个好的切入点是: ``笔记``。最好是那种网上很少的内容的笔记，虽说很多人不愿意去做这个，但是这是一个很好的方向。\r\n\r\n一个技术博客里面的内容应该是两种类型:\r\n\r\n- 技术\r\n- 理论\r\n\r\n技术型可以带来流量，理论型的可以带来评论。理想的话，两者会相辅相成的，但是在我们刚处于学习期的时候。那么那些Note，可以给我们带来一些流量，也带来一些信心。如果，只是想着一开始我就只写一些长篇大论的话，那么只是就是拿了80%的时间做了20%的事。\r\n\r\n以用户搜索的过程来说，用户是``有目的的进行搜索``。换句话说，在我们日常工作的时候，我们只关心和我们工作相关的内容。而在受众来，正常情况下，技术型的博文、笔记可以带来流量的主要原因是: ``大部分人都是初学者``。\r\n\r\n![70 percent][3]\r\n\r\n理论性的内容，更适合更高级别的开发者，这样的受众较少。\r\n\r\n####上头条\r\n\r\n而在今天有其他的平台，可以借用来推销自己的:\r\n\r\n- 开发者头条\r\n- 极客头条\r\n- 掘金稀土\r\n- ...\r\n\r\n网上的IT新闻、博客都是互相Copy，对于一些软文(如本文)来说。这也是期触及率高的原因，通常来说这样可以带来大量的流量。记得在原文中留个原文链接，附张图片(自己博客的图片)来保证:Google把原文指向你的博客，而不是免费为别人打工。\r\n\r\n####提升\r\n\r\n除了是一个很好的展示平台，也是一个很好的测试平台。作为一个Web Developer，测试过\r\n\r\n- Nginx Log分析(~600M)\r\n- New Relic\r\n- SEO\r\n- AutoComplete\r\n- 重构网站\r\n- ...\r\n\r\n###Github\r\n\r\n将自己尝试的不同技术栈的内容丢到Github上，加上适当地文档、博客，就变成了一个很好的Demo。然而，不止于此，越来越多地人开始在Github寻找人才，因为他们乐于付出，也乐于分离。曾经因为Github上的项目:\r\n\r\n- 申请WebStorm开源License\r\n- Review英文版书籍\r\n- ...(有些不方便透露)\r\n\r\n而在Github上的项目其实不仅仅只有一些库:\r\n\r\n - 库和框架: 和``jQuery`` \r\n - 系统: 如``Linux``、``hhvm``、``docker``\r\n - 配置集: 如``dotfiles``\r\n - 辅助工具: 如``oh-my-zsh``\r\n - 工具: 如``Homewbrew``和``Bower``\r\n - 资料收集: 如``free programming books``，``You-Dont-Know-JS``，``Font-Awesome``\r\n - 其他:简历如``Resume``，``博客``\r\n\r\n所以，可以尝试不同的切入点使用Github。\r\n\r\n在某种程度上来说，一个人在Gihub上的粉丝数量会帮助他的项目在初期获取更多的人气。这样就有助于其下一步开展项目，当然也会在某种程度上更好看Blabla。\r\n\r\n####提升\r\n\r\n之前写过一篇[《如何通过github提升自己》](http://www.phodal.com/blog/use-github-grow-self/)中说到了一些细节，大致上还是那些东西，Github与Trello、Travis-CI、Coveralls、SauceLabs、Code Climate，配合得很好。已经可以接近于我们在一些项目上用到的功能，因此拿他们搭建一个好的开发环境完全不是问题。\r\n\r\n- Travis CI:支持Node.js、Python、Ruby、PHP等二十几种语言，也支持MySQL、PostgreSQL、MongoDB、Redis等数据库。\r\n- Coveralls:可以用来查看代码的测试覆盖率。\r\n- SauceLabs:可以用来跑Selenium功能测试等等\r\n- Code Climate:查看代码的坏味道。\r\n\r\n在我们试着去保证测试覆盖率、代码质量等等的时候，我们就可以学到一些知识，如使用不同语言测试框架的Mock、Stub、FakeServer等等。\r\n\r\n###扩大影响力\r\n\r\n上面的两部分属于打造平台部分，而如Weibo、知乎等则属于扩大影响力。\r\n\r\n在某种时候，博客、Github都更像是个人的平台。如Weibo、知乎、SegmentFault、CSDN等等的开发者社区，也可以为自己的博客、Github带来流量，而这一些都是互相促进的。如果我们在其中的一个网站上表现得很好的话，那么在另外一个网站上我们也很容易聚集同样的粉丝。如，我最常用的一个作法是: 将自己写得相对比较好的一些博客复制到CSDN、SegemntFault、图灵社区等等，并适当地推到CSDN首页、开发者头条等等。\r\n\r\n由于写作的开发人员是有限的，所以通常在某某头条上的推荐，会成为某博客园上的新闻，接着会有成群接队的小站开始Copy。同时，这些文章又会推到他们的微博上，接着还可能是微信平台。毕竟，对于大部分的网络来说，大部分的流量是流向他们的网站的，所以他们不太会在乎其中的外链等等。故而，通常来说: 不是某某东西突然火了，而是突然没有别的新闻了。通常来说一个好的作法是，试着将你的博客分享到微博上，然后@那些愿意帮你分享的平台。这样，你可以有更多的阅读、更多的粉丝，当然好的内容是前提。\r\n\r\n其中还有若干其它的好处:\r\n\r\n- 更大的曝光率，会带来更多的机会\r\n- 更有机会参与一些未公开互联网产品的试用\r\n- 各种精美小礼物\r\n- 翻译、出版机会\r\n\r\n##TODO\r\n\r\n只需要简单地几步就可以开始提高我们的影响力:\r\n\r\n- 在不同的网站上使用一个ID\r\n- 创建一个博客\r\n- 开始创作内容、提交代码、分享\r\n- 持续Impact\r\n\r\n\r\n  [1]: http://www.phodal.com/static/media/uploads/impact.jpg\r\n  [2]: http://www.phodal.com/static/media/uploads/live.jpg\r\n  [3]: http://www.phodal.com/static/media/uploads/70.jpg','<blockquote>\n<p>影响力，让梦想离你更近。</p>\n</blockquote>\n<p>试想一下，有一天你开发了一个新的语言。它比现有的某某主流软件，运行效率将提高了50%，开发效率提高了100%。接着，你在github上release了0.1，但是由于出现某个开发难题，你需要别人的帮助。而这时，你找不到有效的途径去找到那些真正会用它的人。接着出现了一个新的语言可以达到一样的效果，而这个项目就死于腹中，我记得<a href=\"https://github.com/mruby/mruby\">mruby</a>刚刚只写了一个<code>README.md</code>的时候，就获得了上千个star。</p>\n<h1><a href=\"http://www.phodal.com/blog/how-to-improve-impact/\">如何提高影响力，为自己代言</a></h1>\n<p><img alt=\"impact\" src=\"http://www.phodal.com/static/media/uploads/impact.jpg\" /></p>\n<p>每个人都可以是一个品牌，对于一个程序员来说，我们的ID就是我们的品牌。而构成品牌的有多个要素:</p>\n<ul>\n<li>博客</li>\n<li>Github</li>\n<li>Weibo(or Twitter)</li>\n<li>StackOverflow(or SegmentFault, Zhihu)</li>\n</ul>\n<p>等等。</p>\n<h3>搭建一个跨平台的平台</h3>\n<blockquote>\n<p>连接各个平台的核心是我们的ID。</p>\n</blockquote>\n<p>第一个平台指的是不同的网站，如我们的博客、Github、知乎等等，第二个平台指的是我们的影响力。</p>\n<p>So，在开始的时候我们需要有一个统一的ID，来标识我们的身份:我是谁...</p>',0,2,'2015-06-02 13:35:27.000000','2015-06-02 13:36:39.000000',1),(25,'Atom快捷键','## 文件切换\r\n`ctrl-shift-s`  保存所有打开的文件  \r\n`cmd-shift-o`  打开目录  \r\n`cmd-\\`   显示或隐藏目录树  \r\n`ctrl-0`   焦点移到目录树  \r\n目录树下，使用a，m，delete来增加，修改和删除  \r\n`cmd-t`或`cmd-p` 查找文件  \r\n`cmd-b` 在打开的文件之间切换  \r\n`cmd-shift-b` 只搜索从上次git commit后修改或者新增的文件  \r\n\r\n## 导航  \r\n（等价于上下左右）  \r\n`ctrl-p` 前一行  \r\n`ctrl-n` 后一行  \r\n`ctrl-f` 前一个字符  \r\n`ctrl-b` 后一个字符  \r\n\r\n`alt-B`, `alt-left` 移动到单词开始  \r\n`alt-F`, `alt-right` 移动到单词末尾  \r\n\r\n`cmd-right`, `ctrl-E` 移动到一行结束  \r\n`cmd-left`, `ctrl-A`  移动到一行开始  \r\n\r\n`cmd-up` 移动到文件开始  \r\n`cmd-down` 移动到文件结束  \r\n\r\n`ctrl-g` 移动到指定行 row:column 处\r\n\r\n`cmd-r` 在方法之间跳转\r\n\r\n## 书签\r\n`cmd-F2` 在本行增加书签  \r\n`F2` 跳到当前文件的下一条书签  \r\n`shift-F2` 跳到当前文件的上一条书签  \r\n`ctrl-F2` 列出当前工程所有书签  \r\n\r\n## 选取\r\n> 大部分和导航一致，只不过加上shift  \r\n\r\n`ctrl-shift-P`  选取至上一行  \r\n`ctrl-shift-N`  选取至下一样  \r\n`ctrl-shift-B`  选取至前一个字符  \r\n`ctrl-shift-F`  选取至后一个字符  \r\n`alt-shift-B`, `alt-shift-left`  选取至字符开始  \r\n`alt-shift-F`, `alt-shift-right`  选取至字符结束  \r\n`ctrl-shift-E`, `cmd-shift-right`  选取至本行结束  \r\n`ctrl-shift-A`, `cmd-shift-left`  选取至本行开始  \r\n`cmd-shift-up`  选取至文件开始  \r\n`cmd-shift-down`  选取至文件结尾  \r\n`cmd-A`  全选  \r\n`cmd-L`  选取一行，继续按回选取下一行  \r\n`ctrl-shift-W`  选取当前单词  \r\n\r\n## 编辑和删除文本\r\n### 基本操作\r\n`ctrl-T` 使光标前后字符交换  \r\n`cmd-J` 将下一行与当前行合并  \r\n`ctrl-cmd-up`, `ctrl-cmd-down` 使当前行向上或者向下移动  \r\n`cmd-shift-D` 复制当前行到下一行  \r\n`cmd-K`, `cmd-U` 使当前字符大写  \r\n`cmd-K`, `cmd-L` 使当前字符小写  \r\n\r\n### 删除和剪切\r\n`ctrl-shift-K` 删除当前行  \r\n`cmd-backspace` 删除到当前行开始  \r\n`cmd-fn-backspace` 删除到当前行结束  \r\n`ctrl-K` 剪切到当前行结束  \r\n`alt-backspace` 或 `alt-H` 删除到当前单词开始  \r\n`alt-delete` 或 `alt-D` 删除到当前单词结束  \r\n\r\n### 多光标和多处选取  \r\n`cmd-click` 增加新光标  \r\n`cmd-shift-L` 将多行选取改为多行光标  \r\n`ctrl-shift-up`, `ctrl-shift-down` 增加上（下）一行光标  \r\n`cmd-D` 选取文档中和当前单词相同的下一处  \r\n`ctrl-cmd-G` 选取文档中所有和当前光标单词相同的位置  \r\n\r\n### 括号跳转  \r\n`ctrl-m` 相应括号之间，html tag之间等跳转  \r\n`ctrl-cmd-m` 括号(tag)之间文本选取  \r\n`alt-cmd-.` 关闭当前XML/HTML tag  \r\n\r\n### 编码方式  \r\n`ctrl-shift-U` 调出切换编码选项  \r\n\r\n## 查找和替换  \r\n`cmd-F` 在buffer中查找  \r\n`cmd-shift-f` 在整个工程中查找  \r\n\r\n## 代码片段  \r\n`alt-shift-S` 查看当前可用代码片段  \r\n> 在`~/.atom`目录下`snippets.cson`文件中存放了你定制的snippets  \r\n\r\n[定制说明](https://atom.io/docs/v1.0.0/using-atom-snippets)  \r\n\r\n## 自动补全  \r\n`ctrl-space` 提示补全信息  \r\n\r\n## 折叠  \r\n`alt-cmd-[` 折叠  \r\n`alt-cmd-]` 展开  \r\n`alt-cmd-shift-{` 折叠全部  \r\n`alt-cmd-shift-}` 展开全部  \r\n`cmd-k cmd-N` 指定折叠层级 N为层级数  \r\n\r\n## 文件语法高亮  \r\n`ctrl-shift-L` 选择文本类型  \r\n\r\n## 使用Atom进行写作  \r\n`ctrl-shift-M` Markdown预览  \r\n可用代码片段\r\n> b, legal, img, l, i, code, t, table\r\n','<h2>文件切换</h2>\n<p><code>ctrl-shift-s</code>  保存所有打开的文件<br />\n<code>cmd-shift-o</code>  打开目录<br />\n<code>cmd-\\</code>   显示或隐藏目录树<br />\n<code>ctrl-0</code>   焦点移到目录树<br />\n目录树下，使用a，m，delete来增加，修改和删除<br />\n<code>cmd-t</code>或<code>cmd-p</code> 查找文件<br />\n<code>cmd-b</code> 在打开的文件之间切换<br />\n<code>cmd-shift-b</code> 只搜索从上次git commit后修改或者新增的文件  </p>\n<h2>导航</h2>\n<p>（等价于上下左右）<br />\n<code>ctrl-p</code> 前一行<br />\n<code>ctrl-n</code> 后一行<br />\n<code>ctrl-f</code> 前一个字符<br />\n<code>ctrl-b</code> 后一个字符  </p>\n<p><code>alt-B</code>, <code>alt-left</code> 移动到单词开始<br />\n<code>alt-F</code>, <code>alt-right</code> 移动到单词末尾  </p>\n<p><code>cmd-right</code>, <code>ctrl-E</code> 移动到一行结束<br />\n<code>cmd-left</code>, <code>ctrl-A</code>  移动到一行开始  </p>\n<p><code>cmd-up</code> 移动到文件开始<br />\n<code>cmd-down</code> 移动到文件结束  </p>\n<p><code>ctrl-g...</code></p>',0,2,'2015-06-29 12:53:18.000000','2015-06-29 12:53:18.000000',1),(26,'Tornado中同步方法的异步化','## 缘由\r\n\r\n上次在公司用 [Tornado](http://tornadoweb.org) 做了路由平台管理后台的API, 但是由于没有用到tornado的异步操作, 全部采用同步执行, 所以效率很差, 公司要求改进. \r\n\r\n## 资料\r\n抽空找了下python下的异步微型库, 发现了 [gevent](http://www.gevent.org/).\r\n但是gevent似乎不能直接用在tornado上, 看了看gevent的文档, 发现它用了一个叫 [greenlet](https://greenlet.readthedocs.org/) 的协程库, 看了下它的文档, 也很简单, 就是一个切换, 貌似用 C 语言封装了线程, 重写了python库的线程库.\r\n\r\n## 代码\r\nTornado中的异步也是基于协程的, 所以自己找了找资料, 改了一个基于greenlet的装饰器(文件就保存为greenlet), 代码如下:\r\n\r\n```python\r\nfrom functools import wraps\r\nimport sys\r\nimport types\r\n\r\nimport greenlet\r\n\r\nfrom tornado import concurrent, gen\r\nfrom tornado.ioloop import IOLoop\r\n\r\n\r\nclass TimeoutError(Exception):\r\n\r\n    \"\"\"Exception raised by ``greenletyield`` in timeout.\"\"\"\r\n\r\n\r\ndef greenletsleep(timeout):\r\n    gr = greenlet.getcurrent()\r\n    assert gr.parent is not None, \"greenletsleep() can only be called from functions that have the @greenado.groutine decorator in the call stack.\"\r\n\r\n    if timeout <= 0:\r\n        raise ValueError(\"Invalid timeout value \'%s\'\" % timeout)\r\n\r\n    io_loop = IOLoop.current()\r\n    done = [False]\r\n\r\n    def on_timeout():\r\n        done[0] = True\r\n        gr.switch()\r\n\r\n    io_loop.add_timeout(io_loop.time() + timeout, on_timeout)\r\n\r\n    while not done[0]:\r\n        gr.parent.switch()\r\n\r\n\r\ndef generator(f):\r\n    @wraps(f)\r\n    def wrapper(*args, **kwargs):\r\n\r\n        assert greenlet.getcurrent(\r\n        ).parent is not None, \"Functionscan only be called within @run_on_greenlet decorator in the call stack.\"\r\n\r\n        try:\r\n            result = f(*args, **kwargs)\r\n        except (gen.Return, StopIteration) as e:\r\n            result = getattr(e, \'value\', None)\r\n        else:\r\n            if isinstance(result, types.GeneratorType):\r\n                try:\r\n                    future = next(result)\r\n\r\n                    while True:\r\n                        try:\r\n                            value = greenletyield(future)\r\n                        except Exception:\r\n                            result.throw(*sys.exc_info())\r\n                        else:\r\n                            future = result.send(value)\r\n\r\n                except (gen.Return, StopIteration) as e:\r\n                    return getattr(e, \'value\', None)\r\n\r\n        return result\r\n\r\n    return wrapper\r\n\r\n\r\ndef run_on_greenlet(f):\r\n    @wraps(f)\r\n    def wrapper(*args, **kwargs):\r\n        future = concurrent.TracebackFuture()\r\n\r\n        def greenlet_base():\r\n            try:\r\n                future.set_result(f(*args, **kwargs))\r\n            except:\r\n                future.set_exc_info(sys.exc_info())\r\n        gr = greenlet.greenlet(greenlet_base)\r\n        gr.switch()\r\n        return future\r\n    return wrapper\r\n\r\n\r\ndef greenletyield(future, timeout=None):\r\n\r\n    gr = greenlet.getcurrent()\r\n    assert gr.parent is not None, \"greenletyield() can only be called from functions that have the @run_on_greenlet decorator in the call stack.\"\r\n\r\n    if not future.done():\r\n        io_loop = IOLoop.current()\r\n        timeout_handle = None\r\n        if timeout is not None and timeout > 0:\r\n            timeout_handle = io_loop.add_timeout(\r\n                io_loop.time() + timeout,\r\n                lambda: future.set_exception(\r\n                    TimeoutError(\"Timeout after %s seconds\" % timeout))\r\n            )\r\n\r\n        def on_complete(result):\r\n            if timeout_handle is not None:\r\n                io_loop.remove_timeout(timeout_handle)\r\n            gr.switch()\r\n\r\n        io_loop.add_future(future, on_complete)\r\n        gr.parent.switch()\r\n\r\n        while not future.done():\r\n            gr.parent.switch()\r\n\r\n    return future.result()\r\n\r\n```\r\n\r\n## 测试\r\n\r\n下面的代码可以测试以上的代码\r\n\r\n```python\r\nfrom greenlet import run_on_greenlet\r\nimport time\r\nfrom tornado import gen\r\nimport tornado.httpserver\r\nimport tornado.ioloop\r\nimport tornado.options\r\nimport tornado.web\r\nfrom tornado.options import define, options\r\n\r\n\r\ndefine(\"port\", default=8888, help=\"run on the given port\", type=int)\r\n\r\n\r\nclass MainHandler(tornado.web.RequestHandler):\r\n\r\n    @gen.coroutine\r\n    def get(self):\r\n        r = yield self.test()\r\n        self.write(\"Blocked %s\" % r)\r\n        self.finish()\r\n\r\n    @run_on_greenlet\r\n    def test(self):\r\n        print(\"Sleeping 10\")\r\n        time.sleep(2)\r\n        return 10\r\n\r\n\r\ndef main():\r\n    tornado.options.parse_command_line()\r\n    application = tornado.web.Application([\r\n        (r\"/\", MainHandler),\r\n    ])\r\n    http_server = tornado.httpserver.HTTPServer(application)\r\n    http_server.listen(options.port)\r\n    tornado.ioloop.IOLoop.current().start()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n```\r\n\r\n## 结论\r\n\r\n同步方法经过 run_on_greenlet 装饰后, 已经实现了异步操作, 但是性能如何, 还需要测试. 另外大并发下 数据是否准确也需要验证.','<h2>缘由</h2>\n<p>上次在公司用 <a href=\"http://tornadoweb.org\">Tornado</a> 做了路由平台管理后台的API, 但是由于没有用到tornado的异步操作, 全部采用同步执行, 所以效率很差, 公司要求改进. </p>\n<h2>资料</h2>\n<p>抽空找了下python下的异步微型库, 发现了 <a href=\"http://www.gevent.org/\">gevent</a>.\n但是gevent似乎不能直接用在tornado上, 看了看gevent的文档, 发现它用了一个叫 <a href=\"https://greenlet.readthedocs.org/\">greenlet</a> 的协程库, 看了下它的文档, 也很简单, 就是一个切换, 貌似用 C 语言封装了线程, 重写了python库的线程库.</p>\n<h2>代码</h2>\n<p>Tornado中的异步也是基于协程的, 所以自己找了找资料, 改了一个基于greenlet的装饰器(文件就保存为greenlet), 代码如下:</p>\n<div class=\"codehilite\"><pre><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">types</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">greenlet</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tornado</span> <span class=\"kn\">import</span> <span class=\"n\">concurrent</span><span class=\"p\">,</span> <span class=\"n\">gen</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tornado.ioloop</span> <span class=\"kn\">import</span> <span class=\"n\">IOLoop...</span></pre></div>',0,2,'2015-09-18 15:22:07.000000','2015-09-18 15:55:53.000000',1);
/*!40000 ALTER TABLE `blog_entry` ENABLE KEYS */;

--
-- Table structure for table `django_admin_log`
--

DROP TABLE IF EXISTS `django_admin_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_admin_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` datetime NOT NULL,
  `object_id` longtext,
  `object_repr` varchar(200) NOT NULL,
  `action_flag` smallint(5) unsigned NOT NULL,
  `change_message` longtext NOT NULL,
  `content_type_id` int(11) DEFAULT NULL,
  `user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `djang_content_type_id_697914295151027a_fk_django_content_type_id` (`content_type_id`),
  KEY `django_admin_log_user_id_52fdd58701c5f563_fk_auth_user_id` (`user_id`),
  CONSTRAINT `djang_content_type_id_697914295151027a_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `django_admin_log_user_id_52fdd58701c5f563_fk_auth_user_id` FOREIGN KEY (`user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `django_admin_log`
--


--
-- Table structure for table `django_content_type`
--

DROP TABLE IF EXISTS `django_content_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_content_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app_label` varchar(100) NOT NULL,
  `model` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `django_content_type_app_label_45f3b1d93ec8c61c_uniq` (`app_label`,`model`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `django_content_type`
--

/*!40000 ALTER TABLE `django_content_type` DISABLE KEYS */;
INSERT INTO `django_content_type` VALUES (15,'account','emailaddress'),(16,'account','emailconfirmation'),(1,'admin','logentry'),(3,'auth','group'),(2,'auth','permission'),(4,'auth','user'),(14,'authtoken','token'),(9,'blog','comment'),(8,'blog','entry'),(5,'contenttypes','contenttype'),(13,'friends','followingtag'),(12,'friends','friendship'),(6,'sessions','session'),(7,'sites','site'),(10,'taggit','tag'),(11,'taggit','taggeditem');
/*!40000 ALTER TABLE `django_content_type` ENABLE KEYS */;

--
-- Table structure for table `django_migrations`
--

DROP TABLE IF EXISTS `django_migrations`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_migrations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `app` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `applied` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `django_migrations`
--

/*!40000 ALTER TABLE `django_migrations` DISABLE KEYS */;
INSERT INTO `django_migrations` VALUES (1,'contenttypes','0001_initial','2015-09-23 08:25:51.789908'),(2,'auth','0001_initial','2015-09-23 08:25:57.854189'),(3,'account','0001_initial','2015-09-23 08:25:59.812363'),(4,'account','0002_email_max_length','2015-09-23 08:26:00.516477'),(5,'admin','0001_initial','2015-09-23 08:26:02.456829'),(6,'contenttypes','0002_remove_content_type_name','2015-09-23 08:26:03.470796'),(7,'auth','0002_alter_permission_name_max_length','2015-09-23 08:26:04.148237'),(8,'auth','0003_alter_user_email_max_length','2015-09-23 08:26:04.844451'),(9,'auth','0004_alter_user_username_opts','2015-09-23 08:26:04.916617'),(10,'auth','0005_alter_user_last_login_null','2015-09-23 08:26:05.405009'),(11,'auth','0006_require_contenttypes_0002','2015-09-23 08:26:05.438593'),(12,'authtoken','0001_initial','2015-09-23 08:26:06.610765'),(13,'taggit','0001_initial','2015-09-23 08:26:08.979435'),(14,'blog','0001_initial','2015-09-23 08:26:11.583596'),(15,'blog','0002_auto_20150104_1058','2015-09-23 08:26:11.675158'),(16,'blog','0003_auto_20150109_0913','2015-09-23 08:26:14.338057'),(17,'blog','0004_comment_excerpt','2015-09-23 08:26:15.150672'),(18,'friends','0001_initial','2015-09-23 08:26:17.075829'),(19,'friends','0002_followingtag','2015-09-23 08:26:19.570937'),(20,'friends','0003_auto_20150919_1559','2015-09-23 08:26:21.061451'),(21,'sessions','0001_initial','2015-09-23 08:26:21.789276'),(22,'sites','0001_initial','2015-09-23 08:26:22.058314'),(23,'taggit','0002_auto_20150616_2121','2015-09-23 08:26:22.484146');
/*!40000 ALTER TABLE `django_migrations` ENABLE KEYS */;

--
-- Table structure for table `django_session`
--

DROP TABLE IF EXISTS `django_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_session` (
  `session_key` varchar(40) NOT NULL,
  `session_data` longtext NOT NULL,
  `expire_date` datetime NOT NULL,
  PRIMARY KEY (`session_key`),
  KEY `django_session_de54fa62` (`expire_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `django_session`
--

/*!40000 ALTER TABLE `django_session` DISABLE KEYS */;
INSERT INTO `django_session` VALUES ('pl7dqe3e6wnivd1s9j4i815f3r24nr26','NGM0MjU3MjFmYTgxYjE4NzM2NDdmYzQ5MDcyYWFhODBkN2U4OGFlNDp7Il9hdXRoX3VzZXJfaGFzaCI6IjYwNGRmMjBhYTA0MjFlMzhkNDQxMjAxOTIyNGE4ZDcwYTNjNGRmZmUiLCJfYXV0aF91c2VyX2JhY2tlbmQiOiJkamFuZ28uY29udHJpYi5hdXRoLmJhY2tlbmRzLk1vZGVsQmFja2VuZCIsIl9hdXRoX3VzZXJfaWQiOiIxIn0=','2015-10-07 08:35:42.112015');
/*!40000 ALTER TABLE `django_session` ENABLE KEYS */;

--
-- Table structure for table `django_site`
--

DROP TABLE IF EXISTS `django_site`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `django_site` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `domain` varchar(100) NOT NULL,
  `name` varchar(50) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `django_site`
--

/*!40000 ALTER TABLE `django_site` DISABLE KEYS */;
INSERT INTO `django_site` VALUES (1,'example.com','example.com');
/*!40000 ALTER TABLE `django_site` ENABLE KEYS */;

--
-- Table structure for table `friends_followingtag`
--

DROP TABLE IF EXISTS `friends_followingtag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `friends_followingtag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `author_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `friends_followingtag_author_id_58470c64aee25c10_fk_auth_user_id` (`author_id`),
  CONSTRAINT `friends_followingtag_author_id_58470c64aee25c10_fk_auth_user_id` FOREIGN KEY (`author_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `friends_followingtag`
--


--
-- Table structure for table `friends_followingtag_tags`
--

DROP TABLE IF EXISTS `friends_followingtag_tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `friends_followingtag_tags` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `followingtag_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `followingtag_id` (`followingtag_id`,`tag_id`),
  KEY `friends_followingtag_ta_tag_id_73db402822edc8db_fk_taggit_tag_id` (`tag_id`),
  CONSTRAINT `frien_followingtag_id_d5b51d577e4d069_fk_friends_followingtag_id` FOREIGN KEY (`followingtag_id`) REFERENCES `friends_followingtag` (`id`),
  CONSTRAINT `friends_followingtag_ta_tag_id_73db402822edc8db_fk_taggit_tag_id` FOREIGN KEY (`tag_id`) REFERENCES `taggit_tag` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `friends_followingtag_tags`
--


--
-- Table structure for table `friends_friendship`
--

DROP TABLE IF EXISTS `friends_friendship`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `friends_friendship` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created` datetime NOT NULL,
  `from_user_id` int(11) NOT NULL,
  `to_user_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `friends_friendship_from_user_id_12c5d6cccc79a82f_uniq` (`from_user_id`,`to_user_id`),
  KEY `friends_friendship_to_user_id_1008abb3c0d8f0e8_fk_auth_user_id` (`to_user_id`),
  CONSTRAINT `friends_friendship_from_user_id_15ad8c9d44fb03fb_fk_auth_user_id` FOREIGN KEY (`from_user_id`) REFERENCES `auth_user` (`id`),
  CONSTRAINT `friends_friendship_to_user_id_1008abb3c0d8f0e8_fk_auth_user_id` FOREIGN KEY (`to_user_id`) REFERENCES `auth_user` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `friends_friendship`
--


--
-- Table structure for table `taggit_tag`
--

DROP TABLE IF EXISTS `taggit_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taggit_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `slug` varchar(100) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `slug` (`slug`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `taggit_tag`
--


/*!40000 ALTER TABLE `taggit_tag` DISABLE KEYS */;
INSERT INTO `taggit_tag` VALUES (1,'django','django'),(2,'博客',''),(3,'sublime-text','sublime-text'),(5,'面试','_1'),(7,'前端','_2'),(9,'','_3'),(10,'awesome','awesome'),(11,'python','python'),(12,'html','html'),(13,'Restfull','restfull'),(14,'angular','angular'),(15,'flask','flask'),(16,'tornado','tornado'),(17,'atom','atom');
/*!40000 ALTER TABLE `taggit_tag` ENABLE KEYS */;


--
-- Table structure for table `taggit_taggeditem`
--

DROP TABLE IF EXISTS `taggit_taggeditem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `taggit_taggeditem` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `object_id` int(11) NOT NULL,
  `content_type_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `taggit_taggeditem_tag_id_6318217c0d95e0d2_fk_taggit_tag_id` (`tag_id`),
  KEY `taggit_taggeditem_af31437c` (`object_id`),
  KEY `taggit_taggeditem_content_type_id_3c99b32018cc9d40_idx` (`content_type_id`,`object_id`),
  CONSTRAINT `taggi_content_type_id_62e0524705c3ec8f_fk_django_content_type_id` FOREIGN KEY (`content_type_id`) REFERENCES `django_content_type` (`id`),
  CONSTRAINT `taggit_taggeditem_tag_id_6318217c0d95e0d2_fk_taggit_tag_id` FOREIGN KEY (`tag_id`) REFERENCES `taggit_tag` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `taggit_taggeditem`
--


/*!40000 ALTER TABLE `taggit_taggeditem` DISABLE KEYS */;
INSERT INTO `taggit_taggeditem` VALUES (1,1,8,1),(2,2,8,1),(3,3,8,1),(4,3,8,2),(5,4,8,3),(6,5,8,5),(7,5,8,7),(8,6,8,9),(9,7,8,10),(10,8,8,11),(11,9,8,1),(12,10,8,9),(13,11,8,1),(14,12,8,12),(15,12,8,13),(16,12,8,7),(17,13,8,14),(18,14,8,9),(19,15,8,14),(20,16,8,14),(21,17,8,15),(22,18,8,11),(23,19,8,1),(24,19,8,14),(25,20,8,11),(26,21,8,7),(27,22,8,1),(28,23,8,16),(29,23,8,11),(30,24,8,9),(31,25,8,17),(32,26,8,16),(33,26,8,11);
/*!40000 ALTER TABLE `taggit_taggeditem` ENABLE KEYS */;
